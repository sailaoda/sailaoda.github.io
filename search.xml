<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis面试准备</title>
      <link href="/2021/10/20/Redis%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/10/20/Redis%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h1><h1 id="一、Redis简介"><a href="#一、Redis简介" class="headerlink" title="一、Redis简介"></a>一、Redis简介</h1><p>MySQL的数据都是存放在磁盘中的，缓存数据库极大的缓解了压力。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020154217006.png" alt="主流应用架构"></p><p>客户端和存储端之间的缓存层。</p><h2 id="缓存中间件——Memcache和Redis的区别"><a href="#缓存中间件——Memcache和Redis的区别" class="headerlink" title="缓存中间件——Memcache和Redis的区别"></a>缓存中间件——Memcache和Redis的区别</h2><p><strong>Memcache：代码参差类似Hash</strong></p><ul><li>支持简单数据类型</li><li>不支持数据持久化存储</li><li>不支持主从</li><li>不支持分片</li></ul><p><strong>Redis</strong></p><ul><li>数据类型丰富</li><li>支持数据磁盘持久化存储</li><li>次吃主从</li><li>支持分片</li></ul><h3 id="为什么Redis能这么快"><a href="#为什么Redis能这么快" class="headerlink" title="为什么Redis能这么快"></a>为什么Redis能这么快</h3><p>100000+QPS（QPS即query per second, 每秒内查询次数）</p><ul><li>完全基于内存，绝大部分请求是存粹的内存操作，执行效率高</li></ul><p>Redis采用单进程单线程模型的数据库，读写数据的时候不会受到硬盘IO的限制</p><ul><li>数据结构简单，对数据操作也简单</li></ul><p>不使用表，存储结构就是键值对</p><ul><li>采用单线程，单线程也能处理高并发请求，想多核也可以启动多实例</li></ul><p>避免频繁创建和销毁进程，主线程周期地处理</p><ul><li>使用多路I/O复用模型，非阻塞IO</li></ul><h3 id="多路I-O复用模型"><a href="#多路I-O复用模型" class="headerlink" title="多路I/O复用模型"></a>多路I/O复用模型</h3><h4 id="FD：File-Descriptor-文件描述符"><a href="#FD：File-Descriptor-文件描述符" class="headerlink" title="FD：File Descriptor , 文件描述符"></a>FD：File Descriptor , 文件描述符</h4><p>一个打开地文件通过唯一的描述符进行引用，该描述符是打开文件地元数据到文件本身地映射</p><p>在Linux内核中用FD描述</p><h4 id="传统地阻塞I-O模型"><a href="#传统地阻塞I-O模型" class="headerlink" title="传统地阻塞I/O模型"></a>传统地阻塞I/O模型</h4><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020160310803.png" alt="传统阻塞I/O模型" style="zoom:67%;" /></p><p>会影响其他FD对应的服务</p><h3 id="适合Redis的多路I-O复用模型"><a href="#适合Redis的多路I-O复用模型" class="headerlink" title="适合Redis的多路I/O复用模型"></a>适合Redis的多路I/O复用模型</h3><h4 id="Select系统调用（最重要的函数调用）"><a href="#Select系统调用（最重要的函数调用）" class="headerlink" title="Select系统调用（最重要的函数调用）"></a>Select系统调用（最重要的函数调用）</h4><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020160653643.png" alt="Select系统调用" style="zoom:67%;" /></p><p>能够同时监控多个文件描述符的可读可写情况，Select负责监听文件是否可读可写。</p><h4 id="Redis-采用的I-O多路复用函数：epoll-kqueue-evport-select"><a href="#Redis-采用的I-O多路复用函数：epoll-kqueue-evport-select" class="headerlink" title="Redis 采用的I/O多路复用函数：epoll/kqueue/evport/select ?"></a>Redis 采用的I/O多路复用函数：epoll/kqueue/evport/select ?</h4><ul><li>因地制宜</li></ul><p>Redis会根据编译平台的不同，采用不同的I/O多路复用函数</p><ul><li>优先选择时间复杂度为O(1)的I/O多路复用函数作为底层实现</li><li>以时间复杂度为O(n)的select 作为保底案</li><li>基于react设计模式监听I/O事件</li></ul><h1 id="二、Redis常见数据类型"><a href="#二、Redis常见数据类型" class="headerlink" title="二、Redis常见数据类型"></a>二、Redis常见数据类型</h1><h2 id="供用户使用的数据类型"><a href="#供用户使用的数据类型" class="headerlink" title="供用户使用的数据类型"></a>供用户使用的数据类型</h2><ul><li><h3 id="String-：字符串，最基本的数据类型，二进制安全"><a href="#String-：字符串，最基本的数据类型，二进制安全" class="headerlink" title="String ：字符串，最基本的数据类型，二进制安全"></a>String ：字符串，最基本的数据类型，二进制安全</h3></li></ul><p>K-V键值对 ，最大能存储512M ，可以包含任何数据，如jpg 图片或者 序列化的对象。</p><pre class="language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span><span class="token operator">></span> redis-cli<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">ping</span>PONG<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> name <span class="token string">"redis"</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get name<span class="token string">"redis"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> name <span class="token string">"memcache"</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get name<span class="token string">"memcache"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> count <span class="token number">1</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incr count<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get count<span class="token string">"2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incr userId211020<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span></code></pre><p>String 底层的简单动态字符串sds</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020162639123.png" alt="image-20211020162639123" style="zoom:50%;" /></p><ul><li><h3 id="Hash：散列，String元素组成的字典，适合用于存储对象"><a href="#Hash：散列，String元素组成的字典，适合用于存储对象" class="headerlink" title="Hash：散列，String元素组成的字典，适合用于存储对象"></a>Hash：散列，String元素组成的字典，适合用于存储对象</h3></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hmset lilei name <span class="token string">"Lilei"</span> age <span class="token number">26</span> title <span class="token string">"Senior"</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hget lilei age<span class="token string">"26"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hget lilei title<span class="token string">"Senior"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset lilei title <span class="token string">"Pricipal"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hget lilei title<span class="token string">"Pricipal"</span></code></pre><p>和实体类对象很相似 </p><ul><li><h3 id="List：列表，按照String元素插入顺序排序-（简单的字符串列表）"><a href="#List：列表，按照String元素插入顺序排序-（简单的字符串列表）" class="headerlink" title="List：列表，按照String元素插入顺序排序          （简单的字符串列表）"></a>List：列表，按照String元素插入顺序排序          （简单的字符串列表）</h3></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush mylist aaa<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush mylist bbb<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush mylist ccc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange mylist <span class="token number">0</span> <span class="token number">10</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"ccc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"bbb"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"aaa"</span></code></pre><p>后进先出，容量很大，可以实现最新消息排行榜</p><ul><li><h3 id="Set：集合，String元素组成的无序集合，通过哈希表实现，不允许重复"><a href="#Set：集合，String元素组成的无序集合，通过哈希表实现，不允许重复" class="headerlink" title="Set：集合，String元素组成的无序集合，通过哈希表实现，不允许重复"></a>Set：集合，String元素组成的无序集合，通过哈希表实现，不允许重复</h3></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset <span class="token number">111</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset <span class="token number">222</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset <span class="token number">333</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset <span class="token number">222</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smember myset<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR unknown <span class="token builtin class-name">command</span> <span class="token variable"><span class="token variable">`</span>smember<span class="token variable">`</span></span>, with args beginning with: <span class="token variable"><span class="token variable">`</span>myset<span class="token variable">`</span></span>,<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers myset<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"111"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"222"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"333"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset abc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset abd<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset abb<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers myset<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"333"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"222"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"abc"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"abb"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"abd"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"111"</span></code></pre><p>集合无序 ， 不允许重复</p><ul><li><h3 id="Sorted-Set：有序集合，-通过分数来为集合中的成员进行从小到大的排序"><a href="#Sorted-Set：有序集合，-通过分数来为集合中的成员进行从小到大的排序" class="headerlink" title="Sorted Set：有序集合， 通过分数来为集合中的成员进行从小到大的排序"></a>Sorted Set：有序集合， 通过分数来为集合中的成员进行从小到大的排序</h3></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd myzset <span class="token number">3</span> abc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd myzset <span class="token number">3</span> abd<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd myzset <span class="token number">3</span> abb<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd myzset <span class="token number">2</span> abb<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd myzset <span class="token number">2</span> abe<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd myzset <span class="token number">1</span> egg<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrangebyscore myzset <span class="token number">0</span> <span class="token number">10</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"egg"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"abb"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"abe"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"abc"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"abd"</span></code></pre><p>后面还有用于计数的HyperLogLog ，位图，用于支持存储地理位置信息的Geo地理坐标，流  四种数据类型。</p><h2 id="Redis的底层数据类型基础"><a href="#Redis的底层数据类型基础" class="headerlink" title="Redis的底层数据类型基础"></a>Redis的底层数据类型基础</h2><ol><li>简单动态字符串 </li><li>链表</li><li>字典</li><li>跳跃表</li><li>整数集合</li><li>压缩列表</li><li>对象</li></ol><h1 id="三、从海量key-数据-里查询出某一固定前缀的Key"><a href="#三、从海量key-数据-里查询出某一固定前缀的Key" class="headerlink" title="三、从海量key(数据)里查询出某一固定前缀的Key"></a>三、从海量key(数据)里查询出某一固定前缀的Key</h1><h3 id="留意细节"><a href="#留意细节" class="headerlink" title="留意细节"></a>留意细节</h3><ul><li>摸清数据规模，即问清楚边界</li></ul><h2 id="使用keys对线上的业务的影响"><a href="#使用keys对线上的业务的影响" class="headerlink" title="使用keys对线上的业务的影响"></a>使用keys对线上的业务的影响</h2><p>KEYS pattern ：查找所有符合给定模式pattern的key</p><p>用于生产环境不好，花费时间长，可能卡顿</p><p>SCAN cursor [MATCH pattern] [COUNT count]</p><ul><li>基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程</li><li>以0作为游标开始一次新的迭代，直到命令返回游标0完成一次遍历</li><li>不保证每次执行都返回某个给定数量的元素，支持模糊查询</li><li>一次返回的数量不可控，只能是大概率符合count参数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020170612671.png" alt="scan" style="zoom:50%;" /></p><h1 id="四、如何通过Redis-实现分布式锁"><a href="#四、如何通过Redis-实现分布式锁" class="headerlink" title="四、如何通过Redis 实现分布式锁"></a>四、如何通过Redis 实现分布式锁</h1><h2 id="分布式所需要解决的问题"><a href="#分布式所需要解决的问题" class="headerlink" title="分布式所需要解决的问题"></a>分布式所需要解决的问题</h2><ul><li>互斥性       任意时刻只能有一个客户端获取锁，不能有两个客户端获取到锁</li><li>安全性       锁只能由持有该锁的客户端删除</li><li>死锁           避免死锁</li><li>容错           部分节点宕机客户端仍然能够得到锁</li></ul><h2 id="通过Redis实现"><a href="#通过Redis实现" class="headerlink" title="通过Redis实现"></a>通过Redis实现</h2><h3 id="SETNX-key-value-：如果key不存在，则创建并赋值"><a href="#SETNX-key-value-：如果key不存在，则创建并赋值" class="headerlink" title="SETNX key value ：如果key不存在，则创建并赋值"></a>SETNX key value ：如果key不存在，则创建并赋值</h3><ul><li>时间复杂度：O(1)</li><li>返回值：设置成功，返回1；设置失败，返回0</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get locknx<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setnx locknx <span class="token builtin class-name">test</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setnx locknx <span class="token builtin class-name">test</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setnx locknx task<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get locknx<span class="token string">"test"</span></code></pre><p>setnx 有上述功能，并且操作时原子性的，初期用来实现分布式锁。</p><p>用setnx 对某个key赋值， 如果赋值成功，则没有别的线程在执行该段代码。</p><h3 id="如何解决SETNX长期有效的"><a href="#如何解决SETNX长期有效的" class="headerlink" title="如何解决SETNX长期有效的"></a>如何解决SETNX长期有效的</h3><h3 id="EXPIRE-key-second-："><a href="#EXPIRE-key-second-：" class="headerlink" title="EXPIRE key second  ："></a>EXPIRE key second  ：</h3><ul><li><p>设置key的生存时间，当key过期时（生存时间为0），会被自动删除</p></li><li><p>缺点：原子性得不到满足</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get locknx<span class="token string">"test"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> expire locknx <span class="token number">2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setnx locknx task<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get locknx<span class="token string">"task"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span></code></pre><h2 id="Redis原子性实现分布式锁"><a href="#Redis原子性实现分布式锁" class="headerlink" title="Redis原子性实现分布式锁"></a>Redis原子性实现分布式锁</h2><h3 id="SET-key-value-EX-second-PX-milliseconds-NX-XX"><a href="#SET-key-value-EX-second-PX-milliseconds-NX-XX" class="headerlink" title="SET key value [EX second] [PX milliseconds] [NX|XX]"></a>SET key value [EX second] [PX milliseconds] [NX|XX]</h3><ul><li>EX second：设置键的过期时间为second秒</li><li>PX millisecond ：设置键的过期时间为millisecond毫秒</li><li>NX：只在键不存在时，才对键进行设置操作</li><li>XX：只在键已经存在时，才对键进行设置操作</li><li>SET操作成功完成时，返回OK，否则返回nil</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> locktarget <span class="token number">12345</span> ex <span class="token number">10</span> nxOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> locktarget <span class="token number">12345</span> ex <span class="token number">10</span> nx<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> locktarget <span class="token number">12345</span> ex <span class="token number">10</span> nxOK</code></pre><h2 id="大量的key同时过期的注意事项"><a href="#大量的key同时过期的注意事项" class="headerlink" title="大量的key同时过期的注意事项"></a>大量的key同时过期的注意事项</h2><h3 id="集中过期，由于清除大量的key很耗时，会出现短暂的卡顿现象"><a href="#集中过期，由于清除大量的key很耗时，会出现短暂的卡顿现象" class="headerlink" title="集中过期，由于清除大量的key很耗时，会出现短暂的卡顿现象"></a>集中过期，由于清除大量的key很耗时，会出现短暂的卡顿现象</h3><ul><li>解决方案：在设置key的过期时间的时候，给每个key加上随机值</li></ul><h1 id="五、如何使用Redis实现异步队列"><a href="#五、如何使用Redis实现异步队列" class="headerlink" title="五、如何使用Redis实现异步队列"></a>五、如何使用Redis实现异步队列</h1><h2 id="使用List作为队列，RPUSH生产消息，LPOP消费消息"><a href="#使用List作为队列，RPUSH生产消息，LPOP消费消息" class="headerlink" title="使用List作为队列，RPUSH生产消息，LPOP消费消息"></a>使用List作为队列，RPUSH生产消息，LPOP消费消息</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpush testlist aaa<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpush testlist bbb<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpush testlist ccc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpop testlist<span class="token string">"aaa"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpop testlist<span class="token string">"bbb"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpop testlist<span class="token string">"ccc"</span></code></pre><ul><li>缺点：LPOP不会等待队列里面有值就直接消费</li><li>弥补：可以通过在应用层引入Sleep机制去调用LPOP重试</li></ul><p>别的方法：不用Sleep机制</p><h2 id="BLPOP-key-key…-timeout-：阻塞直到队列有消息或者超时"><a href="#BLPOP-key-key…-timeout-：阻塞直到队列有消息或者超时" class="headerlink" title="BLPOP key [key…] timeout ：阻塞直到队列有消息或者超时"></a>BLPOP key [key…] timeout ：阻塞直到队列有消息或者超时</h2><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020174409208.png" alt="两个客户端"></p><pre class="language-bash" data-language="bash"><code class="language-bash">//生产者<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpop testlist<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> blpop testlist <span class="token number">30</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"testlist"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"aaa"</span><span class="token punctuation">(</span><span class="token number">13</span>.63s<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">//消费者<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpop testlist<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpush testlist aaa<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></code></pre><ul><li>缺点：只能供一个消费者进行消费</li></ul><p>一对多的主题订阅模式</p><h2 id="pub-sub：主题订阅者模式"><a href="#pub-sub：主题订阅者模式" class="headerlink" title="pub/sub：主题订阅者模式"></a>pub/sub：主题订阅者模式</h2><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020174718697.png" alt="Redis主题订阅者模式" style="zoom:50%;" /></p><pre class="language-bash" data-language="bash"><code class="language-bash">//发布者<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> publish myTopic <span class="token string">"Hello ,I'm SaiLaoDa"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> publish myTopic <span class="token string">"I love you"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">//接收者<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> subscribe myTopicReading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"subscribe"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"myTopic"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"myTopic"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"Hello ,I'm SaiLaoDa"</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"myTopic"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"I love you"</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020175241842.png" alt="主题订阅者模式"></p><h3 id="pub-sub的缺点"><a href="#pub-sub的缺点" class="headerlink" title="pub/sub的缺点"></a>pub/sub的缺点</h3><p>消息的发布是无状态的，无法保证可达</p><p>要解决这一问题可以用专用的消息队列如卡夫卡等</p><p>一旦服务器进程退出，数据库的数据就会丢失 ，三种持久化方式</p><h1 id="六、Redis持久化方式之RDB"><a href="#六、Redis持久化方式之RDB" class="headerlink" title="六、Redis持久化方式之RDB"></a>六、Redis持久化方式之RDB</h1><h2 id="RDB（快照）持久化：保存某个时间点的全量数据快照"><a href="#RDB（快照）持久化：保存某个时间点的全量数据快照" class="headerlink" title="RDB（快照）持久化：保存某个时间点的全量数据快照"></a>RDB（快照）持久化：保存某个时间点的全量数据快照</h2><p>在一个特定的间隔保存时间点的全量数据的快照。</p><p>eg: 在redis.conf中，</p><pre class="language-none"><code class="language-none">save 900 1                   &#x2F;&#x2F;一段时间内有一条数据写入，每900s创建一条快照save 300 10save 60 10000stop-writes-on-bgsave-error yes    &#x2F;&#x2F;表示当备份进程出错时，主进程停止接受写入操作rdbcompression yes       &#x2F;&#x2F;备份时进行rdb压缩</code></pre><ul><li><h4 id="SAVE：阻塞Redis的服务器进程，直到RDB文件被创建完毕"><a href="#SAVE：阻塞Redis的服务器进程，直到RDB文件被创建完毕" class="headerlink" title="SAVE：阻塞Redis的服务器进程，直到RDB文件被创建完毕"></a>SAVE：阻塞Redis的服务器进程，直到RDB文件被创建完毕</h4></li><li><h4 id="BGSAVE：Fork出一个子进程来创建RDB文件，不阻塞服务器进程。（客户端不会被卡顿）"><a href="#BGSAVE：Fork出一个子进程来创建RDB文件，不阻塞服务器进程。（客户端不会被卡顿）" class="headerlink" title="BGSAVE：Fork出一个子进程来创建RDB文件，不阻塞服务器进程。（客户端不会被卡顿）"></a><strong>BGSAVE：Fork出一个子进程来创建RDB文件，不阻塞服务器进程。</strong>（客户端不会被卡顿）</h4></li></ul><p>lastsave 输出上次备份的时间。</p><h2 id="自动化触发RDB持久化的方式"><a href="#自动化触发RDB持久化的方式" class="headerlink" title="自动化触发RDB持久化的方式"></a>自动化触发RDB持久化的方式</h2><ul><li>根据redis.conf配置里的SAVE m n 定时触发（用的是BGSAVE）</li><li>主从复制时，主节点自动触发</li><li>执行Debug Relog </li><li>执行Shutdown且没有开启AOF持久化</li></ul><h2 id="BGSAVE原理"><a href="#BGSAVE原理" class="headerlink" title="BGSAVE原理"></a>BGSAVE原理</h2><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020194333774.png" alt="BGSAVE原理"  /></p><ul><li>系统调用fork()：创建进程，实现了Copy-on-Write </li></ul><h2 id="Copy-on-Write-写实复制-，COW"><a href="#Copy-on-Write-写实复制-，COW" class="headerlink" title="Copy-on-Write(写实复制 ，COW )"></a>Copy-on-Write(写实复制 ，COW )</h2><p>如果有多个调用者同时要求相同资源（如内存或磁盘上的数据存储），他们会共同获取相同的指针指向相同的资源，直到某个调用者试图修改资源的内容时，系统才会真正复制一份专用副本给该调用者，而其他调用者所见到的最初的资源仍然保持不变。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020195054676.png" alt="父子进程共享相同的物理空间"></p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>内存数据的全量同步，数据量大会由于I/O而严重影响性能</li><li>可能会因为Redis挂掉而丢失从当前至最近一次快照期间的数据</li></ul><h1 id="七、Redis持久化方式AOF以及混合模式"><a href="#七、Redis持久化方式AOF以及混合模式" class="headerlink" title="七、Redis持久化方式AOF以及混合模式"></a>七、Redis持久化方式AOF以及混合模式</h1><h2 id="AOF-Append-Only-File-持久化：保存写状态"><a href="#AOF-Append-Only-File-持久化：保存写状态" class="headerlink" title="AOF(Append-Only-File)持久化：保存写状态"></a>AOF(Append-Only-File)持久化：保存写状态</h2><ul><li>记录下除了查询以外的所有变更数据库状态的指令</li><li>以append的形式追加保存到AOF文件中</li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F;redis.confappendonly yes         &#x2F;&#x2F;从No设置成Yesappendfilename &quot;appendonly.aof&quot;appendfsync everysec       &#x2F;&#x2F;aof文件的写入方式 ：每隔一秒写入磁盘</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">//redis-cliconfig <span class="token builtin class-name">set</span> appendonly <span class="token function">yes</span> OK<span class="token builtin class-name">set</span> aofTest <span class="token string">"hehe"</span>OK<span class="token builtin class-name">exit</span></code></pre><h2 id="日志重写解决AOF文件大小不断增加的问题，原理如下："><a href="#日志重写解决AOF文件大小不断增加的问题，原理如下：" class="headerlink" title="日志重写解决AOF文件大小不断增加的问题，原理如下："></a>日志重写解决AOF文件大小不断增加的问题，原理如下：</h2><ul><li>调用fork() ， 创建一个子进程</li><li>子进程把新的AOF写到一个临时文件里，不依赖原来的AOF文件</li><li>主进程持续将新的变动同时写到内存和原来的AOF里</li><li>主进程获取子进程重写AOF的完成信号，往新AOF同步增量变动</li><li>使用新的AOF文件替换掉旧的AOF文件</li></ul><p>（可以手工触发，bgrewriteaof）</p><h2 id="Redis数据的恢复"><a href="#Redis数据的恢复" class="headerlink" title="Redis数据的恢复"></a>Redis数据的恢复</h2><h3 id="RDB和AOF文件共存情况下的恢复流程"><a href="#RDB和AOF文件共存情况下的恢复流程" class="headerlink" title="RDB和AOF文件共存情况下的恢复流程"></a>RDB和AOF文件共存情况下的恢复流程</h3><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020200921169.png" alt="数据恢复"></p><p>优先AOF文件</p><h3 id="RDB和AOF的优缺点"><a href="#RDB和AOF的优缺点" class="headerlink" title="RDB和AOF的优缺点"></a>RDB和AOF的优缺点</h3><ul><li>RDB优点：全量数据快照，文件小，恢复快</li><li>RDB缺点：无法保存最近一次快照之后的数据</li><li>AOF优点：可读性高，适合保存增量数据，数据不易丢失</li><li>AOF缺点：文件体积大，恢复时间长</li></ul><h2 id="RDB-AOF混合持久化方式"><a href="#RDB-AOF混合持久化方式" class="headerlink" title="RDB-AOF混合持久化方式"></a>RDB-AOF混合持久化方式</h2><p>使用RDB作为全量备份，AOF增加增量备份。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020201425394.png" alt="混合模式"></p><ul><li><h4 id="BGSAVE做镜像全量持久化，AOF做增量持久化"><a href="#BGSAVE做镜像全量持久化，AOF做增量持久化" class="headerlink" title="BGSAVE做镜像全量持久化，AOF做增量持久化"></a>BGSAVE做镜像全量持久化，AOF做增量持久化</h4></li></ul><h1 id="八、Pipeline及主从同步"><a href="#八、Pipeline及主从同步" class="headerlink" title="八、Pipeline及主从同步"></a>八、Pipeline及主从同步</h1><h2 id="使用Pipeline的好处"><a href="#使用Pipeline的好处" class="headerlink" title="使用Pipeline的好处"></a>使用Pipeline的好处</h2><ul><li>Pipeline和Linux的管道类似</li><li>Redis基于请求/响应模型，单个请求处理需要一一应答</li><li>Pipeline批量执行指令，节省多次IO往返的时间</li><li>有顺序依赖的指令建议分批发送</li></ul><h2 id="Redis的同步机制"><a href="#Redis的同步机制" class="headerlink" title="Redis的同步机制"></a>Redis的同步机制</h2><h3 id="主从同步原理"><a href="#主从同步原理" class="headerlink" title="主从同步原理"></a>主从同步原理</h3><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020202330105.png" alt="MS模型" style="zoom:50%;" /></p><p>M主节点来写操作，S从节点来读操作</p><h3 id="全量同步过程"><a href="#全量同步过程" class="headerlink" title="全量同步过程"></a>全量同步过程</h3><ul><li>Salve发送sync命令到Master </li><li>Master启动一个后台进程，将Redis中的数据快照保存到文件中</li><li>Master 将保存数据快照期间收到的写命令缓存起来</li><li>Master完成写文件操作后，将该文件发送给Salve</li><li>使用新的AOF文件替换掉旧的AOF文件</li><li>Master将这期间收集的增量写命令发送给Salve端</li></ul><h3 id="增量同步过程"><a href="#增量同步过程" class="headerlink" title="增量同步过程"></a>增量同步过程</h3><ul><li>Master接受到用户的操作指令，判断是否需要传播到Slave</li><li>将操作记录追加到AOF文件</li><li>将操作传播到其他Slave：1、对齐主从库；2、往响应缓存写入指令</li><li>将缓存中的数据发送给Slave</li></ul><p>主从模式的弊端就是不具备高可用性，当Master挂掉之后，Redis无法对外写入</p><h2 id="Redis-Sentinel（分布式系统）"><a href="#Redis-Sentinel（分布式系统）" class="headerlink" title="Redis Sentinel（分布式系统）"></a>Redis Sentinel（分布式系统）</h2><h3 id="解决主从同步Master宕机后的主从切换问题："><a href="#解决主从同步Master宕机后的主从切换问题：" class="headerlink" title="解决主从同步Master宕机后的主从切换问题："></a>解决主从同步Master宕机后的主从切换问题：</h3><ul><li>监控：检查主从服务器是否运行正常</li><li>提醒：通过API向管理员或者其他应用程序发送故障通知</li><li>自动故障迁移：主从切换</li></ul><h2 id="流言协议Gossip"><a href="#流言协议Gossip" class="headerlink" title="流言协议Gossip"></a>流言协议Gossip</h2><h3 id="在杂乱无章中寻求一致"><a href="#在杂乱无章中寻求一致" class="headerlink" title="在杂乱无章中寻求一致"></a>在杂乱无章中寻求一致</h3><ul><li>每个节点都随机地与对方通信，最终所有节点的状态达到一致</li><li>种子节点定期随机向其他节点发送节点列表以及需要传播的消息</li><li>不保证信息一定会传递给所有节点，但是最终会趋于一致</li></ul><h1 id="九、Redis集群"><a href="#九、Redis集群" class="headerlink" title="九、Redis集群"></a>九、Redis集群</h1><h2 id="Redis的集群原理"><a href="#Redis的集群原理" class="headerlink" title="Redis的集群原理"></a>Redis的集群原理</h2><h3 id="如何从海量数据里快速找到所需："><a href="#如何从海量数据里快速找到所需：" class="headerlink" title="如何从海量数据里快速找到所需："></a>如何从海量数据里快速找到所需：</h3><ul><li><p>分片：按照某种规则去划分数据，分散存储在多个节点上</p></li><li><p>常规的按照哈希划分无法实现节点的动态增减</p></li></ul><h3 id="一致性哈希算法："><a href="#一致性哈希算法：" class="headerlink" title="一致性哈希算法："></a>一致性哈希算法：</h3><h4 id="对2-32取模，将哈希值空间组织成虚拟的圆环"><a href="#对2-32取模，将哈希值空间组织成虚拟的圆环" class="headerlink" title="对2^32取模，将哈希值空间组织成虚拟的圆环"></a>对2^32取模，将哈希值空间组织成虚拟的圆环</h4><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020204421803.png" alt="虚拟圆环" style="zoom:50%;" /></p><p>2^32个点组成的圆环</p><p>下一步将各个服务器使用哈希进行一个哈希的变换，使用服务器的IP或者主机名作为关键字进行哈希，来确定其在哈希环上的位置</p><h4 id="将数据key使用相同的函数Hash计算出哈希值"><a href="#将数据key使用相同的函数Hash计算出哈希值" class="headerlink" title="将数据key使用相同的函数Hash计算出哈希值"></a>将数据key使用相同的函数Hash计算出哈希值</h4><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020204824915.png" alt="哈希定位" style="zoom:50%;" /></p><p>将对应的数据分散存储到这四个node上去了，假设Node C 宕机，数据将会存储到离他顺时针最近的Node节点上；</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020204937579.png" alt="存储数据" style="zoom:50%;" /></p><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h4 id="新增服务器Node-x"><a href="#新增服务器Node-x" class="headerlink" title="新增服务器Node x"></a>新增服务器Node x</h4><p>如果新增一个Node x ，受影响的数据只新服务器到其环空间中的前一台服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020205651156.png" alt="新增服务器" style="zoom:50%;" /></p><p>有较好的容错性和拓展性。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="Hash环的数据倾斜问题"><a href="#Hash环的数据倾斜问题" class="headerlink" title="Hash环的数据倾斜问题"></a>Hash环的数据倾斜问题</h4><p>在服务器节点很少的时候，容易因为节点分布不均匀造成数据倾斜，</p><p>被缓存的数据被集中缓存在其中部分服务器上，可能将Node A 撑爆。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020205946221.png" alt="数据倾斜问题" style="zoom:50%;" /></p><h3 id="解决数据倾斜问题"><a href="#解决数据倾斜问题" class="headerlink" title="解决数据倾斜问题"></a>解决数据倾斜问题</h3><h4 id="引入虚拟节点解决数据倾斜的问题"><a href="#引入虚拟节点解决数据倾斜的问题" class="headerlink" title="引入虚拟节点解决数据倾斜的问题"></a>引入虚拟节点解决数据倾斜的问题</h4><p>一致性哈希算法引入虚拟节点的机制，对每一个服务器节点计算多个Hash，计算结果位置都放置一个此服务器节点，称为虚拟节点。</p><p>可以在服务器IP或者主机名后面增加编号来实现，只需要增加虚拟节点的映射。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211020210318174.png" alt="引入虚拟节点" style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 面试准备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试准备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记19：Go语言之MySQL</title>
      <link href="/2021/10/19/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B019%EF%BC%9AGo%E8%AF%AD%E8%A8%80%E4%B9%8BMySQL/"/>
      <url>/2021/10/19/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B019%EF%BC%9AGo%E8%AF%AD%E8%A8%80%E4%B9%8BMySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang学习笔记19：Go语言之MySQL"><a href="#Golang学习笔记19：Go语言之MySQL" class="headerlink" title="Golang学习笔记19：Go语言之MySQL"></a>Golang学习笔记19：Go语言之MySQL</h1><h2 id="一、Golang的MySQL-驱动"><a href="#一、Golang的MySQL-驱动" class="headerlink" title="一、Golang的MySQL 驱动"></a>一、Golang的MySQL 驱动</h2><p><a href="http://github.com/Go-SQL-Driver/MySQL">http://github.com/Go-SQL-Driver/MySQL</a> </p><p>sql.Open()函数用来打开一个注册过的数据库驱动，Go-MySQL-Dricer中注册了mysql这个数据库驱动，第二个参数是DNS (Data Source Name)  ， 它是Go-MySQL-Driver 定义的一些数据库链接和配置信息。它支持如下格式：</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
          <category> 数据库andNosql数据库andLinux运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer之链表专题</title>
      <link href="/2021/10/18/%E5%89%91%E6%8C%87Offer%E4%B9%8B%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%98/"/>
      <url>/2021/10/18/%E5%89%91%E6%8C%87Offer%E4%B9%8B%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="链表专题"><a href="#链表专题" class="headerlink" title="链表专题"></a>链表专题</h2><h3 id="剑指Offer06-从尾到头打印链表"><a href="#剑指Offer06-从尾到头打印链表" class="headerlink" title="剑指Offer06.从尾到头打印链表"></a>剑指Offer06.<a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">从尾到头打印链表</a></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><h4 id="示例-："><a href="#示例-：" class="headerlink" title="示例 ："></a>示例 ：</h4><pre class="language-none"><code class="language-none">输入：head &#x3D; [1,3,2]输出：[2,3,1]</code></pre><h4 id="限制："><a href="#限制：" class="headerlink" title="限制："></a>限制：</h4><p><code>0 &lt;= 链表长度 &lt;= 10000</code></p><h4 id="算法代码："><a href="#算法代码：" class="headerlink" title="算法代码："></a>算法代码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct &#123; *     Val int *     Next *ListNode * &#125; */</span><span class="token comment">//直接递归反转</span><span class="token keyword">func</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token function">reversePrint</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>Next<span class="token punctuation">)</span> <span class="token punctuation">,</span> head<span class="token punctuation">.</span>Val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1.遍历链表时直接Val添加到数组头部:时间复杂度O(N) | 空间复杂度O(1)</span>    ans <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> head <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>head<span class="token punctuation">.</span>Val<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ans<span class="token operator">...</span><span class="token punctuation">)</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>Next    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span></code></pre><h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><ol><li>递归法</li><li>辅助栈法</li><li>直接顺序获取值放到数组，再反转结果</li></ol><h4 id="算法改进：（数组索引）"><a href="#算法改进：（数组索引）" class="headerlink" title="算法改进：（数组索引）"></a>算法改进：（数组索引）</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct &#123; *     Val int *     Next *ListNode * &#125; */</span><span class="token keyword">func</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> head <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> head<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>Next    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        i<span class="token operator">++</span>        j<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211018151657921.png" alt="算法优化"></p><h3 id="剑指Offer24-反转链表"><a href="#剑指Offer24-反转链表" class="headerlink" title="剑指Offer24.反转链表"></a>剑指Offer24.<a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">反转链表</a></h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><pre class="language-none"><code class="language-none">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</code></pre><h4 id="限制：-1"><a href="#限制：-1" class="headerlink" title="限制："></a>限制：</h4><p>0 &lt;= 节点个数 &lt;= 5000</p><h4 id="算法代码：-1"><a href="#算法代码：-1" class="headerlink" title="算法代码："></a>算法代码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 递归</span><span class="token keyword">func</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>Next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>Next<span class="token punctuation">)</span>    head<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next <span class="token operator">=</span> head    head<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token keyword">return</span> p<span class="token punctuation">&#125;</span></code></pre><h4 id="算法思路：-1"><a href="#算法思路：-1" class="headerlink" title="算法思路："></a>算法思路：</h4><p>常规的递归思路。</p><h4 id="算法优化："><a href="#算法优化：" class="headerlink" title="算法优化："></a>算法优化：</h4><p>链表节点中有两个元素：</p><ul><li>值</li><li>指针</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ListNode <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Val  <span class="token builtin">int</span>    Next <span class="token operator">*</span>ListNode<span class="token punctuation">&#125;</span></code></pre><p>Next指向下一个节点</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/1455942-20181108222904421-264942785.png" alt="img"></p><p>那么这道题其实就是把指针指向前一个节点</p><div class="table-container"><table><thead><tr><th>位置调换次数</th><th>pre</th><th>cur</th><th>whole</th></tr></thead><tbody><tr><td>0</td><td>nil</td><td>1-&gt;2-&gt;3-&gt;4-&gt;5</td><td>1-&gt;2-&gt;3-&gt;4-&gt;5</td></tr><tr><td>1</td><td>1-&gt;nil</td><td>2-&gt;-3&gt;-&gt;4-&gt;5</td><td>2-&gt;3-&gt;4-&gt;5-&gt;1-&gt;nil</td></tr><tr><td>2</td><td>2-&gt;1-&gt;nil</td><td>3-&gt;4-&gt;5</td><td>3-&gt;4-&gt;5-&gt;2-&gt;1-&gt;nil</td></tr><tr><td>3</td><td>3-&gt;2-&gt;1-&gt;nil</td><td>4-&gt;5</td><td>4-&gt;5-&gt;3-&gt;2-&gt;1-&gt;nil</td></tr><tr><td>4</td><td>4-&gt;3-&gt;2-&gt;1-&gt;nil</td><td>5</td><td>5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;nil</td></tr></tbody></table></div><p>可以看出来</p><ul><li>pre是cur的最前面那位（pre = cur）</li><li>cur就是当前位的后面链表元素（cur = cur.Next）</li><li>cur.Next肯定是接pre（cur.Next = pre）</li></ul><h4 id="优化代码："><a href="#优化代码：" class="headerlink" title="优化代码："></a>优化代码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//反转链表的实现</span><span class="token keyword">func</span> <span class="token function">reversrList</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">&#123;</span>    cur <span class="token operator">:=</span> head    <span class="token keyword">var</span> pre <span class="token operator">*</span>ListNode <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token keyword">for</span> cur <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>Next <span class="token operator">=</span> cur<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>Next<span class="token punctuation">,</span> pre <span class="token comment">//这句话最重要</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211018151759382.png" alt="算法优化"></p><h3 id="剑指Offer22-链表中倒数第k个节点"><a href="#剑指Offer22-链表中倒数第k个节点" class="headerlink" title="剑指Offer22.链表中倒数第k个节点"></a>剑指Offer22.<a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">链表中倒数第k个节点</a></h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p><p>例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><pre class="language-none"><code class="language-none">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.返回链表 4-&gt;5.</code></pre><h4 id="算法思路：-2"><a href="#算法思路：-2" class="headerlink" title="算法思路："></a>算法思路：</h4><ol><li>快慢指针法：快指针先走k，然后快慢指针一起走，快指针走到终点时，慢指针即为所求。</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct &#123; *     Val int *     Next *ListNode * &#125; */</span><span class="token keyword">func</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> slow <span class="token punctuation">,</span> fast <span class="token operator">*</span>ListNode <span class="token operator">=</span> head <span class="token punctuation">,</span> head    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token punctuation">;</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>Next        i <span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> fast <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> fast <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>Next        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>Next    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> slow<span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211018161140668.png" alt="image-20211018161140668"></p><ol><li>数组索引法</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> res <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ListNode    <span class="token keyword">for</span> head <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res <span class="token punctuation">,</span> head<span class="token punctuation">)</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>Next    <span class="token punctuation">&#125;</span>    l <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">if</span> l <span class="token operator">>=</span> k <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">[</span>l <span class="token operator">-</span> k<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211018190424786.png" alt="image-20211018190424786"></p><p>以空间换时间。 空间都不大行。</p><ol><li>遍历递归</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">&#125;</span>    node <span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">getKthFromEndre</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>k<span class="token punctuation">)</span>    <span class="token keyword">return</span> node    <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">getKthFromEndre</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ListNode<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token comment">//遍历到最后返回0，开始往上+1判断是否等于k，等于的话直接返回node</span>    <span class="token punctuation">&#125;</span>    node<span class="token punctuation">,</span> res <span class="token operator">:=</span> <span class="token function">getKthFromEndre</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>Next<span class="token punctuation">,</span> k<span class="token punctuation">)</span>    <span class="token keyword">if</span> res <span class="token operator">==</span> k <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> node<span class="token punctuation">,</span> res    <span class="token punctuation">&#125;</span>    res<span class="token operator">++</span>    <span class="token keyword">return</span> head<span class="token punctuation">,</span> res<span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211018200136155.png" alt="image-20211018200136155"></p><h3 id="剑指Offer25-合并两个排序的链表"><a href="#剑指Offer25-合并两个排序的链表" class="headerlink" title="剑指Offer25.合并两个排序的链表"></a>剑指Offer25.<a href="https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">合并两个排序的链表</a></h3><h4 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h4><p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><pre class="language-none"><code class="language-none">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</code></pre><h4 id="限制：-2"><a href="#限制：-2" class="headerlink" title="限制："></a>限制：</h4><pre class="language-none"><code class="language-none">0 &lt;&#x3D; 链表长度 &lt;&#x3D; 1000</code></pre><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p><strong>中心思想：因为有序，则利用双指针分别指向两条链表的表头，然后通过比较大小改变这些节点的指向即可。</strong></p><ol><li>利用一个头节点<code>head</code>简化合并过程。</li></ol><h4 id="算法代码：-2"><a href="#算法代码：-2" class="headerlink" title="算法代码："></a>算法代码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct &#123; *     Val int *     Next *ListNode * &#125; */</span><span class="token keyword">func</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1 <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> l2 <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">&#123;</span>    head <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode <span class="token punctuation">&#123;</span>        Val <span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">,</span>        Next <span class="token punctuation">:</span> <span class="token boolean">nil</span> <span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">:=</span> head     <span class="token keyword">for</span> l1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> l1<span class="token punctuation">.</span>Val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>Val <span class="token punctuation">&#123;</span>            p<span class="token punctuation">.</span>Next <span class="token operator">=</span> l1            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>Next         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">.</span>Next <span class="token operator">=</span> l2             l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>Next         <span class="token punctuation">&#125;</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>Next    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> l1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">.</span>Next <span class="token operator">=</span> l1     <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> l2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">.</span>Next <span class="token operator">=</span> l2    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>Next<span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211018223252610.png" alt="image-20211018223252610"></p><h3 id="剑指Offer35-复杂链表的复制"><a href="#剑指Offer35-复杂链表的复制" class="headerlink" title="剑指Offer35.复杂链表的复制"></a>剑指Offer35.<a href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/">复杂链表的复制</a></h3><h4 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h4><p>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><p>示例 1：<img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/e1.png" alt="img"></p><pre class="language-none"><code class="language-none">输入：head &#x3D; [[7,null],[13,0],[11,4],[10,2],[1,0]]输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</code></pre><p>示例 2：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png" alt="img"></p><pre class="language-none"><code class="language-none">输入：head &#x3D; [[1,1],[2,1]]输出：[[1,1],[2,1]]</code></pre><p>示例 3：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/e3.png" alt="img"></p><pre class="language-none"><code class="language-none">输入：head &#x3D; [[3,null],[3,0],[3,null]]输出：[[3,null],[3,0],[3,null]]</code></pre><p>示例 4：</p><pre class="language-none"><code class="language-none">输入：head &#x3D; []输出：[]解释：给定的链表为空（空指针），因此返回 null。</code></pre><h4 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h4><ul><li>-10000 &lt;= Node.val &lt;= 10000</li><li>Node.random 为空（null）或指向链表中的节点。</li><li>节点数目不超过 1000 。</li></ul><h4 id="算法代码：-3"><a href="#算法代码：-3" class="headerlink" title="算法代码："></a>算法代码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for a Node. * type Node struct &#123; *     Val int *     Next *Node *     Random *Node * &#125; */</span><span class="token keyword">func</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>head <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 思考总结 </category>
          
          <category> LeetCode刷题剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS8云服务器配置Redis</title>
      <link href="/2021/10/17/CentOS8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AERedis/"/>
      <url>/2021/10/17/CentOS8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AERedis/</url>
      
        <content type="html"><![CDATA[<p>第一步：重置云服务器密码</p><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p>使用dnf命令安装</p><pre class="language-none"><code class="language-none">sudo dnf install redis -y</code></pre><p>安装的是Redis5.0版本，conf 文件在 /etc/redis.conf ，等待安装完成就可以正常使用了。</p><p>如果使用了 dnf 命令在线安装，则不需要任何操作，可以直接使用命令启停 redis 。</p><pre class="language-none"><code class="language-none">systemctl start redis #启动systemctl stop redis #停止systemctl status redis #查看 redis 状态</code></pre><p>配置文件修改</p><pre class="language-none"><code class="language-none">bind 127.0.0.1 #默认只允许本机访问，如果需要开放外网，则注释掉这行protected-mode yes #保护模式，如果需要开放外网，则改为 noport 6379 #可修改端口requirepass password #登录密码，改配置默认是注释的，放开之后在登录时需要使用如下方式登录redis-cli -p 6379127.0.0.1:6379&gt; ping(error) NOAUTH Authentication required.127.0.0.1:6379&gt; auth passwordOK127.0.0.1:6379&gt; pingPONG</code></pre><p>注意要先<code>su</code>进入root权限。</p><p><code>whereis redis</code>命令查找redis.conf配置文件的位置</p><p><code>/etc/redis.conf</code></p><p><code>vim redis.conf</code>编辑配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211016205123363.png" alt="配置文件"></p><h3 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h3><p>移动配置文件到安装目录下</p><p>进入redis地址中</p><pre class="language-none"><code class="language-none">cd &#x2F;usr&#x2F;lib64&#x2F;redis&#x2F;</code></pre><p>创建文件夹etc</p><p>复制配置文件redis.conf到etc中</p><p>vim关闭和开启行号（命令模式下 （按下esc））</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;关闭行号：set nonumber&#x2F;&#x2F;开启行号：set number</code></pre><p>vim查找</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;高亮搜索:set hlsearch    &#x2F;&#x2F;在普通搜索前执行此命令&#x2F;&#x2F;普通搜索一个斜杠 &#x2F; 加上后面要搜索的内容</code></pre><p>配置redis</p><p>1)开启外网访问</p><p>将<code>bind 127.0.0.1</code>注释掉或者改成<code>0.0.0.0</code>。</p><p>注：开放服务端口</p><p>打开防火墙上的对应端口 ， 例如默认的是6379</p><p>2）配置redis为后台启动</p><p><code>daemonize no  修改为 daemonize yes</code></p><h3 id="Redis启动"><a href="#Redis启动" class="headerlink" title="Redis启动"></a>Redis启动</h3><p>1、服务端启动</p><pre class="language-none"><code class="language-none">redis-server &#x2F;usr&#x2F;lib64&#x2F;redis&#x2F;etc&#x2F;redis.conf</code></pre><p>2、查看进程</p><pre class="language-none"><code class="language-none">ps -ef|grep redis</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211016212437343.png" alt="redis进程"></p><p>3、客户端启动</p><pre class="language-none"><code class="language-none">1) cd &#x2F;usr&#x2F;lib64&#x2F;redis&#x2F;2) .&#x2F;redis-cli 没密码   .&#x2F;redis-cli -a qwe789456321 有密码3) exit退出</code></pre><p>远程服务上执行命令</p><pre class="language-none"><code class="language-none">redis-cli -h host -p port -a password格式为redis-cli –h IP地址 –p 端口 –a 密码</code></pre><p>这里的地址就是我们云服务器的公网地址。</p><h3 id="Redis关闭"><a href="#Redis关闭" class="headerlink" title="Redis关闭"></a>Redis关闭</h3><p>第一种关闭方式：（断电、非正常关闭。容易数据丢失）</p><pre class="language-none"><code class="language-none">查询PID   ps -ef | grep -i rediskill -9 PID</code></pre><p>第二种关闭方式（正常关闭、数据保存）</p><pre class="language-none"><code class="language-none">.&#x2F;bin&#x2F;redis-cli shutdown</code></pre><p>或者</p><pre class="language-none"><code class="language-none">.&#x2F;redis-cli -a 你的密码 shutdown</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库andNosql数据库andLinux运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang开源项目大全</title>
      <link href="/2021/10/16/Golang%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%A7%E5%85%A8/"/>
      <url>/2021/10/16/Golang%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="golang-开源项目大全"><a href="#golang-开源项目大全" class="headerlink" title="golang 开源项目大全"></a>golang 开源项目大全</h1><p>这个项目可以理解为针对互联网IT人打造的中文版awesome-go。已有的awesome-go项目， 汇总了很多go开源项目， 但存在的问题是收集太全了， 而且每个项目没有详细描述。</p><p>本项目作为awesome-go的一个扩展，根据go语言中文社区提供的资料，还有互联网企业架构设计中的常见组件分类， 共精心挑选了154个开源项目（项目不限于在github开源的项目）， 分成以下17个大类。</p><p>项目初衷是帮助到那些想学习和借鉴优秀golang开源项目， 和在互联网架构设计时期望快速寻找合适轮子的人。</p><p>ps: 以下项目<strong>star数均大于100</strong>，且会定期检查项目的url，剔除无效链接。 每个分类下的项目会按照<strong>star数从高到低</strong>进行排列。</p><h1 id="监控系统"><a href="#监控系统" class="headerlink" title="监控系统"></a>监控系统</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/grafana/grafana">grafana/grafana</a></td><td style="text-align:left">Grafana 是一个用于监控指标分析和图表展示的工具， 后端支持 Graphite, InfluxDB &amp; Prometheus &amp; Open-falcon等， 它是一个流行的监控组件， 目前在各大中小型公司中广泛应用</td><td style="text-align:left">34113</td></tr><tr><td style="text-align:left"><a href="https://github.com/prometheus/prometheus">prometheus/prometheus</a></td><td style="text-align:left">Prometheus 是一个开源的服务监控系统和时间序列数据库， 提供监控数据存储，展示，告警等功能</td><td style="text-align:left">29808</td></tr><tr><td style="text-align:left"><a href="https://github.com/bosun-monitor/bosun">bosun-monitor/bosun</a></td><td style="text-align:left">专业的跨平台开源系统监控项目，go语言编写，灵活的模板和表达式配合上各种collector可以监控任何应用或系统级的运行数据，比 zabbix更轻量级、更易入手和更适合定制。</td><td style="text-align:left">2961</td></tr><tr><td style="text-align:left"><a href="https://github.com/sourcegraph/checkup">sourcegraph/checkup</a></td><td style="text-align:left">一个分布式的无锁的站点健康状态检查工具。 支持检查http， tcp， dns等的状态 并可将结果保存在s3。 自带了一个美观的界面。</td><td style="text-align:left">2822</td></tr><tr><td style="text-align:left"><a href="https://github.com/influxdata/kapacitor">influxdata/kapacitor</a></td><td style="text-align:left">Kapacitor 是一个开源框架，用来处理、监控和警告时间序列数据。</td><td style="text-align:left">1879</td></tr><tr><td style="text-align:left"><a href="https://github.com/rapidloop/rtop">rapidloop/rtop</a></td><td style="text-align:left">rtop 是一个简单的无代理的远程服务器监控工具，基于 SSH 连接进行工作。无需在被监控的服务器上安装任何软件。rtop 直接通过 SSH 连接到待监控服务器，然后执行命令来收集监控数据。rtop 每几秒钟就自动更新监控数据，类似其他 *top 命令</td><td style="text-align:left">1845</td></tr><tr><td style="text-align:left"><a href="https://github.com/open-falcon/of-release">open-falcon/of-release</a></td><td style="text-align:left">OpenFalcon是一款小米开源的监控系统。功能：数据采集免配置：agent自发现、支持Plugin、主动推送模式; 容量水平扩展：生产环境每秒50万次数据收集、告警、存储、绘图，可持续水平扩展。告警策略自发现：Web界面、支持策略模板、模板继承和覆盖、多种告警方式、支持回调动作。告警设置人性化：支持最大告警次数、告警级别设置、告警恢复通知、告警暂停、不同时段不同阈值、支持维护周期，支持告警合并。历史数据高效查询：秒级返回上百个指标一年的历史数据。Dashboard人性化：多维度的数据展示，用户自定义Dashboard等功能。架构设计高可用：整个系统无核心单点，易运维，易部署。</td><td style="text-align:left">1237</td></tr><tr><td style="text-align:left"><a href="https://github.com/rach/pome">rach/pome</a></td><td style="text-align:left">Pome 是 Postgres Metrics 的意思。Pome 是一个 PostgreSQL 的指标仪表器，用来跟踪你的数据库的健康状况。</td><td style="text-align:left">1085</td></tr><tr><td style="text-align:left"><a href="https://github.com/gy-games/smartping">gy-games/smartping</a></td><td style="text-align:left">SmartPing为一个各机器(点)间间互PING检测工具，支持互PING，单向PING，绘制拓扑及报警功能。 系统设计为无中心化原则，所有的数据均存储自身点中，默认数据循环保留1个月时间，由自身点的数据绘制 出PING包 的状态，由各其他点的数据绘制 进PING包 的状态，并API接口获取其他点数据绘制整体PING拓扑图，拓扑图中存在报警功能。</td><td style="text-align:left">856</td></tr><tr><td style="text-align:left"><a href="https://github.com/TalkingData/owl">TalkingData/owl</a></td><td style="text-align:left">OWL是TalkingData公司推出的一款开源分布式监控系统, 演示环境<a href="http://54.223.127.87/">http://54.223.127.87/</a> 登录账号密码demo/demo</td><td style="text-align:left">758</td></tr><tr><td style="text-align:left"><a href="https://github.com/pinggg/pingd">pinggg/pingd</a></td><td style="text-align:left">pingd 是世界上最简单的监控服务，使用 golang 编写。软件支持 IPv6，但是服务器不支持. pingd 允许同时 ping 上千个 IPs，在此期间还可以管理监控的主机。用户提供主机名或者 IP，还有用户邮箱地址，就可以使用 3 个生成 URLs 来开启，停止或者删除你的追踪。每当你的服务器停机或者后台在线都会发送通知，还包含控制 URLs。</td><td style="text-align:left">383</td></tr><tr><td style="text-align:left"><a href="https://github.com/cloudinsight/cloudinsight-agent">cloudinsight/cloudinsight-agent</a></td><td style="text-align:left">提供可视化监控的saas平台cloudinsight开源的一个监控客户端。 Cloudinsight 探针可以收集它所在操作系统的各种指标，然后发送到 Cloudinsight 后端服务</td><td style="text-align:left">357</td></tr><tr><td style="text-align:left"><a href="https://github.com/gravitational/satellite">gravitational/satellite</a></td><td style="text-align:left">用于监测kubernetes健康状态的一个工具／库。 其特点是：轻量级定期测试， 高可用性和弹性网络分区， 无单点故障， 以时间序列的格式存储监控数据。</td><td style="text-align:left">166</td></tr><tr><td style="text-align:left"><a href="https://github.com/kovetskiy/zabbixctl">kovetskiy/zabbixctl</a></td><td style="text-align:left">Zabbixctl 是采用Zabbix服务API的命令行工具，它提供了有效的方式去查询和处理trigger 状态、主机最新数据和用户组。</td><td style="text-align:left">122</td></tr></tbody></table></div><h1 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/docker/docker">docker/docker</a></td><td style="text-align:left">Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架或包装系统。</td><td style="text-align:left">56684</td></tr><tr><td style="text-align:left"><a href="https://github.com/vmware/harbor">vmware/harbor</a></td><td style="text-align:left">容器应用的开发和运行离不开可靠的镜像管理。从安全和效率等方面考虑，部署在私有环境内的Registry是非常必要的。Project Harbor是由VMware公司中国团队为企业用户设计的Registry server开源项目，包括了权限管理(RBAC)、LDAP、审计、管理界面、自我注册、HA等企业必需的功能，同时针对中国用户的特点，设计镜像复制和中文支持等功能</td><td style="text-align:left">11230</td></tr><tr><td style="text-align:left"><a href="https://github.com/coreos/rkt">coreos/rkt</a></td><td style="text-align:left">Rocket （也叫 rkt）是 CoreOS 推出的一款容器引擎，和 Docker 类似，帮助开发者打包应用和依赖包到可移植容器中，简化搭环境等部署工作。Rocket 和 Docker 不同的地方在于，Rocket 没有 Docker 那些为企业用户提供的“友好功能”，比如云服务加速工具、集群系统等。反过来说，Rocket 想做的，是一个更纯粹的业界标准。</td><td style="text-align:left">8914</td></tr><tr><td style="text-align:left"><a href="https://github.com/coreos/clair">coreos/clair</a></td><td style="text-align:left">Clair 是一个容器漏洞分析服务。它提供一个能威胁容器漏洞的列表，并且在有新的容器漏洞发布出来后会发送通知给用户。</td><td style="text-align:left">6426</td></tr><tr><td style="text-align:left"><a href="https://github.com/shipyard/shipyard">shipyard/shipyard</a></td><td style="text-align:left">Shipyard 是一个基于 Web 的 Docker 管理工具，支持多 host，可以把多个 Docker host 上的 containers 统一管理；可以查看 images，甚至 build images；并提供 RESTful API 等等。 Shipyard 要管理和控制 Docker host 的话需要先修改 Docker host 上的默认配置使其支持远程管理。</td><td style="text-align:left">6407</td></tr><tr><td style="text-align:left"><a href="https://github.com/zettio/weave">zettio/weave</a></td><td style="text-align:left">Weave 创建一个虚拟网络并连接到部署在多个主机上的 Docker 容器。</td><td style="text-align:left">5798</td></tr><tr><td style="text-align:left"><a href="https://github.com/weaveworks/scope">weaveworks/scope</a></td><td style="text-align:left">一个docker&amp;kubernetes的管理，监控可视化工具， 可以看到容器间的拓扑关系和tcp通信</td><td style="text-align:left">4206</td></tr><tr><td style="text-align:left"><a href="https://github.com/alibaba/pouch">alibaba/pouch</a></td><td style="text-align:left">Pouch 是 Alibaba 公司开源的容器引擎技术，其主要功能包括基本的容器管理能力，安全稳定的强容器隔离能力，以及对应用无侵入性的富容器技术。</td><td style="text-align:left">4177</td></tr><tr><td style="text-align:left"><a href="https://github.com/docker/swarmkit">docker/swarmkit</a></td><td style="text-align:left">SwarmKit 是Docker公司开源的Docker集群管理和容器编排工具，其主要功能包括节点发现、基于raft算法的一致性和任务调度等。</td><td style="text-align:left">2329</td></tr><tr><td style="text-align:left"><a href="https://github.com/emccode/rexray">emccode/rexray</a></td><td style="text-align:left">REX-Ray 是一个 EMC {code} 团队领导的开源项目，为 Docker、Mesos 及其他容器运行环境提供持续的存储访问。其设计旨在囊括通用存储、虚拟化和云平台，提供高级的存储功能。</td><td style="text-align:left">1743</td></tr><tr><td style="text-align:left"><a href="https://github.com/docker/libnetwork">docker/libnetwork</a></td><td style="text-align:left">Libnetwork 提供一个原生 Go 实现的容器连接，是容器的网络。libnetwork 的目标是定义一个健壮的容器网络模型（Container Network Model），提供一个一致的编程接口和应用程序的网络抽象。</td><td style="text-align:left">1612</td></tr><tr><td style="text-align:left"><a href="https://github.com/cloud66/habitus">cloud66/habitus</a></td><td style="text-align:left">一个快速实现docker build 流程的工具， 支持复杂的docker build流程，实现多个dockerfile的build流程，典型应用如将需要静态编译的程序，如go， java这类程序在一个docker build编译好之后，得到的二进制包用到后续的build流程</td><td style="text-align:left">1090</td></tr><tr><td style="text-align:left"><a href="https://github.com/vishvananda/wormhole">vishvananda/wormhole</a></td><td style="text-align:left">WWormhole 是一个能识别命名空间的由 Socket 激活的隧道代理。可以让你安全的连接在不同物理机器上的 Docker 容器。可以用来完成一些有趣的功能，例如连接运行在容器本机的服务或者在连接后创建按需的服务。</td><td style="text-align:left">370</td></tr></tbody></table></div><h1 id="PaaS工具"><a href="#PaaS工具" class="headerlink" title="PaaS工具"></a>PaaS工具</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/kubernetes/kubernetes">kubernetes/kubernetes</a></td><td style="text-align:left">Kubernetes 是来自 Google 云平台的开源容器集群管理系统。基于 Docker 构建一个容器的调度服务。该系统可以自动在一个容器集群中选择一个工作容器供使用。其核心概念是 Container Pod。</td><td style="text-align:left">64452</td></tr><tr><td style="text-align:left"><a href="https://github.com/rancher/rancher">rancher/rancher</a></td><td style="text-align:left">Rancher2是基于Go编写的k8s管理平台，采用k8s in k8s的方式，极大的简化了k8s部署，并能同时管理多套k8s集群，操作和安全俱佳，是一款非常好的Devops工具</td><td style="text-align:left">13922</td></tr><tr><td style="text-align:left"><a href="https://github.com/tsuru/tsuru">tsuru/tsuru</a></td><td style="text-align:left">在 Tsuru 的 PaaS 服务下，你可以选择自己的编程语言，选择使用 SQL 或者 NoSQL 数据库，memcache、redis、等等许多服务，甚至与你可以使用 Git 版本控制工具来上传你应用。</td><td style="text-align:left">3286</td></tr><tr><td style="text-align:left"><a href="https://github.com/laincloud/lain">laincloud/lain</a></td><td style="text-align:left">Lain 是一个基于 docker 的 PaaS 系统。其面向技术栈多样寻求高效运维方案的高速发展中的组织，devops 人力缺乏的 startup ，个人开发者。统一高效的开发工作流，降低应用运维复杂度；在 IaaS / 私有 IDC 裸机的基础上直接提供应用开发，集成，部署，运维的一揽子解决方案。</td><td style="text-align:left">449</td></tr><tr><td style="text-align:left"><a href="https://github.com/ooyala/atlantis">ooyala/atlantis</a></td><td style="text-align:left">Atlantis 是一款基于 Docker，使用 Go 编写，为 HTTP 应用准备的开源 PaaS。Atlantis 可以在路由请求中轻松的构建和部署应用到容器。Atlantis 在 Ooyala 的新应用中得到了很广泛的应用。</td><td style="text-align:left">385</td></tr><tr><td style="text-align:left"><a href="https://github.com/weibocom/opendcp">weibocom/opendcp</a></td><td style="text-align:left">OpenDCP是一个基于Docker的云资源管理与调度平台，集镜像仓库、多云支持、服务编排、服务发现等功能与一身，支持服务池的扩缩容，其技术体系源于微博用于支持节假日及热点峰值流量的弹性调度DCP系统。OpenDCP允许利用公有云服务器搭建起适应互联网应用的IT基础设施，并且将运维的工作量降到最低。</td><td style="text-align:left">381</td></tr><tr><td style="text-align:left"><a href="https://github.com/mesos/cloudfoundry-mesos">mesos/cloudfoundry-mesos</a></td><td style="text-align:left">Cloud Foundry-Mesos框架由华为与Mesosphere的工程师合作完成，能够为应用提供安全可靠的、可伸缩、可扩展的云端运行环境，并且应用能够 享用Cloud Foundry生态圈内各类丰富的服务资源。企业能够通过Cloud Foundry开发云应用，并通过Cloud Foundry-Mesos将应用部署到DCOS上，使应用能够与DCOS上安装的其他服务及应用框架共享资源，实现资源利用率最大化，能够大幅降低企业 数据中心运营成本。DCOS能够运行在虚拟和物理环境上，能够支持Linux（以及很快支持Windows），并可适用于私有云、公有云及混合云环境。</td><td style="text-align:left">107</td></tr></tbody></table></div><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/istio/istio">istio/istio</a></td><td style="text-align:left">Istio是由Google、IBM和Lyft开源的微服务管理、保护和监控框架。使用istio可以很简单的创建具有负载均衡、服务间认证、监控等功能的服务网络，而不需要对服务的代码进行任何修改。</td><td style="text-align:left">22197</td></tr><tr><td style="text-align:left"><a href="https://github.com/go-kit/kit">go-kit/kit</a></td><td style="text-align:left">Go-kit 是一个 Go 语言的分布式开发包，用于开发微服务。</td><td style="text-align:left">16516</td></tr><tr><td style="text-align:left"><a href="https://github.com/uber/jaeger">uber/jaeger</a></td><td style="text-align:left">Jaeger是Uber的分布式跟踪系统 ，基于google dapper的原理构建， 以Cassandra作为存储层</td><td style="text-align:left">10479</td></tr><tr><td style="text-align:left"><a href="https://github.com/micro/micro">micro/micro</a></td><td style="text-align:left">Micro是一个专注于简化分布式系统开发的微服务生态系统。可插拔的插件化设计，提供强大的可插拔的架构来保证基础组件可以被灵活替换。</td><td style="text-align:left">7764</td></tr><tr><td style="text-align:left"><a href="https://github.com/eBay/fabio">eBay/fabio</a></td><td style="text-align:left">fabio 是 ebay 团队用 golang 开发的一个快速、简单零配置能够让 consul 部署的应用快速支持 http(s) 的负载均衡路由器。这里有一篇中文文章<a href="http://dockone.io/article/1567介绍了如何用fabio＋consul实现服务发现，负载均衡，并阐述了原理，">http://dockone.io/article/1567介绍了如何用fabio＋consul实现服务发现，负载均衡，并阐述了原理，</a> 最后还有demo程序</td><td style="text-align:left">6289</td></tr><tr><td style="text-align:left"><a href="https://github.com/goadesign/goa">goadesign/goa</a></td><td style="text-align:left">Goa 是一款用 Go 用于构建微服务的框架，采用独特的设计优先的方法。</td><td style="text-align:left">3757</td></tr><tr><td style="text-align:left"><a href="https://github.com/NYTimes/gizmo">NYTimes/gizmo</a></td><td style="text-align:left">纽约时报开源的go微服务工具.提供如下特性:标准化配置和日志;可配置策略的状态监测端点;用于管理 pprof 端点和日志级别的配置;结构化日志，提供基本请求信息;端点的有用度量;优雅的停止服务; 定义期待和词汇的基本接口</td><td style="text-align:left">3076</td></tr><tr><td style="text-align:left"><a href="https://github.com/koding/kite">koding/kite</a></td><td style="text-align:left">一个基于go语言的微服务框架, Kite是Koding公司内部的一个框架, 该框架提供服务发现，多种认证功能，服务端通过RPC进行通信，同时还提供了websocket的js库，方便浏览器于服务器间进行通信。</td><td style="text-align:left">2709</td></tr><tr><td style="text-align:left"><a href="https://github.com/afex/hystrix-go">afex/hystrix-go</a></td><td style="text-align:left">用来隔离远程系统调用， 第三方库调用 ，服务调用， 提供熔断机制，避免雪崩效应的库， Hystrix的go 版本。 注Hystrixs是Netflix开源的一个java库</td><td style="text-align:left">2407</td></tr><tr><td style="text-align:left"><a href="https://github.com/fagongzi/gateway">fagongzi/gateway</a></td><td style="text-align:left">Gateway是一个使用go实现的基于HTTP的API 网关。<strong>特性</strong> ：API 聚合 ; 流控; 熔断; 负载均衡; 健康检查; 监控; 消息路由; 后端管理WebUI . <strong>能做什么</strong>：规划更友好的URL给调用者。聚合多个API的结果返回给API调用者，利于移动端，后端可以实现原子接口。保护后端API服务不会被突发异常流量压垮。提供熔断机制，使得后端API Server具备自我恢复能力。借助消息路由能力，实现灰度发布，AB测试。</td><td style="text-align:left">2364</td></tr><tr><td style="text-align:left"><a href="https://github.com/goodrain/rainbond">goodrain/rainbond</a></td><td style="text-align:left">云帮是一款以应用为中心的开源PaaS，深度整合Kubernetes的容器管理和Service Mesh微服务架构最佳实践，满足支撑业务高速发展所需的敏捷开发、高效运维和精益管理需求</td><td style="text-align:left">2195</td></tr><tr><td style="text-align:left"><a href="https://github.com/sourcegraph/appdash">sourcegraph/appdash</a></td><td style="text-align:left">go版本的分布式应用跟踪系统， 基于google dapper的原理构建</td><td style="text-align:left">1622</td></tr><tr><td style="text-align:left"><a href="https://github.com/andot/hprose">andot/hprose</a></td><td style="text-align:left">Hprose 是高性能远程对象服务引擎（High Performance Remote Object Service Engine）的缩写 —— 微服务首选引擎。它是一个先进的轻量级的跨语言跨平台面向对象的高性能远程动态通讯中间件。它不仅简单易用，而且功能强大。你只需要稍许的时间去学习，就能用它轻松构建跨语言跨平台的分布式应用系统了。</td><td style="text-align:left">609</td></tr></tbody></table></div><h1 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/drone/drone">drone/drone</a></td><td style="text-align:left">Drone 是一个基于 Docker 的持续发布平台，使用 Go 语言开发</td><td style="text-align:left">20737</td></tr><tr><td style="text-align:left"><a href="https://github.com/caicloud/cyclone">caicloud/cyclone</a></td><td style="text-align:left">Cyclone 是一个打造容器工作流的云原生持续集成持续发布平台，简单易用，使用 Go 语言开发，有详尽的中文文档</td><td style="text-align:left">877</td></tr></tbody></table></div><h1 id="数据库技术"><a href="#数据库技术" class="headerlink" title="数据库技术"></a>数据库技术</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/pingcap/tidb">pingcap/tidb</a></td><td style="text-align:left">TiDB 是国内 PingCAP 团队开发的一个分布式 SQL 数据库。其灵感来自于 Google 的 F1, TiDB 支持包括传统 RDBMS 和 NoSQL 的特性。</td><td style="text-align:left">22947</td></tr><tr><td style="text-align:left"><a href="https://github.com/influxdata/influxdb">influxdata/influxdb</a></td><td style="text-align:left">一个可以水平扩展的时间序列数据库， 内建http api， 支持对数据打tag，灵活的查询策略和数据的实时查询，支持类sql语句进行查询</td><td style="text-align:left">18525</td></tr><tr><td style="text-align:left"><a href="https://github.com/cockroachdb/cockroach">cockroachdb/cockroach</a></td><td style="text-align:left">CockroachDB (蟑螂数据库）是一个可伸缩的、支持地理位置处理、支持事务处理的数据存储系统。CockroachDB 提供两种不同的的事务特性，包括快照隔离（snapshot isolation，简称SI）和顺序的快照隔离（SSI）语义，后者是默认的隔离级别。</td><td style="text-align:left">17960</td></tr><tr><td style="text-align:left"><a href="https://github.com/google/cayley">google/cayley</a></td><td style="text-align:left">Cayley 是 Google 的一个开源图(Graph)数据库，其灵感来自于 Freebase 和 Google 的 Knowledge Graph 背后的图数据库。</td><td style="text-align:left">13277</td></tr><tr><td style="text-align:left"><a href="https://github.com/dgraph-io/dgraph">dgraph-io/dgraph</a></td><td style="text-align:left">dgraph 是可扩展的，分布式的，低延迟图形数据库。DGraph 的目标是提供 Google 生产水平的规模和吞吐量，在超过TB的结构数据里，未用户提供足够低延迟的实时查询。DGraph 支持 GraphQL 作为查询语言，响应 JSON。</td><td style="text-align:left">12759</td></tr><tr><td style="text-align:left"><a href="https://github.com/wandoulabs/codis">wandoulabs/codis</a></td><td style="text-align:left">Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有明显的区别 (不支持的命令列表), 上层应用可以像使用单机的 Redis 一样使用, Codis 底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的 Redis 服务.</td><td style="text-align:left">10927</td></tr><tr><td style="text-align:left"><a href="https://github.com/youtube/vitess">youtube/vitess</a></td><td style="text-align:left">outube出品的开源分布式MySQL工具集Vitess，自动分片存储MySQL数据表，将单个SQL查询改写为分布式发送到多个MySQL Server上，支持行缓存（比MySQL本身缓存效率高），支持复制容错，已用于Youtube生产环境</td><td style="text-align:left">9720</td></tr><tr><td style="text-align:left"><a href="https://github.com/sosedoff/pgweb">sosedoff/pgweb</a></td><td style="text-align:left">gweb 是一个采用 Go 语言开发的基于 Web 的 PostgreSQL 管理系统。</td><td style="text-align:left">6325</td></tr><tr><td style="text-align:left"><a href="https://github.com/flike/kingshard">flike/kingshard</a></td><td style="text-align:left">一个高性能的mysql中间件， 支持读写分离， 数据分片， 安全审计等功能</td><td style="text-align:left">5070</td></tr><tr><td style="text-align:left"><a href="https://github.com/olivere/elastic">olivere/elastic</a></td><td style="text-align:left">elastic是开源搜索引擎elasticsearch的golang客户端，API友好，支持绝大部分es的接口,支持的es版本全面，从1.x到最新的6.x全覆盖</td><td style="text-align:left">4822</td></tr><tr><td style="text-align:left"><a href="https://github.com/siddontang/ledisdb">siddontang/ledisdb</a></td><td style="text-align:left">ledisdb是一个参考ssdb，采用go实现，底层基于leveldb，类似redis的高性能nosql数据库，提供了kv，list，hash以及zset数据结构的支持。</td><td style="text-align:left">3246</td></tr><tr><td style="text-align:left"><a href="https://github.com/XiaoMi/Gaea">XiaoMi/Gaea</a></td><td style="text-align:left">Gaea是小米商城/系统组研发的基于mysql协议的数据库中间件，目前在小米商城大陆和海外得到广泛使用。</td><td style="text-align:left">1408</td></tr><tr><td style="text-align:left"><a href="https://github.com/outbrain/orchestrator">outbrain/orchestrator</a></td><td style="text-align:left">MySQL 复制拓扑可视化工具</td><td style="text-align:left">787</td></tr><tr><td style="text-align:left"><a href="https://github.com/slicebit/qb">slicebit/qb</a></td><td style="text-align:left">qb是用来让使更容易使用数据库的go语言的数据库工具包。它受Python最喜欢的ORM SQLAlchemy的启发，既是一个ORM，也是一个查询生成器。它在表达api和查询构建东西的情形下是相当模块化的。</td><td style="text-align:left">524</td></tr><tr><td style="text-align:left"><a href="https://github.com/hidu/mysql-schema-sync">hidu/mysql-schema-sync</a></td><td style="text-align:left">mysql-schema-sync 是一款使用go开发的、跨平台的、绿色无依赖的 MySQL 表结构自动同步工具。用于将线上(其他环境)数据库结构变化同步到测试（本地）环境!</td><td style="text-align:left">418</td></tr><tr><td style="text-align:left"><a href="https://github.com/chasex/redis-go-cluster">chasex/redis-go-cluster</a></td><td style="text-align:left">redis-go-cluster 是基于 Redigo 实现的 Golang Redis 客户端。redis-go-cluster 可以在本地缓存 slot 信息，并且当集群修改的时候会自动更新。此客户端管理每个节点连接池，使用 goroutine 来尽可能的并发执行，达到了高效，低延迟。</td><td style="text-align:left">375</td></tr><tr><td style="text-align:left"><a href="https://github.com/mediocregopher/radix">mediocregopher/radix</a></td><td style="text-align:left">radix是redis官方推荐的客户端之一，相比于redigo,radix.v2特点是轻量、接口实现优雅、API友好</td><td style="text-align:left">327</td></tr><tr><td style="text-align:left"><a href="https://github.com/goshawkdb/server">goshawkdb/server</a></td><td style="text-align:left">GoshawkDB 是一个采用 Go 语言开发支持多平台的分布式的对象存储服务，支持事务以及容错。GoshawkDB 的事务控制是在客户端完成的。GoshawkDB 服务器端使用 AGPL 许可，而 Go 语言客户端使用 Apache 许可证</td><td style="text-align:left">204</td></tr><tr><td style="text-align:left"><a href="https://github.com/degdb/degdb">degdb/degdb</a></td><td style="text-align:left">DegDB 是分布式的经济图数据库。</td><td style="text-align:left">201</td></tr></tbody></table></div><h1 id="存储技术"><a href="#存储技术" class="headerlink" title="存储技术"></a>存储技术</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/ipfs/go-ipfs">ipfs/go-ipfs</a></td><td style="text-align:left">IPFS 是分布式文件系统，寻求连接所有计算机设备的相同文件系统。在某些方面，这很类似于原始的 Web 目标，但是 IPFS 最终会更像单个比特流群交换的 git 对象。IPFS ＝ InterPlanetary File System</td><td style="text-align:left">9425</td></tr><tr><td style="text-align:left"><a href="https://github.com/chrislusf/seaweedfs">chrislusf/seaweedfs</a></td><td style="text-align:left">SeaweedFS 是简单，高伸缩性的分布式文件系统，包含两部分：存储数十亿的文件；快速为文件服务。SeaweedFS 作为支持全 POSIX 文件系统语义替代，Seaweed-FS 选择仅实现 key-file 的映射，类似 “NoSQL”，也可以说是 “NoFS”。</td><td style="text-align:left">9348</td></tr><tr><td style="text-align:left"><a href="https://github.com/spf13/afero">spf13/afero</a></td><td style="text-align:left">Afero 是一个文件系统框架，提供一个简单、统一和通用的 API 和任何文件系统进行交互，作为抽象层还提供了界面、类型和方法。Afero 的界面十分简洁，设计简单，舍弃了不必要的构造函数和初始化方法。Afero 作为一个库还提供了一组可交互操作的后台文件系统，这样在与 Afero 协作时，还可以保留 os 和 ioutil 软件包的功能和好处。</td><td style="text-align:left">2631</td></tr><tr><td style="text-align:left"><a href="https://github.com/coreos/torus">coreos/torus</a></td><td style="text-align:left">Torus是一种针对容器集群量身打造的存储系统，可以为通过Kubernetes编排和管理的容器集群提供可靠可扩展的存储。这是继etcd、rkt、flannel，以及CoreOS Linux之后CoreOS发布的另一个开源产品。</td><td style="text-align:left">1800</td></tr><tr><td style="text-align:left"><a href="https://github.com/emccode/rexray">emccode/rexray</a></td><td style="text-align:left">REX-Ray 是一个 EMC {code} 团队领导的开源项目，为 Docker、Mesos 及其他容器运行环境提供持续的存储访问。其设计旨在囊括通用存储、虚拟化和云平台，提供高级的存储功能。</td><td style="text-align:left">1743</td></tr><tr><td style="text-align:left"><a href="https://github.com/Terry-Mao/bfs">Terry-Mao/bfs</a></td><td style="text-align:left">bfs 是使用 Go 编写的分布式文件系统（小文件存储）。</td><td style="text-align:left">1133</td></tr><tr><td style="text-align:left"><a href="https://github.com/gostor/gotgt">gostor/gotgt</a></td><td style="text-align:left">Gotgt 是使用 Go 编写的高性能、可扩展的 iSCSI target 服务。</td><td style="text-align:left">161</td></tr></tbody></table></div><h1 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/chrislusf/seaweedfs">chrislusf/seaweedfs</a></td><td style="text-align:left">SeaweedFS 是简单，高伸缩性的分布式文件系统，包含两部分：存储数十亿的文件；快速为文件服务。SeaweedFS 作为支持全 POSIX 文件系统语义替代，Seaweed-FS 选择仅实现 key-file 的映射，类似 “NoSQL”，也可以说是 “NoFS”。</td><td style="text-align:left">9348</td></tr><tr><td style="text-align:left"><a href="https://github.com/kelseyhightower/confd">kelseyhightower/confd</a></td><td style="text-align:left">Confd是一个轻量级的配置管理工具。通过查询Etcd，结合配置模板引擎，保持本地配置最新，同时具备定期探测机制，配置变更自动reload。</td><td style="text-align:left">6887</td></tr><tr><td style="text-align:left"><a href="https://github.com/hashicorp/nomad">hashicorp/nomad</a></td><td style="text-align:left">Nomad 是一个集群管理器和调度器，专为微服务和批量处理工作流设计。Nomad 是分布式，高可用，可扩展到跨数据中心和区域的数千个节点。</td><td style="text-align:left">5944</td></tr><tr><td style="text-align:left"><a href="https://github.com/chrislusf/glow">chrislusf/glow</a></td><td style="text-align:left">Glow 是使用 Go 编写的易用分布式计算系统，是 Hadoop Map Reduce，Spark，Flint，Samza 等等的替代品。Glow 的目标是提供一个库，可以在并行线程或者分布式集群机器中进行更简单计算。</td><td style="text-align:left">2760</td></tr><tr><td style="text-align:left"><a href="https://github.com/chrislusf/gleam">chrislusf/gleam</a></td><td style="text-align:left">此处是一个通过Go和LuaJIT编写的快速和可扩展的分布式map/reduce系统，很好的将Go的高并发性与Luajit高性能相结合，可独立运行或用于分布式计算。</td><td style="text-align:left">2420</td></tr><tr><td style="text-align:left"><a href="https://github.com/purpleidea/mgmt">purpleidea/mgmt</a></td><td style="text-align:left">mgmt 是一个分布式的，事件驱动的配置管理工具。该工具支持并行执行，其 librarification 作为新的及已存在的软件的基础管理工具。</td><td style="text-align:left">2197</td></tr><tr><td style="text-align:left"><a href="https://github.com/youtube/doorman">youtube/doorman</a></td><td style="text-align:left">Doorman 是一个客户端速率限制的解决方案，客户端与共享资源进行通讯，包括数据库、gRPC 服务、RESTful API 等等可使用 Doorman 来限制对资源的调用。Doorman 使用 Go 语言开发，使用 gRPC 的通讯协议。其高可用特性需要一个分布式的锁管理器，当前支持 etcd，也可使用 Zookeeper 替代。</td><td style="text-align:left">1521</td></tr><tr><td style="text-align:left"><a href="https://github.com/nanopack/yoke">nanopack/yoke</a></td><td style="text-align:left">Yoke 是 Postgres 的高可用集群，具有自动切换和自动集群恢复。Postgres冗余/自动故障转移解决方案，提供一个高可用PostgreSQL集群的简单管理。</td><td style="text-align:left">1372</td></tr><tr><td style="text-align:left"><a href="https://github.com/huichen/zerg">huichen/zerg</a></td><td style="text-align:left">基于docker的分布式爬虫服务</td><td style="text-align:left">464</td></tr><tr><td style="text-align:left"><a href="https://github.com/silenceper/dcmp">silenceper/dcmp</a></td><td style="text-align:left">DCMP是分布式配置管理平台。提供了一个etcd的管理界面，可通过界面修改配置信息，借助confd可实现配置文件的同步。</td><td style="text-align:left">193</td></tr></tbody></table></div><h1 id="消息系统"><a href="#消息系统" class="headerlink" title="消息系统"></a>消息系统</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/bitly/nsq">bitly/nsq</a></td><td style="text-align:left">NSQ 是无中心设计、节点自动注册和发现的开源消息系统。可作为内部通讯框架的基础，易于配置和发布。</td><td style="text-align:left">17388</td></tr><tr><td style="text-align:left"><a href="https://github.com/RichardKnop/machinery">RichardKnop/machinery</a></td><td style="text-align:left">Machinery 是一个 Go 语言的异步任务队列和作业队列，基于分布式消息传递。类似 Python 的 Celery 框架。</td><td style="text-align:left">3902</td></tr><tr><td style="text-align:left"><a href="https://github.com/blackbeans/kiteq">blackbeans/kiteq</a></td><td style="text-align:left">KiteQ 是一个基于 go + protobuff 实现的多种持久化方案的 mq 框架（消息队列）。</td><td style="text-align:left">742</td></tr></tbody></table></div><h1 id="服务器管理"><a href="#服务器管理" class="headerlink" title="服务器管理"></a>服务器管理</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/gravitational/teleport">gravitational/teleport</a></td><td style="text-align:left">teleport 是 初创公司Gravitational 的一款基于ssh和https的远程管理linux 集群服务器的工具， 其特点是支持双重校验登陆；操作记录回放；session共享，便于协作排障；自动发现集群的服务器和容器</td><td style="text-align:left">7928</td></tr><tr><td style="text-align:left"><a href="https://github.com/square/sharkey">square/sharkey</a></td><td style="text-align:left">Sharkey 是OpenSSH管理证书使用的服务。Sharkey 分为客户端组件和服务端组件，服务端负责发布已签署的主机证书，客户端负责在机器上安装主机证书。</td><td style="text-align:left">335</td></tr><tr><td style="text-align:left"><a href="https://github.com/idcos/osinstall">idcos/osinstall</a></td><td style="text-align:left">CloudBoot”(OSinstall)云装机平台，是金融云初创公司杭州云霁科技推出的一款X86服务器全自动装机工具，遵循Apache协议，完全开源免费。全自动构建物理机资源池，像创建虚拟机一样方便的安装物理机。</td><td style="text-align:left">299</td></tr></tbody></table></div><h1 id="安全工具"><a href="#安全工具" class="headerlink" title="安全工具"></a>安全工具</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/inconshreveable/ngrok">inconshreveable/ngrok</a></td><td style="text-align:left">ngrok 是一个反向代理，通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放。</td><td style="text-align:left">18297</td></tr><tr><td style="text-align:left"><a href="https://github.com/yahoo/gryffin">yahoo/gryffin</a></td><td style="text-align:left">Gryffin 是雅虎开发的一个大规模 Web 安全扫描平台。它不是另外一个扫描器，其主要目的是为了解决两个特定的问题 —— 覆盖率和伸缩性。</td><td style="text-align:left">2003</td></tr><tr><td style="text-align:left"><a href="https://github.com/xiam/hyperfox">xiam/hyperfox</a></td><td style="text-align:left">Hyperfox 是一个安全的工具用来代理和记录局域网中的 HTTP 和 HTTPS 通讯。</td><td style="text-align:left">1310</td></tr><tr><td style="text-align:left"><a href="https://github.com/sheepbao/gomitmproxy">sheepbao/gomitmproxy</a></td><td style="text-align:left">GomitmProxy是想用golang语言实现的mitmproxy，主要实现http代理，目前实现了http代理和https抓包功能。</td><td style="text-align:left">277</td></tr></tbody></table></div><h1 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a>网络工具</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/containous/traefik">containous/traefik</a></td><td style="text-align:left">Træfɪk 是一个新型的http反向代理、负载均衡软件，能轻易的部署微服务. 它支持多种后端 (Docker, Swarm, Mesos/Marathon, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) ,可以对配置进行自动化、动态的管理.</td><td style="text-align:left">28027</td></tr><tr><td style="text-align:left"><a href="https://github.com/buger/gor">buger/gor</a></td><td style="text-align:left">Gor 是用 Go 编写的简单 HTTP 流量复制工具，主要是为了从生产服务器返回流量到开发环境。使用 Gor 可以在实际的用户会话中测试代码。</td><td style="text-align:left">12436</td></tr><tr><td style="text-align:left"><a href="https://github.com/cyfdecyf/cow">cyfdecyf/cow</a></td><td style="text-align:left">COW 是一个简化穿墙的 HTTP 代理服务器。它能自动检测被墙网站，仅对这些网站使用二级代理；支持多种协议：sock5、http、shadow、cow</td><td style="text-align:left">8036</td></tr><tr><td style="text-align:left"><a href="https://github.com/google/seesaw">google/seesaw</a></td><td style="text-align:left">Seesaw 是 Google 开源的一个基于 Linux 的负载均衡系统。Seesaw 包含基本的负载均衡特性，同时支持一些高级的功能，诸如：anycast, Direct Server Return (DSR), 支持多个 VLANs 和集中式配置。同时其设计的宗旨是易于维护。需要注意的是，尽管该项目挂靠在 Google 名下，但并非 Google 官方产品。</td><td style="text-align:left">4978</td></tr><tr><td style="text-align:left"><a href="https://github.com/mehrdadrad/mylg">mehrdadrad/mylg</a></td><td style="text-align:left">myLG是一个开源的网络工具集，它包含了很多不同类型的网络诊断工具, 功能包括ping，trace， bgp， dns lookup， 端口扫描， 局域网网络发现，提供web界面, tcpdump等</td><td style="text-align:left">2293</td></tr><tr><td style="text-align:left"><a href="https://github.com/uber/tchannel">uber/tchannel</a></td><td style="text-align:left">TChannel 是用于 RPC 的网络复用和成帧协议。</td><td style="text-align:left">1090</td></tr><tr><td style="text-align:left"><a href="https://github.com/GameXG/TcpRoute2">GameXG/TcpRoute2</a></td><td style="text-align:left">TcpRoute, TCP 层的路由器。对于 TCP 连接自动从多个线路(允许任意嵌套)、多个域名解析结果中选择最优线路。TcpRoute2 是 golang 重写的版本。通过 socks5 代理协议对外提供服务。代理功能拆分成了独立的库，详细代理url格式级选项请参见 ProxyClient，目前支持直连、socks4、socks4a、socks5、http、https、ss 代理线路</td><td style="text-align:left">722</td></tr><tr><td style="text-align:left"><a href="https://github.com/jpillora/go-tcp-proxy">jpillora/go-tcp-proxy</a></td><td style="text-align:left">go-tcp-proxy是一个简单的tcp代理， 可以用于tcp端口转发， 也可以用做http代理使用</td><td style="text-align:left">379</td></tr></tbody></table></div><h1 id="Web工具"><a href="#Web工具" class="headerlink" title="Web工具"></a>Web工具</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/yudai/gotty">yudai/gotty</a></td><td style="text-align:left">GoTTY 是个简单的命令行工具，可以把 CLI 工具共享成 Web 应用。GoTTY 可以把终端作为 Web 应用共享。</td><td style="text-align:left">13682</td></tr><tr><td style="text-align:left"><a href="https://github.com/valyala/fasthttp">valyala/fasthttp</a></td><td style="text-align:left">fasthttp 是 Go 的快速 HTTP 实现，当前在 1M 并发的生产环境使用非常成功，可以从单个服务器进行 100K qps 的持续连接。HTTP 服务器性能与 net/http 比较，fasthttp 比 net/http 快 10 倍</td><td style="text-align:left">11804</td></tr><tr><td style="text-align:left"><a href="https://github.com/gizak/termui">gizak/termui</a></td><td style="text-align:left">Go语言编写的终端仪表盘</td><td style="text-align:left">9661</td></tr><tr><td style="text-align:left"><a href="https://github.com/henrylee2cn/pholcus">henrylee2cn/pholcus</a></td><td style="text-align:left">Pholcus（幽灵蛛）是一款纯Go语言编写的高并发、分布式、重量级爬虫软件，支持单机、服务端、客户端三种运行模式，拥有Web、GUI、命令行三种操作界面；规则简单灵活、批量任务并发、输出方式丰富（mysql/mongodb/csv/excel等）、有大量Demo共享；同时她还支持横纵向两种抓取模式，支持模拟登录和任务暂停、取消等一系列高级功能。</td><td style="text-align:left">6297</td></tr><tr><td style="text-align:left"><a href="https://github.com/lonelycode/tyk">lonelycode/tyk</a></td><td style="text-align:left">Tyk 是一个开源的、轻量级的、快速可伸缩的 API 网关，支持配额和速度限制，支持认证和数据分析，支持多用户多组织，提供全 RESTful API。</td><td style="text-align:left">5328</td></tr><tr><td style="text-align:left"><a href="https://github.com/etsy/hound">etsy/hound</a></td><td style="text-align:left">快如闪电的代码搜索开源工具</td><td style="text-align:left">4345</td></tr><tr><td style="text-align:left"><a href="https://github.com/Terry-Mao/goim">Terry-Mao/goim</a></td><td style="text-align:left">goim 是一个支持集群的im及实时推送服务（支持websocket，http和tcp协议）</td><td style="text-align:left">4009</td></tr><tr><td style="text-align:left"><a href="https://github.com/huichen/wukong">huichen/wukong</a></td><td style="text-align:left">WuKong 是一个全文搜索引擎。功能特性有：高效索引和搜索（1M条微博500M数据28秒索引完，1.65毫秒搜索响应时间，19K搜索QPS）；支持中文分词（使用sego分词包并发分词，速度27MB/秒）；支持计算关键词在文本中的紧邻距离（token proximity）；支持计算BM25相关度；支持自定义评分字段和评分规则；支持在线添加、删除索引；支持持久存储；可实现分布式索引和搜索等</td><td style="text-align:left">3553</td></tr><tr><td style="text-align:left"><a href="https://github.com/afex/hystrix-go">afex/hystrix-go</a></td><td style="text-align:left">用来隔离远程系统调用， 第三方库调用 ，服务调用， 提供熔断机制，避免雪崩效应的库， Hystrix的go 版本。 注Hystrixs是Netflix开源的一个java库</td><td style="text-align:left">2407</td></tr><tr><td style="text-align:left"><a href="https://github.com/tus/tusd">tus/tusd</a></td><td style="text-align:left">实现文件上传的断点续传功能， 整套功能包含了协议实现，client， server。 client及server有多种语言的实现包括go， python， node等</td><td style="text-align:left">1556</td></tr><tr><td style="text-align:left"><a href="https://github.com/codetainerapp/codetainer">codetainerapp/codetainer</a></td><td style="text-align:left">Codetainer 可以让你创建基于浏览器上的代码运行沙箱，可方便的嵌入到你的 Web 应用中。你可以把它当成是 codepicnic.com 的开源克隆) .</td><td style="text-align:left">975</td></tr><tr><td style="text-align:left"><a href="https://github.com/ga0/netgraph">ga0/netgraph</a></td><td style="text-align:left">netgraph 是一个 Go 语言编写的跨平台的 B/S 架构的 HTTP 抓包工具，方便在 Linux 服务器上直接查看 HTTP 包。</td><td style="text-align:left">809</td></tr><tr><td style="text-align:left"><a href="https://github.com/andyxning/shortme">andyxning/shortme</a></td><td style="text-align:left">用Golang编写的URL短链接服务。</td><td style="text-align:left">244</td></tr><tr><td style="text-align:left"><a href="https://github.com/hidu/pproxy">hidu/pproxy</a></td><td style="text-align:left">http抓包代理程序,http协议调试工具</td><td style="text-align:left">237</td></tr></tbody></table></div><h1 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/gin-gonic/gin">gin-gonic/gin</a></td><td style="text-align:left">Gin 是一个用 Go 语言开发的 Web 框架，提供类 Martini 的 API，但是性能更好。因为有了 httprouter 性能提升了 40 倍之多。</td><td style="text-align:left">36433</td></tr><tr><td style="text-align:left"><a href="https://github.com/astaxie/beego">astaxie/beego</a></td><td style="text-align:left">beego是一个用Go开发的应用框架，思路来自于tornado，路由设计来源于sinatra，</td><td style="text-align:left">23525</td></tr><tr><td style="text-align:left"><a href="https://github.com/kataras/iris">kataras/iris</a></td><td style="text-align:left">通过Iris-Go，可以方便的帮助你来开发基于web的应用。简单来说：Iris-Go与国内大牛的BeeGo类似，但从其官方介绍的资料来看，Iris-Go的性能更优！</td><td style="text-align:left">17776</td></tr><tr><td style="text-align:left"><a href="https://github.com/labstack/echo">labstack/echo</a></td><td style="text-align:left">Echo 是个快速的 HTTP 路由器（零动态内存分配），也是 Go 的微型 Web 框架。</td><td style="text-align:left">16793</td></tr><tr><td style="text-align:left"><a href="https://github.com/codegangsta/martini">codegangsta/martini</a></td><td style="text-align:left">Martini 是一个非常新的 Go 语言的 Web 框架，使用 Go 的 net/http 接口开发，类似 Sinatra 或者 Flask 之类的框架，你可使用自己的 DB 层、会话管理和模板。</td><td style="text-align:left">10888</td></tr><tr><td style="text-align:left"><a href="https://github.com/hoisie/web">hoisie/web</a></td><td style="text-align:left">web.go 跟 web.py 类似，但使用的是 Go 编程语言实现的 Web 应用开发框架。Go发布没多久该框架就诞生了，差不多是最早的Go框架。目前已经有段时间没有更新了。不过，该框架代码不多，其源码可以读一读。</td><td style="text-align:left">3440</td></tr><tr><td style="text-align:left"><a href="https://github.com/go-macaron/macaron">go-macaron/macaron</a></td><td style="text-align:left">Macaron 是一个具有高生产力和模块化设计的 Go Web 框架。框架秉承了 Martini 的基本思想，并在此基础上做出高级扩展。</td><td style="text-align:left">2952</td></tr><tr><td style="text-align:left"><a href="https://github.com/gernest/utron">gernest/utron</a></td><td style="text-align:left">utron 是一个 Go 语言轻量级的 MVC 框架，用于快速构建可伸缩以及可靠的数据库驱动的 Web 应用。</td><td style="text-align:left">2159</td></tr><tr><td style="text-align:left"><a href="https://github.com/olahol/melody">olahol/melody</a></td><td style="text-align:left">Melody 是一个 Go 语言的微型 WebSocket 框架，基于 github.com/gorilla/websocket 开发，</td><td style="text-align:left">1771</td></tr><tr><td style="text-align:left"><a href="https://github.com/henrylee2cn/faygo">henrylee2cn/faygo</a></td><td style="text-align:left">Faygo 是一款快速、简洁的Go Web框架，可用极少的代码开发出高性能的Web应用程序（尤其是API接口）。只需定义 struct Handler，Faygo 就能自动绑定、验证请求参数并生成在线API文档。</td><td style="text-align:left">1503</td></tr><tr><td style="text-align:left"><a href="https://github.com/lunny/tango">lunny/tango</a></td><td style="text-align:left">Tango，微内核可扩展的Go语言Web框架。同时支持函数和结构体作为执行体，插件丰富。</td><td style="text-align:left">835</td></tr><tr><td style="text-align:left"><a href="https://github.com/robfig/revel">robfig/revel</a></td><td style="text-align:left">Revel 是 Go 语言的框架，其思路完全来自 Java 的 Play Framework。</td><td style="text-align:left">159</td></tr><tr><td style="text-align:left"><a href="https://github.com/go-baa/baa">go-baa/baa</a></td><td style="text-align:left">Baa 一个简单高效的Go web开发框架。主要有路由、中间件，依赖注入和HTTP上下文构成。</td><td style="text-align:left">141</td></tr></tbody></table></div><h1 id="区块链技术"><a href="#区块链技术" class="headerlink" title="区块链技术"></a>区块链技术</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/ethereum/go-ethereum">ethereum/go-ethereum</a></td><td style="text-align:left">go-ethereum客户端通常被称为geth，它是个命令行界面，执行在Go上实现的完整以太坊节点。通过安装和运行geth，可以参与到以太坊前台实时网络并进行以下操作：a. 挖掘真的以太币 b. 在不同地址间转移资金 c .创建合约，发送交易 d . 探索区块历史 e.很多其他功能</td><td style="text-align:left">25587</td></tr><tr><td style="text-align:left"><a href="https://github.com/hyperledger/fabric">hyperledger/fabric</a></td><td style="text-align:left">Fabric是一个开源区块链实现，开发环境建立在VirtualBox虚拟机上，部署环境可以自建网络，也可以直接部署在BlueMix上，部署方式可传统可docker化，共识达成算法插件化，支持用Go和JavaScript开发智能合约，尤以企业级的安全机制和membership机制为特色。你要是不知道这些术语什么意思，就记住一点，Fabric之于区块链，很可能正如Hadoop之于大数据。</td><td style="text-align:left">9967</td></tr><tr><td style="text-align:left"><a href="https://github.com/chain/chain">chain/chain</a></td><td style="text-align:left"><strong>金融领域的区块链项目 </strong>. Chain是由一家刚成立两年的美国创业公司Chain推出，是一个企业级的区块链平台架构，可以让机构构造从零开始更好的金融服务。Chain 开放标准在以下方面实现突破：• 全新的共识模型在不到一秒的时间里实现交易的最终完成，即便是交易量非常大也能支持;• 私密解决方案对区块链数据进行加密，并让相关对手方和监管者进行有选择的读取;• 智能合约框架和虚拟机支持简单的规则执行，以及进行键值存储的图灵完整程序; • 可伸缩的数据模型可以为网络参与者降低运行负荷; • 丰富的元数据层可支持满足KYC（了解你的客户）和 AML（反洗钱）要求</td><td style="text-align:left">1671</td></tr></tbody></table></div><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><div class="table-container"><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:left">简介</th><th style="text-align:left">Star数</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/gohugoio/hugo">gohugoio/hugo</a></td><td style="text-align:left">Hugo是由Go语言实现的静态网站生成器；简单、易用、高效、易扩展、快速部署；相比于Hexo、Jekyll，hugo的优势是生成速度极快。</td><td style="text-align:left">42615</td></tr><tr><td style="text-align:left"><a href="https://github.com/mattermost/platform">mattermost/platform</a></td><td style="text-align:left">mattermost 是一个 Slack 的开源替代品。Mattermost 采用 Go 语言开发，这是一个开源的团队通讯服务。为团队带来跨 PC 和移动设备的消息、文件分享，提供归档和搜索功能。</td><td style="text-align:left">17854</td></tr><tr><td style="text-align:left"><a href="https://github.com/grpc/grpc-go">grpc/grpc-go</a></td><td style="text-align:left">GRPC 是一个高性能、开源和通用的 RPC 框架，面向移动和 HTTP/2 设计。目前提供 C、Java 和 Go 语言版本，分别是：grpc, grpc-java, grpc-go. 其中 C 版本支持 C, C++, Node.js, Python, Ruby, Objective-C, PHP 和 C# 支持.GRPC 基于 HTTP/2 标准设计，带来诸如双向流、流控、头部压缩、单 TCP 连接上的多复用请求等特。这些特性使得其在移动设备上表现更好，更省电和节省空间占用。</td><td style="text-align:left">10893</td></tr><tr><td style="text-align:left"><a href="https://github.com/Netflix/chaosmonkey">Netflix/chaosmonkey</a></td><td style="text-align:left">Chaos Monkey是netflix公司开源的一个用于服务可用性测试的工具，通过有计划的在生产系统制造真实的故障（如cpu负载高， 内存溢出，磁盘写满，服务器宕机等）来检测系统的可用性。</td><td style="text-align:left">8257</td></tr><tr><td style="text-align:left"><a href="https://github.com/apex/apex">apex/apex</a></td><td style="text-align:left">管理，部署aws lambda函数的工具， 支持用go语言编写lambda函数（注：目前aws官方不支持用go语言编写lambda函数，但是apex却可以变相支持）</td><td style="text-align:left">8004</td></tr><tr><td style="text-align:left"><a href="https://github.com/rakyll/hey">rakyll/hey</a></td><td style="text-align:left">Boom 是 google 一女工程师使用 Go 语言开发的类似 apache ab 的性能测试工具。相比 ab，boom跨平台性更好，而且更容易安装。</td><td style="text-align:left">7859</td></tr><tr><td style="text-align:left"><a href="https://github.com/visualfc/liteide">visualfc/liteide</a></td><td style="text-align:left">LiteIDE是一款开源、跨平台的轻量级Go语言集成开发环境（IDE）。</td><td style="text-align:left">5925</td></tr><tr><td style="text-align:left"><a href="https://github.com/yinghuocho/firefly-proxy">yinghuocho/firefly-proxy</a></td><td style="text-align:left">穿墙工具。 GFW梯子。 提供客户端和服务端。支持多个平台， 包括linux， macos， windows ，android</td><td style="text-align:left">4964</td></tr><tr><td style="text-align:left"><a href="https://github.com/qor/qor">qor/qor</a></td><td style="text-align:left">Qor 是基于 Golang 开发的的CMS 一系列工具库，基于 Qor可以快速搭建网站的后台管理系统。Qor 的工作库包含：1，后台管理：可以对数据库进去 CURD 管理，支持一对一，一对多，多对多关联关系维护等等； 2，支持上传图片到云以及 filesystem，resize、crop 图片等等 ；3，Publish 发布系统，可以修改数据，并且经过检查后，再发布到正式环境中； 4，状态机，可以用于开发工作流的系统； 5，I18n，翻译，可以通过在 WEB 界面翻译，并将翻译保存到数据库中； 6，L10n，本地化，不同于翻译，他可以针对某个地区来对内容，或者数据结构进行本地化。7，Roles，权限管理； 8，Exchange，通过 Excel，CSV 导入导出数据； 9，Worker，后台任务管理，可用于跑定时任务等等</td><td style="text-align:left">4325</td></tr><tr><td style="text-align:left"><a href="https://github.com/golang/mobile">golang/mobile</a></td><td style="text-align:left">Gomobile是一个应用于iOS和Android的优秀跨平台开发库，为开发者提供用于创建Android和iOS 移动平台代码的工具。</td><td style="text-align:left">4074</td></tr><tr><td style="text-align:left"><a href="https://github.com/getlantern/lantern">getlantern/lantern</a></td><td style="text-align:left">Lantern是一个点对点科学上网软件。</td><td style="text-align:left">2469</td></tr><tr><td style="text-align:left"><a href="https://github.com/vzex/dog-tunnel">vzex/dog-tunnel</a></td><td style="text-align:left">狗洞是一个高速的 P2P 端口映射工具，同时支持Socks5代理。 0.5版后开始开源，UDP底层基于开源库KCP重写，效率大大提高，在恶劣环境下优势明显。 同时提供非P2P版本（Lite版本），两端连接过程完全不依赖中间服务器，支持加密和登陆认证，自动重连，但是需要人为确保两端能正常连通（否则请使用默认的P2P版本）</td><td style="text-align:left">1782</td></tr><tr><td style="text-align:left"><a href="https://github.com/prasmussen/glot">prasmussen/glot</a></td><td style="text-align:left">glot 是可以可以在线运行各种编程语言代码片段的平台，项目采用 Haskell Script 、Go、Erlang 和 Shell 开发，运行环境基于 Docker 容器进行。</td><td style="text-align:left">1268</td></tr><tr><td style="text-align:left"><a href="https://github.com/yanyiwu/gojieba">yanyiwu/gojieba</a></td><td style="text-align:left">“结巴”中文分词的Golang语言版本。</td><td style="text-align:left">1014</td></tr><tr><td style="text-align:left"><a href="https://github.com/mikespook/gorbac">mikespook/gorbac</a></td><td style="text-align:left">goRBAC 为 Go 语言应用提供了轻量级的基于角色的访问控制。</td><td style="text-align:left">998</td></tr><tr><td style="text-align:left"><a href="https://github.com/mailslurper/mailslurper">mailslurper/mailslurper</a></td><td style="text-align:left">MailSlurper 是一个便携的 SMTP 邮件服务器，对本地和团队应用开发来说非常有用。MailSlurper 体积小运行快速，支持 SQLite, MSSQL 和 MySQL. 数据库。</td><td style="text-align:left">691</td></tr><tr><td style="text-align:left"><a href="https://github.com/xjdrew/kone">xjdrew/kone</a></td><td style="text-align:left">可用于家庭或者企业网络的透明代理，可用来翻墙等</td><td style="text-align:left">621</td></tr><tr><td style="text-align:left"><a href="https://github.com/codeskyblue/gosuv">codeskyblue/gosuv</a></td><td style="text-align:left">进程管理， 类似于python的supervisord ， 提供了web管理界面</td><td style="text-align:left">591</td></tr><tr><td style="text-align:left"><a href="https://github.com/oikomi/FishChatServer2">oikomi/FishChatServer2</a></td><td style="text-align:left">FishChat（鱼传——鱼传尺素）分布式可伸缩 IM 服务器，是一款纯 golang 编写优秀的即时通讯软件(IM), 它集合了市面上已有产品的优点, 并具备 智能硬件网关管理(学习QQ物联思想, 构思中)。</td><td style="text-align:left">466</td></tr><tr><td style="text-align:left"><a href="https://github.com/rafael-santiago/cherry">rafael-santiago/cherry</a></td><td style="text-align:left">Cherry 是一个使用 Go 语言开发的 Web 聊天引擎。</td><td style="text-align:left">215</td></tr><tr><td style="text-align:left"><a href="https://github.com/robustirc/robustirc">robustirc/robustirc</a></td><td style="text-align:left">RobustIRC 是不会有网络中断情况的 IRC。RobustIRC 主要特性：服务器不可用的时候不会有网络中断； 可以使用标准 IRC 客户端； 健壮，可以很好处理客户端和网络的连接问题</td><td style="text-align:left">126</td></tr></tbody></table></div><p>了解更多有关<a href="https://www.duoke360.com/tutorial/go">go教程</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows11/10 Docker-kubernetes使用全过程</title>
      <link href="/2021/10/15/Windows11-10-Docker-kubernetes%E4%BD%BF%E7%94%A8%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2021/10/15/Windows11-10-Docker-kubernetes%E4%BD%BF%E7%94%A8%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows11-10-Docker-kubernetes使用全过程及各种问题解决"><a href="#Windows11-10-Docker-kubernetes使用全过程及各种问题解决" class="headerlink" title="Windows11/10 Docker-kubernetes使用全过程及各种问题解决"></a>Windows11/10 Docker-kubernetes使用全过程及各种问题解决</h1><h2 id="一、安装docker-kubernetes"><a href="#一、安装docker-kubernetes" class="headerlink" title="一、安装docker-kubernetes"></a>一、安装docker-kubernetes</h2><p>安装好docker for windows  <a href="https://desktop.docker.com/win/stable/amd64/Docker Desktop Installer.exe">Download for Windows</a>后，点开docker的setting 中有一个kubernetes如下，选中其中的<code>Enable Kubernetes</code>  ，然后点击右下角的<code>Apply &amp; Restart</code> ，会自动下载所需的所有组件。</p><p>但是会出现一直starting的问题，重启也没用，重新安装也没用。应该是镜像源的问题。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211014195845159.png" alt="starting问题"></p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>在<a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop/tree/v1.21.5网址选中自己的kubernetes">https://github.com/AliyunContainerService/k8s-for-docker-desktop/tree/v1.21.5网址选中自己的kubernetes</a> 版本， 见上图docker界面中Kubernetes的下面有标注版本号 ， 我的是v1.21.5 ，下载下来，解压到自定义的地址备用。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211014205850934.png" alt="下载" style="zoom:67%;" /></p><h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h4><p>修改镜像源：将配置里的镜像地址，添加国内地址，这里添加中科大和docker中国镜像地址 “<a href="https://docker.mirrors.ustc.edu.cn">https://docker.mirrors.ustc.edu.cn</a>“, “<a href="https://registry.docker-cn.com&quot;，设置完成之后，点击“Apply&amp;Restart”">https://registry.docker-cn.com&quot;，设置完成之后，点击“Apply&amp;Restart”</a></p><p>也可以配置自己的阿里镜像加速器，登录容器Hub服务 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fcr.console.aliyun.com">https://cr.console.aliyun.com</a>的控制台，使用你的支付宝帐号，第一次登录时，需要设置一个独立的密码，左侧的加速器帮助页面就会显示为你独立分配的加速地址。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211014210752608.png" alt="自己的阿里镜像加速器"></p><p>我在这里都添加进去了，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211014210919606.png" alt="配置镜像源"></p><h4 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h4><p>“windows键”+”x”  ，以管理员身份打开本地PowerShell ，然后输入“Set-ExecutionPolicy RemoteSigned” 解除需要数字签名的限制。</p><h4 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h4><p>将PowerShell，切换到之前下载的脚本目录，运行“load_images.ps1”：</p><pre class="language-none"><code class="language-none">.\load_images.ps1</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211014195821599.png" alt="镜像下载过程"></p><h4 id="第五步："><a href="#第五步：" class="headerlink" title="第五步："></a>第五步：</h4><p>在下载完成之后就看到左下角的Kubernetes显示绿色啦。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211014195944322.png" alt="image-20211014195944322"></p><h4 id="第六步：（可以省略，直接第七步minikube用exe-文件安装就行了）"><a href="#第六步：（可以省略，直接第七步minikube用exe-文件安装就行了）" class="headerlink" title="第六步：（可以省略，直接第七步minikube用exe 文件安装就行了）"></a>第六步：（可以省略，直接第七步minikube用exe 文件安装就行了）</h4><p>在windows 进行chocolatey 安装，Chocolatey是windows下的软件包管理工具，使用chocolatey可以快速的安装软件。</p><p>使用管理员权限模式打开Powdershell，粘贴下方安装代码，稍等片刻即可安装成功。</p><pre class="language-none"><code class="language-none">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol &#x3D; [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;chocolatey.org&#x2F;install.ps1&#39;))</code></pre><h4 id="第七步："><a href="#第七步：" class="headerlink" title="第七步："></a>第七步：</h4><p>利用chocolatey 安装minikube，一行代码：(以管理员运行)</p><pre class="language-none"><code class="language-none">choco install minikube</code></pre><p>开启minikube，否则会报错。minikube开启方法为，以管理员身份运行PowerShell，输入：</p><pre class="language-none"><code class="language-none">minikube start</code></pre><h4 id="第八步："><a href="#第八步：" class="headerlink" title="第八步："></a>第八步：</h4><p>打开minikube的Dashboard，可以在PowerShell里输入命令：</p><pre class="language-none"><code class="language-none">minikube dashboard</code></pre><p>然后自动开启minikube的仪表盘，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211014213501958.png" alt="仪表盘"></p>]]></content>
      
      
      <categories>
          
          <category> 云原生-分布式-微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置Redis在Windows11/10的实验环境</title>
      <link href="/2021/10/14/%E9%85%8D%E7%BD%AERedis%E5%9C%A8Windows11-10%E7%9A%84%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/10/14/%E9%85%8D%E7%BD%AERedis%E5%9C%A8Windows11-10%E7%9A%84%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="配置Redis在Windows11-10的实验环境（利用redis-py和anaconda3）"><a href="#配置Redis在Windows11-10的实验环境（利用redis-py和anaconda3）" class="headerlink" title="配置Redis在Windows11/10的实验环境（利用redis-py和anaconda3）"></a>配置Redis在Windows11/10的实验环境（利用redis-py和anaconda3）</h1><h2 id="第一步：首先安装anaconda3"><a href="#第一步：首先安装anaconda3" class="headerlink" title="第一步：首先安装anaconda3"></a>第一步：首先安装anaconda3</h2><p>官网地址：<a href="https://www.anaconda.com/products/individual">https://www.anaconda.com/products/individual</a></p><p>下载anaconda3 的Windows版本.exe文件，目前（2021.10.15）的对应python版本是python3.8。</p><p>下载完成之后进行安装，简单的下一步下一步等等。</p><p>（为了方便可以更改安装文件夹到D:/anaconda3)</p><h2 id="第二步：配置anaconda3环境变量"><a href="#第二步：配置anaconda3环境变量" class="headerlink" title="第二步：配置anaconda3环境变量"></a>第二步：配置anaconda3环境变量</h2><pre class="language-none"><code class="language-none">D:\Anaconda3\D:\Anaconda3\Scripts\D:\Anaconda3\Library\bin</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015103940063.png" alt="配置环境变量"></p><p>添加环境变量完成之后在cmd命令行进行验证：</p><p>分别键入：</p><pre class="language-none"><code class="language-none">conda --versionanaconda --version</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015104419564.png" alt="验证环境变量"></p><p>出现相关版本信息即为配置成功。</p><h2 id="第三步：Windows下安装Redis"><a href="#第三步：Windows下安装Redis" class="headerlink" title="第三步：Windows下安装Redis"></a>第三步：Windows下安装Redis</h2><p><strong>安装过程参考Redis菜鸟教程：<a href="https://www.runoob.com/redis/redis-install.html">https://www.runoob.com/redis/redis-install.html</a></strong></p><p><strong>下载地址：</strong><a href="https://github.com/tporadowski/redis/releases。">https://github.com/tporadowski/redis/releases。</a></p><p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 <strong>Redis-x64-xxx.zip</strong>压缩包到 C 盘，解压后，将文件夹重新命名为 <strong>redis</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/3B8D633F-14CE-42E3-B174-FCCD48B11FF3.jpg" alt="下载"></p><p>打开文件夹，内容如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/11/C2CEBAA0-30B9-4340-8D23-78F6FEB8CBE2.png&quot;" alt="img"></p><p>打开一个 <strong>cmd</strong> 窗口 使用 cd 命令切换目录到 <strong>C:\redis</strong> 运行：</p><pre class="language-none"><code class="language-none">redis-server.exe redis.windows.conf</code></pre><p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/redis-install1.png" alt="Redis 安装"></p><p>这时候另启一个 cmd 窗口，原来的不要关闭，不然就无法访问服务端了。</p><p>切换到 redis 目录下运行:</p><pre class="language-none"><code class="language-none">redis-cli.exe -h 127.0.0.1 -p 6379</code></pre><p>设置键值对:</p><pre class="language-none"><code class="language-none">set myKey abc</code></pre><p>取出键值对:</p><pre class="language-none"><code class="language-none">get myKey</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/redis-install2.jpg" alt="Redis 安装"></p><h2 id="第四步：配置Anaconda3的Redis环境"><a href="#第四步：配置Anaconda3的Redis环境" class="headerlink" title="第四步：配置Anaconda3的Redis环境"></a>第四步：配置Anaconda3的Redis环境</h2><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015105654954.png" alt="创建实验环境"></p><p>在菜单里面打开新下载好的Anaconda图像操作界面<strong>Anaconda Navigator</strong>。</p><p>新建环境，命名为redis ，创建。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015110056928.png" alt="打开redis环境"></p><p><strong>环境安装redis模块</strong> ，输入<code>pip install redis</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015110329793.png" alt="安装redis"></p><h2 id="第五步：安装redis的python接口redis-py"><a href="#第五步：安装redis的python接口redis-py" class="headerlink" title="第五步：安装redis的python接口redis-py"></a>第五步：安装redis的python接口redis-py</h2><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;andymccurdy&#x2F;redis-pycd redis-py&#x2F;python setup.py install</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015110726458.png" alt="安装redis-py"></p><p>然后再安装打包模块：</p><pre class="language-none"><code class="language-none">pip install packaging</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015110921129.png" alt="packaging"></p><h2 id="第六步：验证"><a href="#第六步：验证" class="headerlink" title="第六步：验证"></a>第六步：验证</h2><p>输入<code>python</code></p><p>再输入<code>from redis import Redis</code></p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015111117464.png" alt="验证"></p><p>若没有返回错误则基本配置完成，</p><p>如果返回错误，缺少哪个模块我们就下载哪个模块就好了，如同第五步<code>pip install packaging</code>一样。</p><h2 id="第七步：redis-py连接redis"><a href="#第七步：redis-py连接redis" class="headerlink" title="第七步：redis-py连接redis"></a>第七步：redis-py连接redis</h2><ol><li>打开两个命令行，分别输入：</li></ol><pre class="language-none"><code class="language-none">redis-server</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015112226946.png" alt="redis-server"></p><p>和</p><pre class="language-none"><code class="language-none">redis-cli</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015112216998.png" alt="redis-cli"></p><ol><li>新建一个python文件，例如check.py</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> redis <span class="token keyword">import</span> Redisclient <span class="token operator">=</span> Redis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#  ping()方法为正确时返回true</span><span class="token keyword">if</span> client<span class="token punctuation">.</span>ping<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"connecting"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"disconnecting"</span><span class="token punctuation">)</span></code></pre><p>运行该python文件（记得用我们刚刚配好的python环境），输入</p><pre class="language-none"><code class="language-none">python check.py</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211015112824123.png" alt="返回成功"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库andNosql数据库andLinux运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang源码编译学习环境</title>
      <link href="/2021/10/13/Golang%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/10/13/Golang%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="不影响本地Go配置环境的情况下进行Golang源码编译学习"><a href="#不影响本地Go配置环境的情况下进行Golang源码编译学习" class="headerlink" title="不影响本地Go配置环境的情况下进行Golang源码编译学习"></a>不影响本地Go配置环境的情况下进行Golang源码编译学习</h1><h2 id="第一步：修改源码"><a href="#第一步：修改源码" class="headerlink" title="第一步：修改源码"></a>第一步：修改源码</h2><p>将安装好的Go文件夹复制粘贴一份放到桌面上（其他地方也可以）</p><p>首先进入src文件夹修改自己想要测试学习的源码文件，例如：</p><p>我先进入<code>\Go\src\fmt</code>文件夹，里面的Go源码文件如下：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211016172528532.png" alt="fmt文件夹结构"></p><p>选择用于输出的<code>print.go</code>文件，打开：</p><p>ctrl找到<code>Println</code>函数所在的地方，修改如下：（添加了一行打印代码）</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211016173043906.png" alt="添加代码"></p><p>含义：再输出指定字符串等之后输出一段<code>sailaodawudi!</code>的字样并换行打印。</p><h2 id="第二步：重新编译"><a href="#第二步：重新编译" class="headerlink" title="第二步：重新编译"></a>第二步：重新编译</h2><p>然后打开命令行，进入所复制的Go文件夹里面的src文件夹，</p><pre class="language-none"><code class="language-none">cd XXX&#x2F;Go&#x2F;src</code></pre><p>运行命令，</p><pre class="language-none"><code class="language-none">.&#x2F;make.bat</code></pre><p>利用自带的Windows编译脚本对源码进行重新编译，</p><p>编译过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211016173533217.png" alt="源码编译"></p><h2 id="第三步：创建项目"><a href="#第三步：创建项目" class="headerlink" title="第三步：创建项目"></a>第三步：创建项目</h2><p>然后利用Goland等编译器，</p><p>新建项目，步骤如下图，然后选择本地，路径选择自己刚刚重新编译源码文件复制的地址，我的地址为C:\……\Go。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211016174017326.png" alt="新建项目"></p><p>到这里我们就配置好了我们新编译的GO 的SDK了，要换到原来的只需要项目GOROOT选择原来的就行了。</p><h2 id="第四步：验证"><a href="#第四步：验证" class="headerlink" title="第四步：验证"></a>第四步：验证</h2><p>然后在项目中新建Go文件，随便输入代码如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"dfasdf "</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行代码，输出结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211016174750367.png" alt="输出"></p><p>成功打印出我们在源码中加入的代码。</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记18：Go语言之正则表达式</title>
      <link href="/2021/10/10/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B018%EF%BC%9AGo%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/10/10/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B018%EF%BC%9AGo%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言之正则表达式"><a href="#Go语言之正则表达式" class="headerlink" title="Go语言之正则表达式"></a>Go语言之正则表达式</h1><p><strong>正则表达式：Go语言标准库内建提供了<code>regexp</code>包</strong></p><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><h3 id="基本符号："><a href="#基本符号：" class="headerlink" title="基本符号："></a>基本符号：</h3><pre class="language-none"><code class="language-none">.       匹配除换行符以外的任意字符\w      匹配字母或数字或下划线或汉字\s      匹配任意的空白符\d      匹配数字\b匹配单词的开始或结束^匹配字符串的开始$匹配字符串的结束</code></pre><h3 id="数量上的约定"><a href="#数量上的约定" class="headerlink" title="数量上的约定"></a>数量上的约定</h3><pre class="language-none"><code class="language-none">*重复零次或更多次+重复一次或更多次?重复零次或一次&#123;n&#125;重复n次&#123;n,&#125;重复n次到更多次&#123;n,m&#125;重复n到m次</code></pre><h3 id="更为常用的"><a href="#更为常用的" class="headerlink" title="更为常用的"></a>更为常用的</h3><pre class="language-none"><code class="language-none">捕获(exp)匹配exp，并捕获文本到自动命名的组里(?&lt;name&gt;exp) 匹配exp，并捕获文本到名称为name的组里，也可以写成(?&#39;name&#39;exp) (?:exp) 匹配exp，不捕获匹配的文本，也不给此分组分配组号</code></pre><h2 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a>二、基本用法</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Match</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span> <span class="token punctuation">,</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>matched <span class="token builtin">bool</span> <span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">MatchString</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span> <span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>matched <span class="token builtin">bool</span> <span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">MustCompile</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Regexp<span class="token keyword">func</span> <span class="token punctuation">(</span>re <span class="token operator">*</span>Regexp<span class="token punctuation">)</span> <span class="token function">FundAllString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span> <span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></code></pre><p>例如：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"regexp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>isok <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span>MatchString <span class="token punctuation">(</span><span class="token string">"[a-zA-Z]&#123;3&#125;"</span> <span class="token punctuation">,</span> <span class="token string">"zhi"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span> <span class="token punctuation">,</span> isok<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>返回为true。<code>zhi</code>是在a-zA-Z的3个字符。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// regexp</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"regexp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//reg := regexp.MustCompile("\\w+") 正则表达式中的\需要转义</span>reg <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`^z.*l$`</span><span class="token punctuation">)</span>    <span class="token comment">//用``包含的字符会全部返回</span><span class="token comment">//开头是z ， 结尾是l ，中间用`.*`表示中间的</span>    result <span class="token operator">:=</span> reg<span class="token punctuation">.</span><span class="token function">FindAllString</span><span class="token punctuation">(</span><span class="token string">"zhangsanl"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>reg1 <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`^z(.*)l$`</span><span class="token punctuation">)</span>result1 <span class="token operator">:=</span> reg1<span class="token punctuation">.</span><span class="token function">FindAllString</span><span class="token punctuation">(</span><span class="token string">"zhangsand"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> result1<span class="token punctuation">)</span>reg2 <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`^z(.&#123;1&#125;)(.&#123;1&#125;)(.*)l$`</span><span class="token punctuation">)</span> <span class="token comment">//捕获一次，捕获一次，捕获多次</span>result2 <span class="token operator">:=</span> reg2<span class="token punctuation">.</span><span class="token function">FindAllStringSubmatch</span><span class="token punctuation">(</span><span class="token string">"zhangsanl"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">[</span>zhangsanl<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>zhangsanl h a ngsan<span class="token punctuation">]</span><span class="token punctuation">]</span>进程 已完成，退出代码为 <span class="token number">0</span></code></pre><p><a href="https://my.oschina.net/kuerant/blog/199146正则基本介绍。">https://my.oschina.net/kuerant/blog/199146正则基本介绍。</a></p><h2 id="三、一个简单爬虫"><a href="#三、一个简单爬虫" class="headerlink" title="三、一个简单爬虫"></a>三、一个简单爬虫</h2><p>以名字和评分为例</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// simple_crawler</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"net/http"</span><span class="token string">"regexp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>url <span class="token operator">:=</span> <span class="token string">"https://movie.douban.com/subject/24751763/"</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sHtml<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>reg <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`&lt;span\s*property="v:itemreviewed">(.*)&lt;/span>`</span><span class="token punctuation">)</span>result <span class="token operator">:=</span> reg<span class="token punctuation">.</span><span class="token function">FindAllStringSubmatch</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>sHtml<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>reg1 <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`&lt;strong\s*class="ll\s*rating_num"\s*property="v:average">(.*)&lt;/strong>`</span><span class="token punctuation">)</span>result1 <span class="token operator">:=</span> reg1<span class="token punctuation">.</span><span class="token function">FindAllStringSubmatch</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>sHtml<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>2021/10/10  用Goland已经爬不动豆瓣了，相同代码百度可以爬到但是豆瓣爬不到。。。</p><p>不对，经过测试感觉应该是正则表达式的问题，难道还是因为更新了以前的正则表达式不适用了？</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记17：Go语言之HTTP</title>
      <link href="/2021/10/10/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B017%EF%BC%9AGo%E8%AF%AD%E8%A8%80%E4%B9%8BHTTP/"/>
      <url>/2021/10/10/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B017%EF%BC%9AGo%E8%AF%AD%E8%A8%80%E4%B9%8BHTTP/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言之HTTP"><a href="#Go语言之HTTP" class="headerlink" title="Go语言之HTTP"></a>Go语言之HTTP</h1><h2 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h2><p><strong>HTTP： Go语言标准库内建提供了net/http包</strong></p><p>使用<code>net/http</code>包提供的<code>http.ListenAndServe()</code>方法，可以在指定的地址进行监听，开启一个HTTP，服务端该方法的原型如下：</p><p><strong><code>func ListecAndServe(addr string , handler Handler) error</code></strong></p><h3 id="一-http-ListenAndServe方法用法解释："><a href="#一-http-ListenAndServe方法用法解释：" class="headerlink" title="一).http.ListenAndServe方法用法解释："></a>一).<code>http.ListenAndServe</code>方法用法解释：</h3><ol><li>处理HTTP请求</li></ol><p>该方法用于在指定的TCP网络地址<strong>addr进行监听</strong>，然后调用服务端处理程序来处理传入的连接请求。该方法有两个参数：<strong>第一个参数addr即监听地址</strong>；第二个参数表示<strong>服务端处理程序</strong>，通常为空，这意味着服务端调用<strong><code>http.DefaultServeMux</code></strong>进行处理， 而服务端编写的业务逻辑处理程序<strong><code>http.Handle()</code></strong>或<strong><code>http.HandleFunc()</code></strong>默认注入<code>http.DefaultServeMux</code>中。</p><ol><li>处理HTTPS请求</li></ol><p><strong><code>func ListenAndServeTLS(addr string , certFile string , keyFile string , handler Handler)  error</code></strong></p><h2 id="二-路由处理："><a href="#二-路由处理：" class="headerlink" title="二).路由处理："></a>二).路由处理：</h2><p><code>http.HandleFunc()</code>方法接受两个参数。</p><p>第一个参数是<strong>HTTP请求的目标路径”/hello”</strong> ，该参数值可以是字符串，也可以是字符串形式的正则表达式</p><p>第二个参数<strong>指定具体的回调方法</strong>，比如helloHandler。</p><p>当我们的程序运行起来后，访问<a href="http://locakhost:8080/hello">http://locakhost:8080/hello</a> ， 程序就会去调用<code>helloHandler()</code>方法中的业务逻辑程序。</p><h3 id="1-本地搭建服务"><a href="#1-本地搭建服务" class="headerlink" title="1. 本地搭建服务"></a>1. 本地搭建服务</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"net/http"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello"</span> <span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello sailaoda"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:8080"</span> <span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：浏览器输入<code>127.0.0.1:8080/hello</code>   ，得到结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211010201257778.png" alt="搭建服务运行结果"></p><h3 id="2-访问三方函数：通过get-post访问"><a href="#2-访问三方函数：通过get-post访问" class="headerlink" title="2. 访问三方函数：通过get/post访问"></a>2. 访问三方函数：通过get/post访问</h3><h4 id="一个简单的get-在线服务"><a href="#一个简单的get-在线服务" class="headerlink" title="一个简单的get 在线服务"></a>一个简单的get 在线服务</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>resp <span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment">//延缓关闭</span>body<span class="token punctuation">,</span>err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211010202207145.png" alt="百度" style="zoom:50%;" /></p><p>一个简单的基本爬虫。</p><h4 id="post请求服务"><a href="#post请求服务" class="headerlink" title="post请求服务"></a>post请求服务</h4><pre class="language-go" data-language="go"><code class="language-go">resp<span class="token punctuation">,</span> err<span class="token operator">:=</span>http<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span>“<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>”<span class="token punctuation">,</span> ”application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded”<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>“<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">...</span>”<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>body<span class="token punctuation">,</span>err<span class="token operator">:=</span>ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣刷题之数组</title>
      <link href="/2021/10/09/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
      <url>/2021/10/09/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="数组专题"><a href="#数组专题" class="headerlink" title="数组专题"></a>数组专题</h2><h3 id="LeetCode136-只出现一次的数字"><a href="#LeetCode136-只出现一次的数字" class="headerlink" title="LeetCode136.只出现一次的数字"></a>LeetCode136.<a href="https://leetcode-cn.com/problems/single-number/">只出现一次的数字</a></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>示例 1:</p><pre class="language-none"><code class="language-none">输入: [2,2,1]输出: 1</code></pre><p>示例 2:</p><pre class="language-none"><code class="language-none">输入: [4,1,2,1,2]输出: 4</code></pre><h4 id="算法代码："><a href="#算法代码：" class="headerlink" title="算法代码："></a>算法代码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    single <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">&#123;</span>        single <span class="token operator">^=</span> num    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> single<span class="token punctuation">&#125;</span></code></pre><h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><p>只有一个数字只出现一次，其他数字都出现两次，相同数字位运算结果为0，单独数字和0做位运算结果为他本身。</p><p>即只需要对整个数组做位运算，可以找出唯一单独的数字。</p><h3 id="LeetCode169-多数元素"><a href="#LeetCode169-多数元素" class="headerlink" title="LeetCode169.多数元素"></a>LeetCode169.<a href="https://leetcode-cn.com/problems/majority-element/">多数元素</a></h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><p>示例 1：</p><pre class="language-none"><code class="language-none">输入：[3,2,3]输出：3</code></pre><p>示例 2：</p><pre class="language-none"><code class="language-none">输入：[2,2,1,1,1,2,2]输出：2</code></pre><h4 id="算法代码：-1"><a href="#算法代码：-1" class="headerlink" title="算法代码："></a>算法代码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    major <span class="token operator">:=</span> <span class="token number">0</span>    count <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>num <span class="token operator">:=</span> <span class="token keyword">range</span> nums<span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            major <span class="token operator">=</span> num        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> major <span class="token operator">==</span> num <span class="token punctuation">&#123;</span>            count <span class="token operator">++</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            count <span class="token operator">--</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> najor<span class="token punctuation">&#125;</span></code></pre><h4 id="算法思路：-1"><a href="#算法思路：-1" class="headerlink" title="算法思路："></a>算法思路：</h4><p>摩尔投票法：利用相互抵消的概念</p><p>排序法： 排序之后的中间值一定为众数</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    index <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><h3 id="LeetCode15-三数之和"><a href="#LeetCode15-三数之和" class="headerlink" title="LeetCode15.三数之和"></a>LeetCode15.<a href="https://leetcode-cn.com/problems/3sum/">三数之和</a></h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>答案中不可以包含重复的三元组。</p><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><p>示例 1：</p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [-1,0,1,2,-1,-4]输出：[[-1,-1,2],[-1,0,1]]</code></pre><p>示例 2：</p><pre class="language-none"><code class="language-none">输入：nums &#x3D; []输出：[]</code></pre><p>示例 3：</p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [0]输出：[]</code></pre><h4 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h4><pre class="language-none"><code class="language-none">0 &lt;&#x3D; nums.length &lt;&#x3D; 3000-105 &lt;&#x3D; nums[i] &lt;&#x3D; 105</code></pre><h4 id="算法代码：-2"><a href="#算法代码：-2" class="headerlink" title="算法代码："></a>算法代码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token comment">//ans := make([][]int, 0)</span>    ans <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 枚举 a</span>    <span class="token keyword">for</span> first <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> first<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需要和上一次枚举的数不相同</span>        <span class="token keyword">if</span> first <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// c 对应的指针初始指向数组的最右端</span>        third <span class="token operator">:=</span> n <span class="token operator">-</span> <span class="token number">1</span>        target <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span>        <span class="token comment">// 枚举 b</span>        <span class="token keyword">for</span> second <span class="token operator">:=</span> first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> second<span class="token operator">++</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 需要和上一次枚举的数不相同</span>            <span class="token keyword">if</span> second <span class="token operator">></span> first <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 需要保证 b 的指针在 c 的指针的左侧</span>            <span class="token keyword">for</span> second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token punctuation">&#123;</span>                third<span class="token operator">--</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 如果指针重合，随着 b 后续的增加</span>            <span class="token comment">// 就不会有满足 a+b+c=0 并且 b&lt;c 的 c 了，可以退出循环</span>            <span class="token keyword">if</span> second <span class="token operator">==</span> third <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span></code></pre><h4 id="算法思路：-2"><a href="#算法思路：-2" class="headerlink" title="算法思路："></a>算法思路：</h4><p>排序加双指针的思想</p><h4 id="算法改进："><a href="#算法改进：" class="headerlink" title="算法改进："></a>算法改进：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    ans <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> first <span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">;</span> first <span class="token operator">++</span> <span class="token punctuation">&#123;</span>        n1 <span class="token operator">:=</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span>        <span class="token keyword">if</span> n1 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> first <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>        second <span class="token punctuation">,</span> third <span class="token operator">:=</span> first <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">for</span> second <span class="token operator">&lt;</span> third <span class="token punctuation">&#123;</span>            n2 <span class="token punctuation">,</span> n3 <span class="token operator">:=</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token punctuation">,</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span>            <span class="token keyword">if</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> n3 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ans <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>n1 <span class="token punctuation">,</span> n2 <span class="token punctuation">,</span> n3<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> n2 <span class="token punctuation">&#123;</span>                    second <span class="token operator">++</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> n3 <span class="token punctuation">&#123;</span>                    third <span class="token operator">--</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> n3 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                second <span class="token operator">++</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                third <span class="token operator">--</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 思考总结 </category>
          
          <category> LeetCode刷题剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题剑指Offer</title>
      <link href="/2021/10/07/1-%E5%90%AF%E5%8A%A8LeetCode%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92/"/>
      <url>/2021/10/07/1-%E5%90%AF%E5%8A%A8LeetCode%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode题库刷题"><a href="#LeetCode题库刷题" class="headerlink" title="LeetCode题库刷题"></a>LeetCode题库刷题</h1><h1 id="一、剑指Offer"><a href="#一、剑指Offer" class="headerlink" title="一、剑指Offer"></a>一、剑指Offer</h1><ul><li><h2 id=""><a href="#" class="headerlink" title=""></a><a href="/2021/10/18/%E5%89%91%E6%8C%87Offer%E4%B9%8B%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%98/" title="剑指Offer之链表专题">剑指Offer之链表专题</a></h2></li></ul><h3 id="剑指Offer06-从尾到头打印链表"><a href="#剑指Offer06-从尾到头打印链表" class="headerlink" title="剑指Offer06.从尾到头打印链表"></a>剑指Offer06.<a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">从尾到头打印链表</a></h3><h3 id="剑指Offer24-反转链表"><a href="#剑指Offer24-反转链表" class="headerlink" title="剑指Offer24.反转链表"></a>剑指Offer24.<a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">反转链表</a></h3><h3 id="剑指Offer35-复杂链表的复制"><a href="#剑指Offer35-复杂链表的复制" class="headerlink" title="剑指Offer35.复杂链表的复制"></a>剑指Offer35.<a href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/">复杂链表的复制</a></h3><ul><li><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="/2021/10/07/%E5%89%91%E6%8C%87Offer%E4%B9%8B%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E4%B8%93%E9%A2%98/" title="剑指Offer之栈与队列专题">剑指Offer之栈与队列专题</a></h2></li></ul><h3 id="剑指Offer09-用两个栈实现队列"><a href="#剑指Offer09-用两个栈实现队列" class="headerlink" title="剑指Offer09.用两个栈实现队列"></a>剑指Offer09.<a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">用两个栈实现队列</a></h3><h3 id="剑指Offer30-包含min函数的栈"><a href="#剑指Offer30-包含min函数的栈" class="headerlink" title="剑指Offer30.包含min函数的栈"></a>剑指Offer30.<a href="https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/">包含min函数的栈</a></h3><h1 id="二、LeetCode"><a href="#二、LeetCode" class="headerlink" title="二、LeetCode"></a>二、LeetCode</h1><ul><li><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><a href="/2021/10/09/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E6%95%B0%E7%BB%84/" title="力扣刷题之数组">力扣刷题之数组</a></h2></li></ul><h3 id="LeetCode136-只出现一次的数字"><a href="#LeetCode136-只出现一次的数字" class="headerlink" title="LeetCode136.只出现一次的数字"></a>LeetCode136.<a href="https://leetcode-cn.com/problems/single-number/">只出现一次的数字</a></h3><h3 id="LeetCode169-多数元素"><a href="#LeetCode169-多数元素" class="headerlink" title="LeetCode169.多数元素"></a>LeetCode169.<a href="https://leetcode-cn.com/problems/majority-element/">多数元素</a></h3><h3 id="LeetCode15-三数之和"><a href="#LeetCode15-三数之和" class="headerlink" title="LeetCode15.三数之和"></a>LeetCode15.<a href="https://leetcode-cn.com/problems/3sum/">三数之和</a></h3>]]></content>
      
      
      <categories>
          
          <category> 思考总结 </category>
          
          <category> LeetCode刷题计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer之栈与队列专题</title>
      <link href="/2021/10/07/%E5%89%91%E6%8C%87Offer%E4%B9%8B%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E4%B8%93%E9%A2%98/"/>
      <url>/2021/10/07/%E5%89%91%E6%8C%87Offer%E4%B9%8B%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="栈与队列专题"><a href="#栈与队列专题" class="headerlink" title="栈与队列专题"></a>栈与队列专题</h2><h3 id="剑指Offer09-用两个栈实现队列"><a href="#剑指Offer09-用两个栈实现队列" class="headerlink" title="剑指Offer09.用两个栈实现队列"></a>剑指Offer09.<a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">用两个栈实现队列</a></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>示例 1：</p><pre class="language-none"><code class="language-none">输入：[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;][[],[3],[],[]]输出：[null,null,3,-1]</code></pre><p>示例 2：</p><pre class="language-none"><code class="language-none">输入：[&quot;CQueue&quot;,&quot;deleteHead&quot;,&quot;appendTail&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;][[],[],[5],[2],[],[]]输出：[null,-1,null,null,5,2]</code></pre><h4 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h4><ul><li>1 &lt;= values &lt;= 10000</li><li>最多会对 appendTail、deleteHead 进行 10000 次调用</li></ul><h4 id="算法代码："><a href="#算法代码：" class="headerlink" title="算法代码："></a>算法代码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> CQueue <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 栈 A，用于添加元素</span>    stackA <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token comment">// 栈 B，用于取出元素</span>    stackB <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token comment">// CQueue 的构造函数</span><span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> CQueue <span class="token punctuation">&#123;</span>    <span class="token comment">// 返回一个新的 CQueue</span>    <span class="token keyword">return</span> CQueue<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 往队列插入整数</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>CQueue<span class="token punctuation">)</span> <span class="token function">AppendTail</span><span class="token punctuation">(</span>value <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 在 stackA 的末尾追加 value</span>    this<span class="token punctuation">.</span>stackA <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stackA<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 从队列取出整数并删除</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>CQueue<span class="token punctuation">)</span> <span class="token function">DeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果 stackB 没有元素则从 stackA 中取出所有</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stackB<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果 stackA 里也没有元素，则队列为空返回 -1</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stackA<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 将 stackA 的所有元素转移到 stackB</span>        <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stackA<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取 stackA 最末尾元素的下标</span>            index <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stackA<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token comment">// 获取 stackA 最末尾元素的值 value</span>            value <span class="token operator">:=</span> this<span class="token punctuation">.</span>stackA<span class="token punctuation">[</span>index<span class="token punctuation">]</span>            <span class="token comment">// 向 stackB 的末尾追加 value</span>            this<span class="token punctuation">.</span>stackB <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stackB<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token comment">// 从 stackA 中裁剪出末尾元素</span>            this<span class="token punctuation">.</span>stackA <span class="token operator">=</span> this<span class="token punctuation">.</span>stackA<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这时候表示 stackB 内已有元素</span>    <span class="token comment">// 获取 stackB 最末尾元素的下标</span>    index <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stackB<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment">// 获取 stackB 最末尾元素的值 value</span>    value <span class="token operator">:=</span> this<span class="token punctuation">.</span>stackB<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token comment">// 从 stackB 中裁剪出末尾元素</span>    this<span class="token punctuation">.</span>stackB <span class="token operator">=</span> this<span class="token punctuation">.</span>stackB<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span>    <span class="token comment">// 返回 value</span>    <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token comment">/** * Your CQueue object will be instantiated and called as such: * obj := Constructor(); * obj.AppendTail(value); * param_2 := obj.DeleteHead(); */</span></code></pre><h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><p>用两个栈来模拟队列先进先出的特性，栈A用来添加元素，栈B用来取出元素，取出元素通过将A栈中元素取出倒序添加进入B栈中实现，去掉栈B的栈首元素即为去掉栈A的栈底元素。</p><p>以此来模拟队列中的先进先出特性。</p><h3 id="剑指Offer30-包含min函数的栈"><a href="#剑指Offer30-包含min函数的栈" class="headerlink" title="剑指Offer30.包含min函数的栈"></a>剑指Offer30.<a href="https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/">包含min函数的栈</a></h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><pre class="language-none"><code class="language-none">MinStack minStack &#x3D; new MinStack();minStack.push(-2);minStack.push(0);minStack.push(-3);minStack.min();   --&gt; 返回 -3.minStack.pop();minStack.top();      --&gt; 返回 0.minStack.min();   --&gt; 返回 -2.</code></pre><h4 id="提示：-1"><a href="#提示：-1" class="headerlink" title="提示："></a>提示：</h4><p>各函数的调用总次数不超过 20000 次</p><h4 id="算法代码：-1"><a href="#算法代码：-1" class="headerlink" title="算法代码："></a>算法代码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> MinStack <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    stack <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    minstack <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token comment">/** initialize your data structure here. */</span><span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> MinStack <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> MinStack<span class="token punctuation">&#123;</span>        stack<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        minstack<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>math<span class="token punctuation">.</span>MaxInt64<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MinStack<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    this<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stack <span class="token punctuation">,</span> x<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>minstack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>minstack <span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>minstack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>minstack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MinStack<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        this<span class="token punctuation">.</span>minstack <span class="token operator">=</span> this<span class="token punctuation">.</span>minstack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>minstack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        this<span class="token punctuation">.</span>stack <span class="token operator">=</span> this<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MinStack<span class="token punctuation">)</span> <span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> this<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>stack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MinStack<span class="token punctuation">)</span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> this<span class="token punctuation">.</span>minstack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>minstack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>x <span class="token builtin">int</span> <span class="token punctuation">,</span> y <span class="token builtin">int</span> <span class="token punctuation">)</span>  <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> x <span class="token operator">>=</span> y <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> y    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Your MinStack object will be instantiated and called as such: * obj := Constructor(); * obj.Push(x); * obj.Pop(); * param_3 := obj.Top(); * param_4 := obj.Min(); */</span></code></pre><h4 id="算法思路：-1"><a href="#算法思路：-1" class="headerlink" title="算法思路："></a>算法思路：</h4><p>利用一个辅助栈来存放较小值，在辅助栈的栈顶总是为所有元素的最小值。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>不能直接返回<code>return MinStack&#123;&#125;</code></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> MinStack <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> MinStack<span class="token punctuation">&#123;</span>        stack<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        minstack<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>math<span class="token punctuation">.</span>MaxInt64<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>当测试用例如下时：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">[</span><span class="token string">"MinStack"</span><span class="token punctuation">,</span><span class="token string">"push"</span><span class="token punctuation">,</span><span class="token string">"push"</span><span class="token punctuation">,</span><span class="token string">"push"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">,</span><span class="token string">"pop"</span><span class="token punctuation">,</span><span class="token string">"min"</span><span class="token punctuation">,</span><span class="token string">"pop"</span><span class="token punctuation">,</span><span class="token string">"min"</span><span class="token punctuation">,</span><span class="token string">"pop"</span><span class="token punctuation">,</span><span class="token string">"push"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">,</span><span class="token string">"min"</span><span class="token punctuation">,</span><span class="token string">"push"</span><span class="token punctuation">,</span><span class="token string">"top"</span><span class="token punctuation">,</span><span class="token string">"min"</span><span class="token punctuation">,</span><span class="token string">"pop"</span><span class="token punctuation">,</span><span class="token string">"min"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2147483646</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2147483646</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2147483647</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2147483647</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>直接返回<code>return MinStack&#123;&#125;</code>会发生错误。</p>]]></content>
      
      
      <categories>
          
          <category> 思考总结 </category>
          
          <category> LeetCode刷题剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang实战流媒体视频网站笔记7：API之数据库层设计</title>
      <link href="/2021/10/04/Golang%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B07%EF%BC%9AAPI%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B1%82%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/10/04/Golang%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B07%EF%BC%9AAPI%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B1%82%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Go语言实战流媒体视频网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACwing算法笔记三：高精度加减乘除</title>
      <link href="/2021/10/03/ACwing%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/"/>
      <url>/2021/10/03/ACwing%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ACwing算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记16：JSON与Md5</title>
      <link href="/2021/10/02/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B016%EF%BC%9AJSON%E4%B8%8EMd5/"/>
      <url>/2021/10/02/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B016%EF%BC%9AJSON%E4%B8%8EMd5/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言之JSON与Md5"><a href="#Go语言之JSON与Md5" class="headerlink" title="Go语言之JSON与Md5"></a>Go语言之JSON与Md5</h1><h1 id="一、JSON"><a href="#一、JSON" class="headerlink" title="一、JSON"></a>一、JSON</h1><h2 id="1-JSON序列化包"><a href="#1-JSON序列化包" class="headerlink" title="1. JSON序列化包"></a>1. JSON序列化包</h2><p><strong>JSON   ： Go语言内置的encoding/json标准库</strong></p><p>实现JSON序列化，但性能不是很好，特别是在量比较大的情况下。</p><p>非内置的JSON 包， github.com/pquerna/ffjson/ffjson         更快性能更好，用go get 命令下载。</p><p>两个包的用法是一样的。</p><h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h2><h3 id="JSON编码："><a href="#JSON编码：" class="headerlink" title="JSON编码："></a>JSON编码：</h3><p><code>func Marshal(v interface&#123;&#125;) ([]byte,error)</code></p><p>可以对任何类型进行编码<code>interface&#123;&#125;</code>， 返回一个数组和是否出错的消息。</p><h3 id="JSON解码："><a href="#JSON解码：" class="headerlink" title="JSON解码："></a>JSON解码：</h3><p><code>func Unmarshal(data []byte , v interface&#123;&#125;) error</code></p><h2 id="3-编码解码示例"><a href="#3-编码解码示例" class="headerlink" title="3.编码解码示例"></a>3.编码解码示例</h2><h3 id="json编码"><a href="#json编码" class="headerlink" title="json编码"></a>json编码</h3><h4 id="对数组类型的json编码："><a href="#对数组类型的json编码：" class="headerlink" title="对数组类型的json编码："></a>对数组类型的json编码：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//对数组类型的json编码</span>x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span>s <span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>进程 已完成，退出代码为 <span class="token number">0</span></code></pre><h4 id="对map类型进行json编码"><a href="#对map类型进行json编码" class="headerlink" title="对map类型进行json编码"></a>对map类型进行json编码</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//对数组类型的json编码</span>x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span>s <span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//对map类型</span>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">float64</span><span class="token punctuation">)</span>m<span class="token punctuation">[</span><span class="token string">"zhangsan"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100.4</span>s2<span class="token punctuation">,</span> err2 <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">if</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">91</span> <span class="token number">49</span> <span class="token number">44</span> <span class="token number">50</span> <span class="token number">44</span> <span class="token number">51</span> <span class="token number">44</span> <span class="token number">52</span> <span class="token number">44</span> <span class="token number">53</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">123</span> <span class="token number">34</span> <span class="token number">122</span> <span class="token number">104</span> <span class="token number">97</span> <span class="token number">110</span> <span class="token number">103</span> <span class="token number">115</span> <span class="token number">97</span> <span class="token number">110</span> <span class="token number">34</span> <span class="token number">58</span> <span class="token number">49</span> <span class="token number">48</span> <span class="token number">48</span> <span class="token number">46</span> <span class="token number">52</span> <span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">:</span><span class="token number">100.4</span><span class="token punctuation">&#125;</span>进程 已完成，退出代码为 <span class="token number">0</span></code></pre><h4 id="对队象进行json编码"><a href="#对队象进行json编码" class="headerlink" title="对队象进行json编码"></a>对队象进行json编码</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span>age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//对数组类型的json编码</span>x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span>s <span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//对map类型进行json编码</span>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">float64</span><span class="token punctuation">)</span>m<span class="token punctuation">[</span><span class="token string">"zhangsan"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100.4</span>s2<span class="token punctuation">,</span> err2 <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">if</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//对对象进行json编码</span>student <span class="token operator">:=</span> Student<span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span> <span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">&#125;</span>s3 <span class="token punctuation">,</span> err3 <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token keyword">if</span> err3 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>输出结果：</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">91</span> <span class="token number">49</span> <span class="token number">44</span> <span class="token number">50</span> <span class="token number">44</span> <span class="token number">51</span> <span class="token number">44</span> <span class="token number">52</span> <span class="token number">44</span> <span class="token number">53</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">123</span> <span class="token number">34</span> <span class="token number">122</span> <span class="token number">104</span> <span class="token number">97</span> <span class="token number">110</span> <span class="token number">103</span> <span class="token number">115</span> <span class="token number">97</span> <span class="token number">110</span> <span class="token number">34</span> <span class="token number">58</span> <span class="token number">49</span> <span class="token number">48</span> <span class="token number">48</span> <span class="token number">46</span> <span class="token number">52</span> <span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">:</span><span class="token number">100.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"Name"</span><span class="token punctuation">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">&#125;</span>进程 已完成，退出代码为 <span class="token number">0</span></code></pre><p>只输出了Name的类型，因为age是小写的。</p><p>在struct中，如果类型开头是小写，则说明在json encode的时候不想导出，如<code>age</code>。</p><p>也可以在struct中改名。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Name <span class="token builtin">string</span> <span class="token string">`json:"student_name"`</span>age <span class="token builtin">int</span><span class="token punctuation">&#125;</span></code></pre><p>结果会变成：<code>&#123;&quot;student_name&quot;:&quot;zhangsan&quot;&#125;</code></p><h3 id="json解码"><a href="#json解码" class="headerlink" title="json解码"></a>json解码</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//对s3进行json解码</span><span class="token keyword">var</span> s4 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s4<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span> <span class="token punctuation">,</span> s4<span class="token punctuation">)</span></code></pre><p>输出结果：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// &#123;"Name":"zhangsan","Age":26&#125;</span><span class="token keyword">map</span><span class="token punctuation">[</span>Age<span class="token punctuation">:</span><span class="token number">26</span> Name<span class="token punctuation">:</span>zhangsan<span class="token punctuation">]</span>进程 已完成，退出代码为 <span class="token number">0</span></code></pre><h1 id="二、MD5"><a href="#二、MD5" class="headerlink" title="二、MD5"></a>二、MD5</h1><ol><li><h3 id="Go语言内置的crypto-md5标准库"><a href="#Go语言内置的crypto-md5标准库" class="headerlink" title="Go语言内置的crypto/md5标准库"></a>Go语言内置的crypto/md5标准库</h3></li><li><p>```go<br>Md5Inst := md5.New()<br>Md5Inst.Write([]byte(“test md5”))<br>Result := Md5Inst.Sum([]byte(“”))<br>fmt.Printf(“%x\n\n” , Result)</p><pre class="language-none"><code class="language-none">### MD5使用示例&#96;&#96;&#96;goimport (&quot;crypto&#x2F;md5&quot;&quot;fmt&quot;)func main() &#123;Md5Inst :&#x3D; md5.New()Md5Inst.Write([]byte(&quot;test md5&quot;))Result :&#x3D; Md5Inst.Sum([]byte(&quot;&quot;))fmt.Println( Result)fmt.Println( string(Result))fmt.Printf(&quot;%x\n\n&quot; , Result)&#125;</code></pre></li></ol><p>输出结果：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">14</span> <span class="token number">78</span> <span class="token number">59</span> <span class="token number">38</span> <span class="token number">129</span> <span class="token number">232</span> <span class="token number">147</span> <span class="token number">28</span> <span class="token number">6</span> <span class="token number">122</span> <span class="token number">35</span> <span class="token number">197</span> <span class="token number">131</span> <span class="token number">200</span> <span class="token number">120</span> <span class="token number">213</span><span class="token punctuation">]</span>N<span class="token punctuation">;</span><span class="token operator">&amp;</span>��z#Ń�x�<span class="token number">0e4</span>e3b2681e8931c067a23c583c878d5进程 已完成，退出代码为 <span class="token number">0</span></code></pre><p>MD5是不可逆的，使用的时候可以用函数封装一下。接口之间也可以通过MD5 进行验签。</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记15：并发编程之深入协程</title>
      <link href="/2021/10/01/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B015%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%B7%B1%E5%85%A5%E5%8D%8F%E7%A8%8B/"/>
      <url>/2021/10/01/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B015%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%B7%B1%E5%85%A5%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="协程与线程的区别"><a href="#协程与线程的区别" class="headerlink" title="协程与线程的区别"></a>协程与线程的区别</h1><h2 id="协程和线程质的不同（？？存疑"><a href="#协程和线程质的不同（？？存疑" class="headerlink" title="协程和线程质的不同（？？存疑"></a>协程和线程质的不同（？？存疑</h2><h3 id="协程的特点："><a href="#协程的特点：" class="headerlink" title="协程的特点："></a>协程的特点：</h3><ul><li><strong>该任务的业务代码主动要求切换，即让出执行权</strong></li><li><strong>发生了IO，导致执行阻塞</strong></li></ul><p><strong>只有这两种情况会发生协程出让出执行权</strong></p><p>而线程一般是时间片。</p><h3 id="线程的java代码"><a href="#线程的java代码" class="headerlink" title="线程的java代码"></a>线程的java代码</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> thread <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Test_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Test_thread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test_thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread1:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test_thread2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread 2:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>线程运行来回切换。</p><p><strong>这个切换是一个比较大的开销</strong></p><h3 id="Golang的协程"><a href="#Golang的协程" class="headerlink" title="Golang的协程"></a>Golang的协程</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"strconv"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//用匿名函数的方法开协程</span><span class="token comment">//协程1</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"routine 1 :"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//协程2</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">100</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span> <span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"routine 2 :"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="但是好像和线程运行一样也会切换，可能是Golang新版本和教程有出入，等之后看Golang源码的时候记得关注协程和线程方面。"><a href="#但是好像和线程运行一样也会切换，可能是Golang新版本和教程有出入，等之后看Golang源码的时候记得关注协程和线程方面。" class="headerlink" title="但是好像和线程运行一样也会切换，可能是Golang新版本和教程有出入，等之后看Golang源码的时候记得关注协程和线程方面。"></a>但是好像和线程运行一样也会切换，可能是Golang新版本和教程有出入，等之后看Golang源码的时候记得关注协程和线程方面。</h4>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玄武科技产品经理面试准备</title>
      <link href="/2021/09/25/%E7%8E%84%E6%AD%A6%E7%A7%91%E6%8A%80%E8%83%8C%E6%99%AF%E6%95%B4%E7%90%86/"/>
      <url>/2021/09/25/%E7%8E%84%E6%AD%A6%E7%A7%91%E6%8A%80%E8%83%8C%E6%99%AF%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="玄武科技"><a href="#玄武科技" class="headerlink" title="玄武科技"></a>玄武科技</h1><h1 id="一、官网"><a href="#一、官网" class="headerlink" title="一、官网"></a>一、<a href="https://wxchina.com">官网</a></h1><h3 id="中国领先的智慧CRM服务供应商。"><a href="#中国领先的智慧CRM服务供应商。" class="headerlink" title="中国领先的智慧CRM服务供应商。"></a><strong>中国领先的智慧CRM服务供应商。</strong></h3><p><strong>“CRM SaaS + CRM PaaS”创新驱动，玄武科技致力于通过两大服务平台，实现以客户为导向的数字化及智能化转型。</strong></p><h4 id="旗下玄讯—消费品全联接营销服务云https-www-xtion-net-index-aspx"><a href="#旗下玄讯—消费品全联接营销服务云https-www-xtion-net-index-aspx" class="headerlink" title="旗下玄讯—消费品全联接营销服务云https://www.xtion.net/index.aspx"></a>旗下玄讯—消费品全联接营销服务云<a href="https://www.xtion.net/index.aspx">https://www.xtion.net/index.aspx</a></h4><h4 id="旗下即信—-以互联网电子商务为基础，整合持牌金融机构服务，打造创新业务场景服务的科技公司。-https-www-credit2go-cn-home"><a href="#旗下即信—-以互联网电子商务为基础，整合持牌金融机构服务，打造创新业务场景服务的科技公司。-https-www-credit2go-cn-home" class="headerlink" title="旗下即信— 以互联网电子商务为基础，整合持牌金融机构服务，打造创新业务场景服务的科技公司。  https://www.credit2go.cn/#/home"></a>旗下即信— 以互联网电子商务为基础，整合持牌金融机构服务，打造创新业务场景服务的科技公司。  <a href="https://www.credit2go.cn/#/home">https://www.credit2go.cn/#/home</a></h4><h4 id="旗下玄武400快线—依托国家工信部三网合一号码资源，整合多媒体、二维码等技术开发的新型短信客服及信息互动产品。"><a href="#旗下玄武400快线—依托国家工信部三网合一号码资源，整合多媒体、二维码等技术开发的新型短信客服及信息互动产品。" class="headerlink" title="旗下玄武400快线—依托国家工信部三网合一号码资源，整合多媒体、二维码等技术开发的新型短信客服及信息互动产品。"></a>旗下玄武400快线—依托国家工信部三网合一号码资源，整合多媒体、二维码等技术开发的新型短信客服及信息互动产品。</h4><h2 id="CRM"><a href="#CRM" class="headerlink" title="CRM"></a>CRM</h2><h4 id="CRM-是客户关系管理的简称。-根据定义，CRM-涵盖了你在销售、营销、客户服务和电子商务活动中管理客户关系的所有方式。-借助CRM-系统，你可以整合并自动执行这些面向客户的活动。-先进的CRM-系统还能提供其他工具，包括用于客户分析、个性化定制、社交媒体以及协作等方面的工具。"><a href="#CRM-是客户关系管理的简称。-根据定义，CRM-涵盖了你在销售、营销、客户服务和电子商务活动中管理客户关系的所有方式。-借助CRM-系统，你可以整合并自动执行这些面向客户的活动。-先进的CRM-系统还能提供其他工具，包括用于客户分析、个性化定制、社交媒体以及协作等方面的工具。" class="headerlink" title="CRM 是客户关系管理的简称。 根据定义，CRM 涵盖了你在销售、营销、客户服务和电子商务活动中管理客户关系的所有方式。 借助CRM 系统，你可以整合并自动执行这些面向客户的活动。 先进的CRM 系统还能提供其他工具，包括用于客户分析、个性化定制、社交媒体以及协作等方面的工具。"></a>CRM 是客户关系管理的简称。 根据定义，CRM 涵盖了你在销售、营销、客户服务和电子商务活动中管理客户关系的所有方式。 借助CRM 系统，你可以整合并自动执行这些面向客户的活动。 先进的CRM 系统还能提供其他工具，包括用于客户分析、个性化定制、社交媒体以及协作等方面的工具。</h4><h2 id="PaaS和SaaS"><a href="#PaaS和SaaS" class="headerlink" title="PaaS和SaaS"></a>PaaS和SaaS</h2><h4 id="云计算中讨论的服务包括基础设施即服务（IaaS），平台即服务（PaaS）和软件即服务（SaaS）三个层次的服务。-平台即服务（PaaS）是云计算的重要组成部分，提供运算平台与解决方案服务-1-。在云计算的典型层级中，PaaS层介于软件即服务与基础设施即服务之间。PaaS提供用户将云端基础设施部署与创建至客户端，或者借此获得使用编程语言、程序库与服务。用户不需要管理与控制云端基础设施（包含网络、服务器、操作系统或存储），但需要控制上层的应用程序部署与应用托管的环境。PaaS将软件研发的平台做为一种服务，以软件即服务（SaaS）模式交付给用户。PaaS-提供软件部署平台（runtime），抽象掉了硬件和操作系统细节，可以无缝地扩展（scaling）。开发者只需要关注自己的业务逻辑，不需要关注底层。即PaaS-为生成、测试和部署软件应用程序提供一个环境。"><a href="#云计算中讨论的服务包括基础设施即服务（IaaS），平台即服务（PaaS）和软件即服务（SaaS）三个层次的服务。-平台即服务（PaaS）是云计算的重要组成部分，提供运算平台与解决方案服务-1-。在云计算的典型层级中，PaaS层介于软件即服务与基础设施即服务之间。PaaS提供用户将云端基础设施部署与创建至客户端，或者借此获得使用编程语言、程序库与服务。用户不需要管理与控制云端基础设施（包含网络、服务器、操作系统或存储），但需要控制上层的应用程序部署与应用托管的环境。PaaS将软件研发的平台做为一种服务，以软件即服务（SaaS）模式交付给用户。PaaS-提供软件部署平台（runtime），抽象掉了硬件和操作系统细节，可以无缝地扩展（scaling）。开发者只需要关注自己的业务逻辑，不需要关注底层。即PaaS-为生成、测试和部署软件应用程序提供一个环境。" class="headerlink" title="云计算中讨论的服务包括基础设施即服务（IaaS），平台即服务（PaaS）和软件即服务（SaaS）三个层次的服务。 平台即服务（PaaS）是云计算的重要组成部分，提供运算平台与解决方案服务 [1] 。在云计算的典型层级中，PaaS层介于软件即服务与基础设施即服务之间。PaaS提供用户将云端基础设施部署与创建至客户端，或者借此获得使用编程语言、程序库与服务。用户不需要管理与控制云端基础设施（包含网络、服务器、操作系统或存储），但需要控制上层的应用程序部署与应用托管的环境。PaaS将软件研发的平台做为一种服务，以软件即服务（SaaS）模式交付给用户。PaaS 提供软件部署平台（runtime），抽象掉了硬件和操作系统细节，可以无缝地扩展（scaling）。开发者只需要关注自己的业务逻辑，不需要关注底层。即PaaS 为生成、测试和部署软件应用程序提供一个环境。"></a><a href="https://baike.baidu.com/item/云计算/9969353">云计算</a>中讨论的服务包括基础设施即服务（<a href="https://baike.baidu.com/item/IaaS/5863121">IaaS</a>），平台即服务（PaaS）和软件即服务（<a href="https://baike.baidu.com/item/SaaS/6703273">SaaS</a>）三个层次的服务。 平台即服务（PaaS）是云计算的重要组成部分，提供运算平台与解决方案服务 [1] 。在云计算的典型层级中，PaaS层介于软件即服务与基础设施即服务之间。PaaS提供用户将云端基础设施部署与创建至客户端，或者借此获得使用编程语言、程序库与服务。用户不需要管理与控制云端基础设施（包含<a href="https://baike.baidu.com/item/网络/143243">网络</a>、<a href="https://baike.baidu.com/item/服务器/100571">服务器</a>、操作系统或存储），但需要控制上层的应用程序部署与应用托管的环境。PaaS将软件研发的平台做为一种服务，以软件即服务（SaaS）模式交付给用户。PaaS 提供软件部署平台（runtime），抽象掉了硬件和操作系统细节，可以无缝地扩展（scaling）。开发者只需要关注自己的业务逻辑，不需要关注底层。即PaaS 为生成、测试和部署软件应用程序提供一个环境。</h4><h1 id="二、公司"><a href="#二、公司" class="headerlink" title="二、公司"></a>二、公司</h1><h3 id=""><a href="#" class="headerlink" title=""></a><div class="tip warning faa-horizontal animated-hover"><p>公司介绍</p></div></h3><p><strong>玄武科技CRM解决方案，为企业提供综合CRM服务，依托CRM PaaS 及CRM SaaS解决方案，帮助客户以更高效及有效的方式管理其关键运营，产品展示、订单履行、全渠道营销、会员计划管理及业务分析及报告，并凭借玄武科技全面的产品组合及功能丰富的解决方案，可以满足跨公有云、私有云及混合云的广泛客户的不同需求，为客户赢取消费者并加强客户与终端客户之间的联系与创新转型。</strong></p><p><strong>玄武科技以全联接的</strong>3+1<strong>技术服务平台为基础，即通信平台、AI平台、数据平台及aPaaS平台，提供云通信SaaS和CRM SaaS产品及服务，具体包括营销云、销售云、客服云、电商云、通信服务、数据服务和AI服务的全联接SaaS产品和服务，从而为快消、金融、电力、互联网等全行业提供全渠道数字化营销服务解决方案。经过二十多年的行业深耕，现已服务了包括红牛、王老吉、卡士、中国银行、中国农业银行、华为、唯品会等上万家企业客户，积累了深厚的行业经验，并通过全国性营销服务网络以及完善的服务价值体系，为企业构建“以客户为中心”的全渠道数字化营销服务。</strong></p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><div class="tip warning faa-horizontal animated-hover"><p>企业口号</p></div></h3><p><strong>无限融合，连接未来。</strong></p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a><div class="tip warning faa-horizontal animated-hover"><p>企业使命</p></div></h3><p><strong>帮助客户实现以客户为导向的数字化及智能化转型，支持客户的业务获得成功。</strong></p><h3 id="-3"><a href="#-3" class="headerlink" title=""></a><div class="tip warning faa-horizontal animated-hover"><p>企业愿景</p></div></h3><p><strong>发展成为中国领先的智慧CRM服务供应商。</strong></p><h1 id="三、公司发展过程"><a href="#三、公司发展过程" class="headerlink" title="三、公司发展过程"></a>三、公司发展过程</h1><div class="timeline"><div class="timenode"><div class="meta"><p><p>2020</p></p></div><div class="body"><p>推出升级后的销售云解决方案——智慧100</p></div></div><div class="timenode"><div class="meta"><p><p>2019</p></p></div><div class="body"><p>推出ICC（营销云解决方案服务的融合通信平台）</p></div></div><div class="timenode"><div class="meta"><p><p>2018</p></p></div><div class="body"><ol><li>推出U客100（一个LTC模组的销售云解决方案）</li><li>推出包含人工智能及数据智能能力的cPaaS平台</li><li>通过收购推出客服云解决方案</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2015</p></p></div><div class="body"><p>推出快销100（智慧100的前身）</p></div></div><div class="timenode"><div class="meta"><p><p>2012</p></p></div><div class="body"><ol><li>推出cPaaS平台（具备通讯功能的云平台）</li><li>推出MOS解决方案（公开云基础信息操作系统）作为玄武营销云解决方案的一部分</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2011</p></p></div><div class="body"><p>推出通用信息平台（UMP）作为营销云解决方案</p></div></div></div><h1 id="四、公司产品"><a href="#四、公司产品" class="headerlink" title="四、公司产品"></a>四、公司产品</h1><h2 id="销售云：全面提升获客能力及销售效率"><a href="#销售云：全面提升获客能力及销售效率" class="headerlink" title="销售云：全面提升获客能力及销售效率"></a>销售云：全面提升获客能力及销售效率</h2><p><strong>销售云是面向企业提供全面的销售管理解决方案，通过在客户的销售管理周期中引入简化运营模式及自动化工作流程，帮助客户提高获客能力及实现更高的销售效率。</strong></p><div class="tip home"><p>U客100（LTC）</p></div><p>建立在具有数据智能能力的从线索到现金（LTC）销售管理模型之上的解决方案，赋能客户监控其全销售流程，包括研发、生产、销售及售后流程。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210925010904292.png" alt="U客100流程图"></p><div class="tip sync"><p>智慧100</p></div><p>由人工智能及数据智能解决方案赋能的全新智慧解决方案，为快消品行业客户量身定制，其可提高客户销售各个阶段及场景的数据收集能力，如售前计划、产品展示及竞品分析以及售后数据分析。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210925011247682.png" alt="智慧100流程图"></p><h2 id="营销云：一站式营销创新解决方案"><a href="#营销云：一站式营销创新解决方案" class="headerlink" title="营销云：一站式营销创新解决方案"></a>营销云：一站式营销创新解决方案</h2><p><strong>营销云是为客户提供的数字工具，可通过一系列解决方案，包括UMP解决方案、MOS解决方案、ICC（融合通信中台）解决方案等，将其产品或服务精准地推广到目标受众，通过创新的一站式解决方案为客户提供卓越的体验。</strong></p><div class="tip cogs"><p>UMP</p></div><p>基于私有云的解决方案，可连接OA、CRM、ERP及数据库系统，通过网络及社交媒体渠道以短信、语音、微信及电子邮件等，发送验证、积分兑换、账单支付通知、营销活动、促销及其他消息。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210925012059851.png" alt="UMP流程图"></p><div class="tip key"><p>MOS</p></div><p>基于公有云的解决方案，无需安装任何软件或APP，即可通过网络以短信、彩信及丰富的媒体视频消息服务向客户发送身份验证、支付认证、客户通知、营销活动及其他消息。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210925012144480.png" alt="MOS流程图"></p><div class="tip bell"><p>ICC（融合通信中台）</p></div><p>通过集中通信基础设施集成所有通信及管理频道的解决方案，让客户管理组织内外用途的综合通信频道，为不同终端客户群定制营销内容及部署不同的通信频道。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210925012711661.png" alt="ICC流程图"></p><h2 id="客服云：致力于提高客户云语音服务能力"><a href="#客服云：致力于提高客户云语音服务能力" class="headerlink" title="客服云：致力于提高客户云语音服务能力"></a>客服云：致力于提高客户云语音服务能力</h2><p><strong>客服云为客户提供一系列售后客户服务相关解决方案，致力于提高客户的云语音相关服务能力。</strong></p><div class="tip fa-atom"><p>云呼叫中心</p></div><p>基于云计算及互联网服务，支持语音及多媒体内容的统一平台，通过通话录音及绩效评估模块，实现人员及终端客户管理。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210925013425940.png" alt="云呼叫中心流程图"></p><div class="tip fa-atom"><p>智能质检</p></div><p>基于语音识别、语义分析及数据处理技术，可同时将通话语音转换及翻译成文字，提供语音支持，并按照指定的标准对一线客服人员的服务素质进行自动评估。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210925013504165.png" alt="智能质检流程图"></p><h2 id="人工智能能力：销售管理及零售店管理的智能化赋能"><a href="#人工智能能力：销售管理及零售店管理的智能化赋能" class="headerlink" title="人工智能能力：销售管理及零售店管理的智能化赋能"></a>人工智能能力：销售管理及零售店管理的智能化赋能</h2><p><strong>以cPaaS驱动的人工智能，是具有自主学习及分析能力的视觉相关人工智能解决方案，即【RetailVision】及【ManuVision】(【视觉引擎】)，</strong></p><p><strong>可改善销售管理及零售店管理，加速其业务流程及为其销售及营销策略提供有效的解决方案。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210925014026854.png" alt="AI平台模块组成"></p><h2 id="数据智能能力：数据整合、开发、可视化及分析"><a href="#数据智能能力：数据整合、开发、可视化及分析" class="headerlink" title="数据智能能力：数据整合、开发、可视化及分析"></a>数据智能能力：数据整合、开发、可视化及分析</h2><p><strong>提供数据整合、开发、可视化及分析的一站式解决方案，其提升客户营运效率及可通过私有云、公有云或混合云接入，并以API及SDK的形式集成至彼端的业务操作系统。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210925014343654.png" alt="数据智能"></p><h2 id="cPaaS平台：语音频道资源、通信网络、呼叫、消息功能"><a href="#cPaaS平台：语音频道资源、通信网络、呼叫、消息功能" class="headerlink" title="cPaaS平台：语音频道资源、通信网络、呼叫、消息功能"></a>cPaaS平台：语音频道资源、通信网络、呼叫、消息功能</h2><p><strong>cPaaS平台是一个整合语音频道资源、通信网络、呼叫和消息功能的平台，让玄武的客户能够以简单、高效及灵活的方式访问及利用通信资源，并根据其需要聚成不同的模块应用。</strong></p><h1 id="五、玄武价值观"><a href="#五、玄武价值观" class="headerlink" title="五、玄武价值观"></a>五、玄武价值观</h1><h2 id="客户第一、奋斗不息、互相成就"><a href="#客户第一、奋斗不息、互相成就" class="headerlink" title="客户第一、奋斗不息、互相成就"></a>客户第一、奋斗不息、互相成就</h2><h1 id="六、公司地点"><a href="#六、公司地点" class="headerlink" title="六、公司地点"></a>六、公司地点</h1><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210925015204991.png" alt="公司地点" style="zoom:67%;" /></p><h1 id="七、最近合作"><a href="#七、最近合作" class="headerlink" title="七、最近合作"></a>七、最近合作</h1><h2 id="玄武科技5G消息签约长龙航空-持续搭建多行业应用场景矩阵"><a href="#玄武科技5G消息签约长龙航空-持续搭建多行业应用场景矩阵" class="headerlink" title="玄武科技5G消息签约长龙航空 持续搭建多行业应用场景矩阵"></a>玄武科技5G消息签约长龙航空 持续搭建多行业应用场景矩阵</h2><p>2021年初，玄武科技凭借着在平台、通道以及能力建设上领先的服务方案，与长龙航空就5G消息的应用布局达成合作，双方将共同探索5G消息在航空运输业的应用与落地，这意味着玄武科技5G消息的多行业应用场景矩阵，将越来越丰富化、多元化!</p><p>据悉，“长龙航空”5G消息通过强入口、一站式、高安全、富媒体、新生态、交互化等特性，改变了原来航空业购票出行服务依赖于APP的模式，在短信服务端口即可为终端用户提供一站式航空出行服务，是5G时代全新的航空出行服务产品。</p><p>即信云通信是以cPaaS为基础，涵盖短信、语音、物联网等通信资源及ICC、UMP、AMS、AI机器人等通信软件平台，并围绕企业通信需求提供一站式云通信解决方案的企业通信云计算服务，广泛应用于金融、政企、互联网、快消等行业，致力于帮助企业连接用户与渠道，在融合通信中驱动企业业务创新与发展。</p><h1 id="八、常见问题"><a href="#八、常见问题" class="headerlink" title="八、常见问题"></a>八、常见问题</h1><ol><li><h3 id="请做下自我介绍？"><a href="#请做下自我介绍？" class="headerlink" title="请做下自我介绍？"></a>请做下自我介绍？</h3><ul><li>我是谁？叫什么、来自哪个大学、专业是什么，一句话足矣；</li><li>我能够做什么？会哪些技术、会用什么软件；</li><li>曾经做成过什么？做过哪些项目、组织过哪些活动、多少场晚会，规模大小，尽量用数字说明；</li><li>希望做什么？未来的规划，要表现出加入这家公司的渴望度；</li><li>结束语，谢谢面试官。</li></ul></li><li><h3 id="你为什么要当产品经理？"><a href="#你为什么要当产品经理？" class="headerlink" title="你为什么要当产品经理？"></a>你为什么要当产品经理？</h3><ul><li><strong>个人兴趣：</strong>平时喜欢互联网，喜欢了解各种互联网产品，看他们解决了什么问题、定位是什么，为什么设计这样的产品功能。如果能自己做出一款改变一些人的产品，一定会很棒！</li><li><strong>能力：</strong>产品经理除了需要沟通、组织协调等能力，还需要有比好的同理心、逻辑思维、商业敏感度、行业理解能力。而这些里面，我个人的同理心、商业敏感度比较好。比如xxx例子。</li><li><strong>个人成就感：</strong>往大了说，如果有成千上万的人使用自己的产品，那是多么骄傲和自豪的事情，能够给我带来巨大的成就感。一个成功的产品一定是解决了某个或某些问题，体现出自己的商业判断和创造力，商业上的竞争是残酷也是充满激情的，如果能够获胜，那也能有英雄一样的体验吧！往小了说，如果产品没有价值，是没有人会用的，所以产品经理是在创造价值。</li><li><strong>挑战：</strong>产品经理被说成是指挥官，拥有很多需求的决策权，拥有决策就要承担相应的责任。能否带领项目走向成功，过程中需要花费非常大的努力、协调各种资源、不断的提升和突破自己，这种挑战和新知识的学习，非常能激发我的斗志。</li><li><strong>未来的发展：</strong>产品经理能够提升一个人的综合能力，其中不仅仅包括行业理解力、产品设计能力、需求分析等专业能力，还包括沟通能力、学习能力、执行能力、日常管理能力、领导力等通用能力，可以极大的促进自己各方面的学习与成长。我希望未来自己通过产品经理的锻炼，综合能力有更好的提升，未来能够成长为一个商业leader或者CEO。</li></ul></li><li><h3 id="你觉得产品经理应该具备什么样的素质？"><a href="#你觉得产品经理应该具备什么样的素质？" class="headerlink" title="你觉得产品经理应该具备什么样的素质？"></a>你觉得产品经理应该具备什么样的素质？</h3><p>产品经理的核心能力，可以归纳为<strong>通用素质</strong>与<strong>专业能力</strong>两个方面。<strong>通用素质</strong>是指这些素质与能力不只是局限于产品经理岗位，在其他岗位中它们同样被需要，<strong>包括积极主动、学习能力、思考能力与沟通能力</strong>。而<strong>专业能力</strong>相较之下则更被产品经理这一岗位所特定需要，<strong>包括需求分析能力、产品规划能力、项目管理能力与数据分析能力等</strong>。</p></li><li><h3 id="你觉得对产品经理来说哪一项能力最重要？"><a href="#你觉得对产品经理来说哪一项能力最重要？" class="headerlink" title="你觉得对产品经理来说哪一项能力最重要？"></a>你觉得对产品经理来说哪一项能力最重要？</h3><h4 id="1-决策能力，是确定方向、做出计划的能力"><a href="#1-决策能力，是确定方向、做出计划的能力" class="headerlink" title="1. 决策能力，是确定方向、做出计划的能力"></a>1. 决策能力，是确定方向、做出计划的能力</h4><p>产品经理随时随地在做决策，基于所知的有限的信息做决策。</p><p>大到业务新方向确定，新市场拓展。</p><p>小到需求方案、交互逻辑、技术测试分歧的确定。</p><p>哪里有不确定，哪里就需要产品做决策。</p><p>决策能力背后是产品经理信息收集、信息处理、深度思考、基于一些产品原则做出决定的能力，是一项综合的能力。</p><h4 id="2-执行力，是把方向落地、计划落地的能力"><a href="#2-执行力，是把方向落地、计划落地的能力" class="headerlink" title="2. 执行力，是把方向落地、计划落地的能力"></a>2. 执行力，是把方向落地、计划落地的能力</h4><p>有方向、有计划，没有执行，什么都不是。</p><p>有执行，没有方向、没有计划，会南辕北辙，离目标越来越远。</p><p>听过很多道理，仍然过不好这一生。背后就是只知道哪些是正确，但仍不会按照正确方向的去执行，落入原来的老路子去了。</p><p>我们认为善良比聪明重要，我们的产品就要按照对用户善良的方向设计，不要耍小聪明。</p><p>我们认为效率非常重要，我们的产品是否遵循了效率原则来设计?</p><p>所谓知行合一，就是坚持做自己认为正确的事情。</p><p><strong>所以，决策能力，是执行力的内核。执行力，是决策能力的效率表现。</strong></p><p><strong>这两项结合起来，就是产品经理的核心竞争力。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/i1kXwIaelWDhk9eLNKlf.jpeg" alt="产品经理能力" style="zoom: 50%;" /></p></li><li><h3 id="产品经理的职责是什么？"><a href="#产品经理的职责是什么？" class="headerlink" title="产品经理的职责是什么？"></a>产品经理的职责是什么？</h3><p>通常认为产品经理的职责主要包括：产品经理负责调查并根据用户的需求,确定开发何种产品, 选择何种技术、商业模式等。并推动相应产品的开发组织, 她或他还要根据产品的生命周期,协调研发、营销、运营等,确定和组织实施相应的产品策略,以及其他⼀系列相关的产品管理活动。</p><p>在金融服务业，产品经理通常负责管理产品（如信用卡组合）及其盈亏，也决定其业务发展策略。</p><p>产品经理工作内容包含需求收集，需求分析，需求落地，项目跟踪，项目上线，数据跟踪以及对业务人员进行培训，协助运营、销售、客服等开展工作。</p></li><li><h3 id="谈一谈你印象最深的一个项目？"><a href="#谈一谈你印象最深的一个项目？" class="headerlink" title="谈一谈你印象最深的一个项目？"></a>谈一谈你印象最深的一个项目？</h3></li></ol><ol><li><h3 id="谈一谈给你留下印象最深的一件事情？"><a href="#谈一谈给你留下印象最深的一件事情？" class="headerlink" title="谈一谈给你留下印象最深的一件事情？"></a>谈一谈给你留下印象最深的一件事情？</h3></li></ol><ol><li><h3 id="谈一谈你经历过的最大的挫折是什么？"><a href="#谈一谈你经历过的最大的挫折是什么？" class="headerlink" title="谈一谈你经历过的最大的挫折是什么？"></a>谈一谈你经历过的最大的挫折是什么？</h3></li></ol><ol><li><h3 id="谈一谈你的实习经历？"><a href="#谈一谈你的实习经历？" class="headerlink" title="谈一谈你的实习经历？"></a>谈一谈你的实习经历？</h3></li></ol><ol><li><h3 id="在实习中你学到的最有价值的东西是什么？"><a href="#在实习中你学到的最有价值的东西是什么？" class="headerlink" title="在实习中你学到的最有价值的东西是什么？"></a>在实习中你学到的最有价值的东西是什么？</h3></li></ol><ol><li><h3 id="产品设计和产品运营的区别是什么？"><a href="#产品设计和产品运营的区别是什么？" class="headerlink" title="产品设计和产品运营的区别是什么？"></a>产品设计和产品运营的区别是什么？</h3><p><strong>产品是生孩子，运营是养孩子。</strong></p><p>产品的职责，是需求分析、市场分析、竞品调研、用户调研、交互设计、原型及文档等这些“看不见”的工作，基本上，很少出现在产品第一线。基本上围绕的是“需求”。</p><p>而运营，是直接面对用户的一线作战人员，推广、渠道、营销，所做的全是围绕“用户”这个目标来做。</p></li><li><h3 id="你认为商业型产品经理和用户型产品经理的异同是什么？"><a href="#你认为商业型产品经理和用户型产品经理的异同是什么？" class="headerlink" title="你认为商业型产品经理和用户型产品经理的异同是什么？"></a>你认为商业型产品经理和用户型产品经理的异同是什么？</h3><p>用户产品经理主要是研究用户，接触用户，了解用户，开发用户需求，更好的满足用户。而商业产品经理主要是对商业模式的探索，怎样赚钱、盈利。用户的核心是围绕用户。</p></li><li><h3 id="列出你常用的几款手机App，分析其中一款App的优点？"><a href="#列出你常用的几款手机App，分析其中一款App的优点？" class="headerlink" title="列出你常用的几款手机App，分析其中一款App的优点？"></a>列出你常用的几款手机App，分析其中一款App的优点？</h3><h4 id="用户体验要素五要素"><a href="#用户体验要素五要素" class="headerlink" title="用户体验要素五要素"></a>用户体验要素五要素</h4><p>（1）表现层：视觉设计，表现风格</p><ul><li>视觉交互效果较好，操作简单。</li><li>页面干净简单，没有过多的弹窗、banner广告等花里胡哨的东西，适合沉浸式。</li></ul><p>（2）框架层+结构层：页面设计，信息展示</p><ul><li>页面设计和信息展示层级上来说比较清晰，操作简单。</li><li>发现、想法、我的层级清晰，功能划分。</li><li>视觉焦点和信息层级比较清晰，主次分明，符合浏览习惯，用户使用时也不会眼花缭乱。</li></ul><p>（3）范围层：功能列表</p><ul><li>功能上来说比较好，用户体验佳。</li><li>哪些功能解决了你的需求，参考上述第一种逻辑中，哪些功能是比较好的。</li></ul><p>（4）战略层：APP的战略发展方向、商业模式</p><ul><li></li><li></li><li>商业模式：</li></ul></li><li><h3 id="你觉得什么样的产品才算得上是一个成功的产品？"><a href="#你觉得什么样的产品才算得上是一个成功的产品？" class="headerlink" title="你觉得什么样的产品才算得上是一个成功的产品？"></a>你觉得什么样的产品才算得上是一个成功的产品？</h3><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/v2-b9896b02a2b21f8bc54f2ed7342aeb2f_r.jpg" alt="理论"></p></li><li><h3 id="分析一款App的最核心功能、满足的需求、超预期的功能以及竞争优势和发展趋势。"><a href="#分析一款App的最核心功能、满足的需求、超预期的功能以及竞争优势和发展趋势。" class="headerlink" title="分析一款App的最核心功能、满足的需求、超预期的功能以及竞争优势和发展趋势。"></a>分析一款App的最核心功能、满足的需求、超预期的功能以及竞争优势和发展趋势。</h3></li></ol><ol><li><p>如果让你设计一款相册APP，你会怎么设计，列举主要功能。分析竞品，用户需求痛点，画出相关页面的产品原型线框图。</p></li><li><p>最近有没有很感兴趣的产品，为什么会对这款产品感兴趣？</p></li><li><p>你经常浏览的网站有哪些？</p></li><li><p>加入给你一定的启动资金，让你一定时间内做一款O2O业务，你怎么理解这个事情，你将会怎么操作？请阐述一下你的思路。</p></li><li><p>在你平时使用手机的过程中，是否存在某种需求未被满足？</p></li><li><h3 id="你最崇拜的产品经理是谁？为什么会崇拜他-她？"><a href="#你最崇拜的产品经理是谁？为什么会崇拜他-她？" class="headerlink" title="你最崇拜的产品经理是谁？为什么会崇拜他/她？"></a>你最崇拜的产品经理是谁？为什么会崇拜他/她？</h3><p>《人人都是产品经理》苏杰  —- 人人都应该有产品经理的思维，把生活中的事物都当成是产品来看待，而不是单纯字面上的人人都能当产品经理</p><p>阿里系的产品经理。</p></li><li><p>你最近一年最想做的产品是什么？为什么要做这款产品？</p></li><li><p>谈谈你未来的职业规划。</p></li><li><p>一网站开展满100减20活动，有一买家购买商品后发生退货，请设计合理的退款方法。</p></li><li><p>如果你遇到xxx情况，你会怎么解决？</p></li></ol><p>玄武的发展方向主要是云通信方面。针对的用户主要是各企业，重点是得到各企业的资源渠道。</p><p>玄讯CRM在细分行业上更为的专业，玄讯在快消行业一直都是出于领先地位的，很多快消行业的标杆企业都在使用玄讯CRM，就软件本身来说，玄讯相比其他CRM软件，更为的灵活，功能更为的专一，在应有的基本功能基础上，针对行业性的特有功能更为的专业，玄讯提供定制版功能服务，玄讯是值得信赖的。</p><h4 id="玄讯—消费品全联接营销服务云"><a href="#玄讯—消费品全联接营销服务云" class="headerlink" title="玄讯—消费品全联接营销服务云"></a>玄讯—消费品全联接营销服务云</h4><p>玄讯深耕快消、类快消行业移动营销管理领域多年，致力于为企业客户快速构建“以客户为中心”的全渠道数字化营销服务，助力企业营销转型和客户深度运营。</p><p>玄讯基于自主研发的aPaaS平台，以“开发+数据+AI”多平台联合驱动，根据多年快消业务积累形成丰富的CRM业务组件模型，赋能企业精准营销实现强拉新、高转化。现已成为国内专业的移动CRM品牌，形成了以饮料行业、食品行业、日化行业、白酒行业为核心的快消行业全联接营销&amp;服务解决方案，广泛应用于食品、饮料、日用品、白酒、粮油、调味品、医药、农牧、电子通信、专用设备等行业，经过了数十万终端用户的市场验证。</p>]]></content>
      
      
      <categories>
          
          <category> 思考总结 </category>
          
          <category> 面试准备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记14：并发编程之select</title>
      <link href="/2021/09/23/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bselect/"/>
      <url>/2021/09/23/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bselect/</url>
      
        <content type="html"><![CDATA[<h1 id="select"><a href="#select" class="headerlink" title="select"></a>select</h1><p>Linux很早就引入的函数，用来实现<strong>异步非阻塞</strong>的一种方式。</p><p>Go语言直接在语言级别支持select关键字，用于处理异步IO问题。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span> chan1<span class="token punctuation">:</span>  <span class="token comment">//如果chan1成功读到数据，则进行该case处理语句</span>    <span class="token keyword">case</span> chan2 <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment">//如果成功向chan2写入数据，则进行该case处理语句</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>     <span class="token comment">//如果上面都没有成功，则进入default处理流程</span><span class="token punctuation">&#125;</span></code></pre><h2 id="首先体验一下select的用法："><a href="#首先体验一下select的用法：" class="headerlink" title="首先体验一下select的用法："></a>首先体验一下select的用法：</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//select.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span> ch<span class="token punctuation">:</span>    <span class="token comment">//没人写入，阻塞在这里</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"come to read ch!"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token comment">//如果前面的case都没有准备好，默认走到default</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"come to default!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-go" data-language="go"><code class="language-go">come to <span class="token keyword">default</span><span class="token operator">!</span></code></pre><h3 id="创建一个匿名函数协程"><a href="#创建一个匿名函数协程" class="headerlink" title="创建一个匿名函数协程"></a>创建一个匿名函数协程</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//select.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//匿名函数</span>ch <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token comment">//让主协程睡一下  让他主动去执行上面匿名函数的协程</span>         <span class="token comment">//不然到select的时候ch还是不能读</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span> ch<span class="token punctuation">:</span>    <span class="token comment">//没人写入，阻塞在这里</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"come to read ch!"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token comment">//如果前面的case都没有准备好，默认走到default</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"come to default!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-go" data-language="go"><code class="language-go">come to read ch<span class="token operator">!</span></code></pre><h2 id="一个超时控制的经典实现"><a href="#一个超时控制的经典实现" class="headerlink" title="一个超时控制的经典实现"></a>一个超时控制的经典实现</h2><pre class="language-go" data-language="go"><code class="language-go">timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span>   <span class="token comment">//等待1秒钟</span>    timeout <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//然后我们把timeout这个channel利用起来</span><span class="token keyword">select</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span> ch<span class="token punctuation">:</span>    <span class="token comment">//从ch中读取到数据</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span> timeout<span class="token punctuation">:</span>     <span class="token comment">//一直没有从ch中读取到数据，但从timeout中读取到了数据</span><span class="token punctuation">&#125;</span></code></pre><p>实现例子如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>timeout <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token comment">//time.Sleep(time.Second)    //让主协程睡一下  让他主动去执行上面匿名函数的协程</span>         <span class="token comment">//不然到select的时候ch还是不能读</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span> ch<span class="token punctuation">:</span>    <span class="token comment">//没人写入，阻塞在这里</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"come to read ch!"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span> timeout<span class="token punctuation">:</span>      <span class="token comment">//如果前面的case都没有准备好，默认走到default</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"come to timeout!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>一秒钟的超时控制，如果没有ch写入，也会进入case &lt;- timeout。</p><h3 id="time-After方法进行超时控制"><a href="#time-After方法进行超时控制" class="headerlink" title="time.After方法进行超时控制"></a>time.After方法进行超时控制</h3><p>没有运用协程。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"come to read ch!"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"come to timeout!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"end of code!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACwing题库刷题</title>
      <link href="/2021/09/22/1-ACwing%E9%A2%98%E5%BA%93%E5%88%B7%E9%A2%98/"/>
      <url>/2021/09/22/1-ACwing%E9%A2%98%E5%BA%93%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="ACwing算法基础课题目"><a href="#ACwing算法基础课题目" class="headerlink" title="ACwing算法基础课题目"></a>ACwing算法基础课题目</h1><ul><li><h2 id=""><a href="#" class="headerlink" title=""></a><a href="/2021/09/01/ACwing%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E5%BF%AB%E6%8E%92%EF%BC%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/" title="ACwing算法笔记一：快排，归并排序">ACwing算法笔记一：快排，归并排序</a></h2></li><li><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="/2021/09/02/ACwing%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9A%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%EF%BC%8C%E6%B5%AE%E7%82%B9%E6%95%B0%E4%BA%8C%E5%88%86/" title="ACwing算法笔记二：整数二分，浮点数二分">ACwing算法笔记二：整数二分，浮点数二分</a></h2></li><li><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><a href="/2021/10/03/ACwing%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/" title="ACwing算法笔记三：高精度加减乘除">ACwing算法笔记三：高精度加减乘除</a></h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> ACwing算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 内存分配之逃逸分析</title>
      <link href="/2021/09/22/Golang%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B9%8B%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"/>
      <url>/2021/09/22/Golang%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B9%8B%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-内存分配之逃逸分析"><a href="#Golang-内存分配之逃逸分析" class="headerlink" title="Golang 内存分配之逃逸分析"></a>Golang 内存分配之逃逸分析</h1><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><div class="tip warning faa-horizontal animated-hover"><p>面试问题</p></div><p>了解golang的<strong>内存逃逸</strong>吗？什么情况下会发生内存逃逸？如何避免内存逃逸？</p><h2 id="答题思路"><a href="#答题思路" class="headerlink" title="答题思路"></a>答题思路</h2><div class="tip key faa-horizontal animated-hover"><p>答题思路</p></div><p><code>golang程序变量</code>会携带有一组校验数据，用来证明它的整个生命周期是否在运行时完全可知。如果变量通过了这些校验，它就可以在<code>栈上</code>分配。否则就说它 <code>逃逸</code> 了，必须在<code>堆上分配</code>。</p><p>能引起变量逃逸到堆上的<strong>典型情况</strong>：</p><ul><li><strong>在方法内把局部变量指针返回</strong> 局部变量原本应该在栈中分配，在栈中回收。但是由于返回时被外部引用，因此其生命周期大于栈，则溢出。</li><li><strong>发送指针或带有指针的值到 channel 中。</strong> 在编译时，是没有办法知道哪个 goroutine 会在 channel 上接收数据。所以编译器没法知道变量什么时候才会被释放。</li><li><strong>在一个切片上存储指针或带指针的值。</strong> 一个典型的例子就是 []*string 。这会导致切片的内容逃逸。尽管其后面的数组可能是在栈上分配的，但其引用的值一定是在堆上。</li><li><strong>slice 的背后数组被重新分配了，因为 append 时可能会超出其容量( cap )。</strong> slice 初始化的地方在编译时是可以知道的，它最开始会在栈上分配。如果切片背后的存储要基于运行时的数据进行扩充，就会在堆上分配。</li><li><p><strong>在 interface 类型上调用方法。</strong> 在 interface 类型上调用方法都是动态调度的 —— 方法的真正实现只能在运行时知道。想像一个 io.Reader 类型的变量 r , 调用 r.Read(b) 会使得 r 的值和切片b 的背后存储都逃逸掉，所以会在堆上分配。</p></li><li><p>通过一个例子加深理解，接下来尝试下怎么通过 <code>go build -gcflags=-m</code> 查看逃逸的情况。</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> s <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">// 这是上面提到的 "在方法内把局部变量指针返回" 的情况</span><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>A <span class="token punctuation">&#123;</span> a <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>  a<span class="token punctuation">.</span>s <span class="token operator">=</span> s <span class="token keyword">return</span> a <span class="token comment">//返回局部变量a,在C语言中妥妥野指针，但在go则ok，但a会逃逸到堆</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> a <span class="token operator">:=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> b <span class="token operator">:=</span> a<span class="token punctuation">.</span>s <span class="token operator">+</span> <span class="token string">" world"</span> c <span class="token operator">:=</span> b <span class="token operator">+</span> <span class="token string">"!"</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>执行<code>go build -gcflags=-m main.go</code></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> build <span class="token operator">-</span>gcflags<span class="token operator">=</span><span class="token operator">-</span>m main<span class="token punctuation">.</span><span class="token keyword">go</span># command<span class="token operator">-</span>line<span class="token operator">-</span>arguments<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline foo<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> inlining call to foo<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> inlining call to fmt<span class="token punctuation">.</span>Println<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>folders<span class="token operator">/</span><span class="token number">45</span><span class="token operator">/</span>qx9lfw2s2zzgvhzg3mtzkwzc0000gn<span class="token operator">/</span>T<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>build409982591<span class="token operator">/</span>b001<span class="token operator">/</span>_gomod_<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline init<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> leaking param<span class="token punctuation">:</span> s<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> <span class="token function">new</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> escapes to heap<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> io<span class="token punctuation">.</span><span class="token function">Writer</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span> escapes to heap<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> c escapes to heap<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span> b <span class="token operator">+</span> <span class="token string">"!"</span> escapes to heap<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> main <span class="token function">new</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> does not escape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span> main a<span class="token punctuation">.</span>s <span class="token operator">+</span> <span class="token string">" world"</span> does not escape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> main <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> literal does not escape<span class="token operator">&lt;</span>autogenerated<span class="token operator">></span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">close</span> <span class="token punctuation">.</span>this does not escape</code></pre><ul><li><code>./main.go:8:10: new(A) escapes to heap</code> 说明 <code>new(A)</code> 逃逸了,符合上述提到的常见情况中的第一种。</li><li><code>./main.go:14:11: main a.s + &quot; world&quot; does not escape</code> 说明 <code>b</code> 变量没有逃逸，因为它只在方法内存在，会在方法结束时被回收。</li><li><code>./main.go:15:9: b + &quot;!&quot; escapes to heap</code> 说明 <code>c</code> 变量逃逸，通过<code>fmt.Println(a ...interface&#123;&#125;)</code>打印的变量，都会发生逃逸，感兴趣的朋友可以去查查为什么。</li></ul><h2 id="整体解释"><a href="#整体解释" class="headerlink" title="整体解释"></a>整体解释</h2><div class="tip home faa-horizontal animated-hover"><p>整体解释</p></div><p>在C/C++开发中，动态分配内存(new/malloc)需要我们手动释放资源。这样做的好处是，需要申请多少内存空间可以很好的掌握怎么分配。但是这有个缺点，如果忘记释放内存，则会导致内存泄漏。在很多高级语言中(python/Go/java)都加上了垃圾回收机制。</p><p><strong>golang 的内存分配之堆和栈</strong></p><p>Go的垃圾回收，让堆和栈堆程序员保持透明。真正解放了程序员的双手，让他们可以专注于业务，“高效”地完成代码编写。把那些内存管理的复杂机制交给编译器。</p><p>栈 可以简单得理解成一次函数调用内部申请到的内存，它们会随着函数的返回把内存还给系统。下面来看看一个例子：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>temp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span></code></pre><p>上面的例子，内函数内部申请的临时变量，即使你是用make申请到的内存，如果发现在退出函数后没有用了，那么就把丢到栈上，毕竟栈上的内存分配比堆上快很多。</p><p>下面在看看一个堆的例子：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">&#125;</span></code></pre><p>而上面这段代码，申请的代码和上面的一模一样，但是申请后作为返回值返回了，编译器会认为在退出函数之后还有其他地方在引用，当函数返回之后并不会将其内存归还。那么就申请到堆里。</p><p>如果变量都分配到堆上，堆不像栈可以自动清理。它会引起Go频繁地进行垃圾回收，而垃圾回收会占用比较大的系统开销。</p><p><strong>堆和栈相比</strong></p><p>堆适合不可预知的大小的内存分配。但是为此付出的代价是分配速度较慢，而且会形成内存碎片。</p><p>栈内存分配则会非常快，栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块。之后要通过垃圾回收才能释放。</p><p><strong>逃逸分析</strong></p><p>逃逸分析是一种确定指针动态范围的方法。简单来说就是分析在程序的哪些地方可以访问到该指针。</p><p>简单来说，编译器会根据变量是否被外部引用来决定是否逃逸：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">1</span>、如果函数外部没有引用，则优先放到栈中；<span class="token number">2</span>、如果函数外部存在引用，则必定放到堆中；</code></pre><p>对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。</p><p>注意：go 在编译阶段确立逃逸，并不是在运行时。</p><p><strong>指针逃逸</strong></p><p>提问：函数传递指针真的比传值效率高吗？</p><p>我们知道传递指针可以减少底层值的拷贝，可以提高效率，但是如果拷贝的数据量小，由于指针传递会产生逃逸，可能会使用堆，也可能会增加GC的负担，所以传递指针不一定是高效的。</p><p>在官网 (<a href="https://link.zhihu.com/?target=http%3A//golang.org">golang.org</a>) FAQ 上有一个关于变量分配的问题如下：</p><pre class="language-go" data-language="go"><code class="language-go">From a correctness standpoint<span class="token punctuation">,</span> you don’t need to know<span class="token punctuation">.</span> Each variable in Go exists as long as there are references to it<span class="token punctuation">.</span> The storage location chosen by the implementation is irrelevant to the semantics of the language<span class="token punctuation">.</span>The storage location does have an effect on writing efficient programs<span class="token punctuation">.</span> When possible<span class="token punctuation">,</span> the Go compilers will allocate variables that are local to a function in that function’s stack frame<span class="token punctuation">.</span>However<span class="token punctuation">,</span> <span class="token keyword">if</span> the compiler cannot prove that the variable is not referenced after the function returns<span class="token punctuation">,</span> then the compiler must allocate the variable on the garbage<span class="token operator">-</span>collected heap to avoid dangling pointer errors<span class="token punctuation">.</span> Also<span class="token punctuation">,</span> <span class="token keyword">if</span> a local variable is very large<span class="token punctuation">,</span> it might <span class="token builtin">make</span> more sense to store it on the heap rather than the stack<span class="token punctuation">.</span>In the current compilers<span class="token punctuation">,</span> <span class="token keyword">if</span> a variable has its address taken<span class="token punctuation">,</span> that variable is a candidate <span class="token keyword">for</span> allocation on the heap<span class="token punctuation">.</span> However<span class="token punctuation">,</span> a basic escape analysis recognizes some cases when such variables will not live past the <span class="token keyword">return</span> from the function and can reside on the stack<span class="token punctuation">.</span></code></pre><p>翻译如下：</p><p>如何得知变量是分配在栈（stack）上还是堆（heap）上？</p><p>准确地说，你并不需要知道。Golang 中的变量只要被引用就一直会存活，存储在堆上还是栈上由内部实现决定而和具体的语法没有关系。</p><p>知道变量的存储位置确实和效率编程有关系。如果可能，Golang 编译器会将函数的局部变量分配到函数栈帧（stack frame）上。 然而，如果编译器不能确保变量在函数 return之后不再被引用，编译器就会将变量分配到堆上。而且，如果一个局部变量非常大，那么它也应该被分配到堆上而不是栈上。</p><p>当前情况下，如果一个变量被取地址，那么它就有可能被分配到堆上。然而，还要对这些变量做逃逸分析，如果函数return之后，变量不再被引用，则将其分配到栈上。</p><p>Go可以返回局部变量指针，这其实是一个典型的变量逃逸案例，示例代码如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Name <span class="token builtin">string</span>    Age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">StudentRegister</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Student <span class="token punctuation">&#123;</span>    s <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span> <span class="token comment">//局部变量s逃逸到堆</span>    s<span class="token punctuation">.</span>Name <span class="token operator">=</span> name    s<span class="token punctuation">.</span>Age <span class="token operator">=</span> age    <span class="token keyword">return</span> s<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">StudentRegister</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>虽然在函数 StudentRegister() 内部 s 为局部变量，其值通过函数返回值返回，s 本身为一指针，其指向的内存地址不会是栈而是堆，这就是典型的逃逸案例。</p><p>终端运行命令查看逃逸分析日志：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> build <span class="token operator">-</span>gcflags<span class="token operator">=</span><span class="token operator">-</span>m</code></pre><p>指令集 -gcflags 用于将标识参数传递给 Go 编译器。</p><p>-m 会打印出逃逸分析的优化策略。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211009164927267.png" alt="第九行内存分配发生了逃逸现象"></p><p>可见在StudentRegister()函数中，也即代码第9行显示”escapes to heap”，代表该行内存分配发生了逃逸现象。</p><p><strong>栈空间不足逃逸</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> index    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面代码主函数中分配了一个1000个长度的切片，是否逃逸取决于栈空间是否足够大。 直接查看编译提示，如下：</p><p>终端运行命令查看逃逸分析日志：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211009165226316.png" alt="栈空间足够，没有发生逃逸"></p><p>根据上面的信息，没有发生逃逸。分配了一个1000的长度还不足以发生逃逸现象。然后就x10倍吧，再看看情况。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> index    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>终端运行命令查看逃逸分析日志：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211009165416687.png" alt="发生逃逸"></p><p>当切片长度扩大到10000时就会逃逸。实际上当栈空间不足以存放当前对象时或无法判断当前切片长度时会将对象分配到堆中。</p><p><strong>动态类型逃逸</strong></p><p>很多函数参数为interface类型。比如：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Printf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Sprintf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">Fprint</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Print</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><p>编译期间很难确定其参数的具体类型，也能产生逃逸。</p><p>如下代码所示：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello 还真不太明白"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"hello hackerwu"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20211009165612409.png" alt=""></p><p><strong>逃逸分析的作用是什么呢？</strong></p><p>1、逃逸分析的好处是为了减少gc的压力，不逃逸的对象分配在栈上，当函数返回时就回收了资源，不需要gc标记清除。</p><p>2、逃逸分析完后可以确定哪些变量可以分配在栈上，栈的分配比堆快，性能好(逃逸的局部变量会在堆上分配 ,而没有发生逃逸的则有编译器在栈上分配)。</p><p>3、同步消除，如果你定义的对象的方法上有同步锁，但在运行时，却只有一个线程在访问，此时逃逸分析后的机器码，会去掉同步锁运行。</p><p><strong>总结</strong></p><p>1、堆上动态分配内存比栈上静态分配内存，开销大很多。</p><p>2、变量分配在栈上需要能在编译期确定它的作用域，否则会分配到堆上。</p><p>3、Go编译器会在编译期对考察变量的作用域，并作一系列检查，如果它的作用域在运行期间对编译器一直是可知的，那么就会分配到栈上。简单来说，编译器会根据变量是否被外部引用来决定是否逃逸。</p><p>4、对于Go程序员来说，编译器的这些逃逸分析规则不需要掌握，我们只需通过go build -gcflags ‘-m’命令来观察变量逃逸情况就行了。</p><p>5、不要盲目使用变量的指针作为函数参数，虽然它会减少复制操作。但其实当参数为变量自身的时候，复制是在栈上完成的操作，开销远比变量逃逸后动态地在堆上分配内存少的多。</p><p>6、逃逸分析在编译阶段完成的。</p><p><strong>如何分析程序是否发生内存逃逸</strong></p><p>build时添加<code>-gcflags=-m</code> 选项可分析内存逃逸情况,比如输出<code>./main.go:3:6: moved to heap: x</code> 表示局部变量x逃逸到了堆上。</p><h2 id="内存逃逸发生时机"><a href="#内存逃逸发生时机" class="headerlink" title="内存逃逸发生时机"></a>内存逃逸发生时机</h2><div class="tip sync faa-horizontal animated-hover"><p>内存逃逸发生时机</p></div><ul><li>向 <code>channel</code> 发送指针数据。因为在编译时，不知道channel中的数据会被哪个 goroutine 接收，因此编译器没法知道变量什么时候才会被释放，因此只能放入堆中。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    x <span class="token operator">:=</span> <span class="token number">5</span>    ch <span class="token operator">&lt;-</span> x  <span class="token comment">// x不发生逃逸，因为只是复制的值</span>    ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    y <span class="token operator">:=</span> <span class="token number">5</span>    py <span class="token operator">:=</span> <span class="token operator">&amp;</span>y    ch1 <span class="token operator">&lt;-</span> py  <span class="token comment">// y逃逸，因为y地址传入了chan中，编译时无法确定什么时候会被接收，所以也无法在函数返回后回收y</span><span class="token punctuation">&#125;</span></code></pre><ul><li>局部变量在函数调用结束后还被其他地方使用，比如函数返回局部变量指针或闭包中引用包外的值。因为变量的生命周期可能会超过函数周期，因此只能放入堆中。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> Foo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x <span class="token operator">:=</span> <span class="token number">5</span>            <span class="token comment">// x发生逃逸，因为在Foo调用完成后，被闭包函数用到，还不能回收，只能放到堆上存放</span>    <span class="token keyword">return</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    inner <span class="token operator">:=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>在 slice 或 map 中存储指针。比如 []*string，其后面的数组可能是在栈上分配的，但其引用的值还是在堆上。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> x <span class="token builtin">int</span>    x <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> ls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">int</span>    ls <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span>        <span class="token comment">// x发生逃逸，ls存储的是指针，所以ls底层的数组虽然在栈存储，但x本身却是逃逸到堆上</span><span class="token punctuation">&#125;</span></code></pre><ul><li>切片扩容后长度太大，导致栈空间不足，逃逸到堆上。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> index    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>在 interface 类型上调用方法。 在 interface 类型上调用方法时会把interface变量使用堆分配， 因为方法的真正实现只能在运行时知道。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">type</span> foo <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">fooFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> foo1 <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f1 foo1<span class="token punctuation">)</span> <span class="token function">fooFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> f foo    f <span class="token operator">=</span> foo1<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    f<span class="token punctuation">.</span><span class="token function">fooFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 调用方法时，f发生逃逸，因为方法是动态分配的</span><span class="token punctuation">&#125;</span></code></pre><h2 id="避免内存逃逸"><a href="#避免内存逃逸" class="headerlink" title="避免内存逃逸"></a>避免内存逃逸</h2><div class="tip cogs faa-horizontal animated-hover"><p>避免内存逃逸</p></div><ul><li>对于小型的数据，使用传值而不是传指针，避免内存逃逸。</li><li>避免使用长度不固定的slice切片，在编译期无法确定切片长度，只能将切片使用堆分配。</li><li>interface调用方法会发生内存逃逸，在热点代码片段，谨慎使用。</li></ul><ol><li>go 中的接口类型的方法调用是动态调度，因此不能够在编译阶段确定，所有类型结构转换成接口的过程会涉及到内存逃逸的情况发生。如果对于性能要求比较高且访问频次比较高的函数调用，应该尽量避免使用接口类型。</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript">type Stringer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> string<span class="token punctuation">&#125;</span><span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:</span><span class="token operator">=</span> any<span class="token punctuation">.</span><span class="token punctuation">(</span>Stringer<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol><li><p>由于切片一般都是使用在函数传递的场景下，而且切片在 append 的时候可能会涉及到重新分配内存，如果切片在编译期间的大小不能够确认或者大小超出栈的限制，多数情况下都会分配到堆上。</p></li><li><p>减少外部引用, 如指针. </p></li></ol><p><strong>unsafe方法</strong></p><ul><li>在<code>runtime/stubs.go:133</code>有个函数叫<code>noescape</code>。<code>noescape</code>可以在逃逸分析中<strong>隐藏一个指针</strong>。让这个指针在逃逸分析中<strong>不会被检测为逃逸</strong>。</li></ul><pre class="language-go" data-language="go"><code class="language-go"> <span class="token comment">// noescape hides a pointer from escape analysis.  noescape is</span> <span class="token comment">// the identity function but escape analysis doesn't think the</span> <span class="token comment">// output depends on the input.  noescape is inlined and currently</span> <span class="token comment">// compiles down to zero instructions.</span> <span class="token comment">// USE CAREFULLY!</span> <span class="token comment">//go:nosplit</span> <span class="token keyword">func</span> <span class="token function">noescape</span><span class="token punctuation">(</span>p unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">&#123;</span>     x <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>     <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>x <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>通过一个例子加深理解，接下来尝试下怎么通过 <code>go build -gcflags=-m</code> 查看逃逸的情况。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"unsafe"</span><span class="token punctuation">)</span><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> S <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>A<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span>f<span class="token punctuation">.</span>S<span class="token punctuation">&#125;</span><span class="token keyword">type</span> ATrick <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> S unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>ATrick<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">NewA</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> A <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> A<span class="token punctuation">&#123;</span>S<span class="token punctuation">:</span> <span class="token operator">&amp;</span>s<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">NewATrick</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> ATrick <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> ATrick<span class="token punctuation">&#123;</span>S<span class="token punctuation">:</span> <span class="token function">noescape</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">noescape</span><span class="token punctuation">(</span>p unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">&#123;</span> x <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>x <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token operator">:=</span> <span class="token string">"hello"</span> f1 <span class="token operator">:=</span> <span class="token function">NewA</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> f2 <span class="token operator">:=</span> <span class="token function">NewATrick</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> s1 <span class="token operator">:=</span> f1<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> s2 <span class="token operator">:=</span> f2<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token boolean">_</span> <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">&#125;</span></code></pre><p>执行<code>go build -gcflags=-m main.go</code></p><pre class="language-go" data-language="go"><code class="language-go">$<span class="token keyword">go</span> build <span class="token operator">-</span>gcflags<span class="token operator">=</span><span class="token operator">-</span>m main<span class="token punctuation">.</span><span class="token keyword">go</span># command<span class="token operator">-</span>line<span class="token operator">-</span>arguments<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline <span class="token punctuation">(</span><span class="token operator">*</span>A<span class="token punctuation">)</span><span class="token punctuation">.</span>String<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline <span class="token punctuation">(</span><span class="token operator">*</span>ATrick<span class="token punctuation">)</span><span class="token punctuation">.</span>String<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline NewA<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline noescape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline NewATrick<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">:</span> inlining call to noescape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">36</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline main<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> inlining call to NewA<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span> inlining call to NewATrick<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span> inlining call to noescape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">:</span> inlining call to <span class="token punctuation">(</span><span class="token operator">*</span>A<span class="token punctuation">)</span><span class="token punctuation">.</span>String<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">:</span> inlining call to <span class="token punctuation">(</span><span class="token operator">*</span>ATrick<span class="token punctuation">)</span><span class="token punctuation">.</span>String<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>folders<span class="token operator">/</span><span class="token number">45</span><span class="token operator">/</span>qx9lfw2s2zzgvhzg3mtzkwzc0000gn<span class="token operator">/</span>T<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>build763863171<span class="token operator">/</span>b001<span class="token operator">/</span>_gomod_<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> can inline init<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span> leaking param<span class="token punctuation">:</span> f to result ~r0 level<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span> leaking param<span class="token punctuation">:</span> f to result ~r0 level<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>s escapes to heap<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span> moved to heap<span class="token punctuation">:</span> s<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">:</span> NewATrick s does not escape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">45</span><span class="token punctuation">:</span> NewATrick <span class="token operator">&amp;</span>s does not escape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span> noescape p does not escape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span> main <span class="token operator">&amp;</span>s does not escape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span> main <span class="token operator">&amp;</span>s does not escape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> main f1 does not escape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span> main f2 does not escape<span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span> main s1 <span class="token operator">+</span> s2 does not escape</code></pre><p>其中主要看中间一小段</p><pre class="language-none"><code class="language-none">.&#x2F;main.go:24:16: &amp;s escapes to heap    &#x2F;&#x2F;这个是NewA中的，逃逸了.&#x2F;main.go:23:13: moved to heap: s.&#x2F;main.go:27:18: NewATrick s does not escape &#x2F;&#x2F; NewATrick里的s的却没逃逸.&#x2F;main.go:28:45: NewATrick &amp;s does not escape</code></pre><p><strong>解释</strong></p><ul><li>上段代码对<code>A</code>和<code>ATrick</code>同样的功能有两种实现：他们包含一个 <code>string</code> ，然后用 <code>String()</code> 方法返回这个字符串。但是从逃逸分析看<code>ATrick</code> 版本没有逃逸。</li><li><code>noescape()</code> 函数的作用是遮蔽输入和输出的依赖关系。使编译器不认为 <code>p</code> 会通过 <code>x</code> 逃逸， 因为 <code>uintptr()</code> 产生的引用是编译器无法理解的。</li><li>内置的 <code>uintptr</code> 类型是一个真正的指针类型，但是在编译器层面，它只是一个存储一个 <code>指针地址</code> 的 <code>int</code> 类型。代码的最后一行返回 <code>unsafe.Pointer</code> 也是一个 <code>int</code>。</li><li><code>noescape()</code> 在 <code>runtime</code> 包中使用 <code>unsafe.Pointer</code> 的地方被大量使用。如果作者清楚被 <code>unsafe.Pointer</code> 引用的数据肯定不会被逃逸，但编译器却不知道的情况下，这是很有用的。</li></ul><p><strong>参考文章：</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/113643434">https://zhuanlan.zhihu.com/p/113643434</a></li><li><a href="https://segmentfault.com/a/1190000039843497">https://segmentfault.com/a/1190000039843497</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDY2MDk4Mw==&amp;mid=2247486360&amp;idx=1&amp;sn=62add4f7def9638a0a1c83c1672992c5&amp;source=41#wechat_redirect">https://mp.weixin.qq.com/s?__biz=Mzg5NDY2MDk4Mw==&amp;mid=2247486360&amp;idx=1&amp;sn=62add4f7def9638a0a1c83c1672992c5&amp;source=41#wechat_redirect</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDY2MDk4Mw==&amp;mid=2247486361&amp;idx=1&amp;sn=7da2eba5c4190bdc3797a1299e1dc9c2&amp;source=41#wechat_redirect">https://mp.weixin.qq.com/s?__biz=Mzg5NDY2MDk4Mw==&amp;mid=2247486361&amp;idx=1&amp;sn=7da2eba5c4190bdc3797a1299e1dc9c2&amp;source=41#wechat_redirect</a></li><li><a href="https://cloud.tencent.com/developer/article/1732263">https://cloud.tencent.com/developer/article/1732263</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 思考总结 </category>
          
          <category> Golang面试题整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 面试题整理</title>
      <link href="/2021/09/22/1-Golang-%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
      <url>/2021/09/22/1-Golang-%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、面试题"><a href="#一、面试题" class="headerlink" title="一、面试题"></a>一、面试题</h1><ul><li><h2 id=""><a href="#" class="headerlink" title=""></a><a href="/2021/09/22/Golang%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B9%8B%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/" title="Golang 内存分配之逃逸分析">Golang 内存分配之逃逸分析</a></h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> 思考总结 </category>
          
          <category> Golang面试题整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang实战流媒体视频网站笔记6：API之http handler层</title>
      <link href="/2021/09/20/Golang%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B06%EF%BC%9AAPI%E4%B9%8Bhttp-handler%E5%B1%82/"/>
      <url>/2021/09/20/Golang%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B06%EF%BC%9AAPI%E4%B9%8Bhttp-handler%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="API设计之http-handler层"><a href="#API设计之http-handler层" class="headerlink" title="API设计之http handler层"></a>API设计之http handler层</h1><pre class="language-go" data-language="go"><code class="language-go">handler <span class="token operator">-</span><span class="token operator">></span> validation<span class="token punctuation">&#123;</span><span class="token number">1.</span>request<span class="token punctuation">,</span><span class="token number">2.</span>user<span class="token punctuation">&#125;</span> <span class="token operator">-</span><span class="token operator">></span> business logic <span class="token operator">-</span><span class="token operator">></span> reponse <span class="token punctuation">.</span></code></pre><p><strong>四个步骤：</strong></p><ol><li>handler 是request进来的第一个处理的模块</li><li>之后会做validation 校验，第一个校验request是否合法，第二个是校验用户是不是已经注册过的合法用户</li><li>做逻辑处理</li><li>得出最后的结果 reponse</li></ol><h2 id="validation（检验）"><a href="#validation（检验）" class="headerlink" title="validation（检验）"></a>validation（检验）</h2><h3 id="1-数据结构data-model"><a href="#1-数据结构data-model" class="headerlink" title="1.数据结构data model."></a>1.数据结构data model.</h3><h3 id="2-一旦出现问题返回的错误error-handling"><a href="#2-一旦出现问题返回的错误error-handling" class="headerlink" title="2.一旦出现问题返回的错误error handling."></a>2.一旦出现问题返回的错误error handling.</h3><p>在文件夹defs里面加入apidef.go 和errs.go</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//apidef.go</span><span class="token keyword">package</span> defs<span class="token comment">//requsets</span><span class="token keyword">type</span> UserCreadential <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>Username <span class="token builtin">string</span> <span class="token string">`json:"user_name"`</span>Pwd <span class="token builtin">string</span> <span class="token string">`json:"pwd"`</span><span class="token punctuation">&#125;</span><span class="token comment">//Go里面的原生方法处理json的一种方式</span><span class="token comment">//是在struct打Tag的方式，Tag的名称是user_name ，Tag的属性是json</span><span class="token comment">//在序列化和反序列化json的时候会自动转换成我们想要的东西</span><span class="token comment">//&#123;</span><span class="token comment">//user_name: xxx,</span><span class="token comment">//pwd: xxx</span><span class="token comment">//&#125;</span></code></pre><h4 id="Go里面的原生方法处理json的一种方式"><a href="#Go里面的原生方法处理json的一种方式" class="headerlink" title="Go里面的原生方法处理json的一种方式"></a>Go里面的原生方法处理json的一种方式</h4><p>是在struct打Tag的方式，Tag的名称是user_name ，Tag的属性是json</p><p>在序列化和反序列化json的时候会自动转换成我们想要的东西</p><p>{</p><p>​    user_name: xxx,</p><p>​    pwd: xxx</p><p>}</p><p>在errs.go里面</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> defs<span class="token keyword">type</span> Err <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>Error <span class="token builtin">string</span> <span class="token string">`json:"error"`</span>ErrorCode <span class="token builtin">string</span> <span class="token string">`json:"error_code"`</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> ErrorResponse <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>HttpSC <span class="token builtin">int</span>Error Err<span class="token punctuation">&#125;</span><span class="token keyword">var</span> <span class="token punctuation">(</span>ErrorRequestBodyParseFailed <span class="token operator">=</span> ErrorResponse<span class="token punctuation">&#123;</span>HttpSC<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>Error<span class="token punctuation">:</span>Err<span class="token punctuation">&#123;</span>Error<span class="token punctuation">:</span><span class="token string">"Request body is not correct"</span><span class="token punctuation">,</span>ErrorCode<span class="token punctuation">:</span> <span class="token string">"001"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//request传进来的数据是没办法解析的</span>    <span class="token comment">//嵌套的对象</span>ErrorNotAuthUser <span class="token operator">=</span> ErrorResponse<span class="token punctuation">&#123;</span>HttpSC<span class="token punctuation">:</span> <span class="token number">401</span><span class="token punctuation">,</span>Error<span class="token punctuation">:</span>Err<span class="token punctuation">&#123;</span>Error<span class="token punctuation">:</span> <span class="token string">"User authentication failed"</span><span class="token punctuation">,</span>ErrorCode<span class="token punctuation">:</span> <span class="token string">"002"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//验证不通过，用户是不存在的</span><span class="token punctuation">)</span></code></pre><h3 id="然后把第三步的business-logic放在handler里面，然后通过handler去调用dbops"><a href="#然后把第三步的business-logic放在handler里面，然后通过handler去调用dbops" class="headerlink" title="然后把第三步的business logic放在handler里面，然后通过handler去调用dbops"></a>然后把第三步的business logic放在handler里面，然后通过handler去调用dbops</h3><p>在dbops文件夹里面创建api.go</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//api.go</span><span class="token keyword">package</span> dbops<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token punctuation">)</span><span class="token comment">//内部方法</span><span class="token keyword">func</span> <span class="token function">openConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//Web方法 创建用户</span><span class="token keyword">func</span> <span class="token function">AddUserCrential</span><span class="token punctuation">(</span>loginName <span class="token builtin">string</span><span class="token punctuation">,</span>pwd <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">GetUserCredential</span><span class="token punctuation">(</span>loginName <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="然后在大的API文件夹里面创建response-go"><a href="#然后在大的API文件夹里面创建response-go" class="headerlink" title="然后在大的API文件夹里面创建response.go"></a>然后在大的API文件夹里面创建response.go</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//response.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"io"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">sendErrorResponse</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">sendNormalResponse</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="整个分层结构"><a href="#整个分层结构" class="headerlink" title="整个分层结构"></a>整个分层结构</h3><p>从main函数开始，然后进到handler，然后handler调用dbops，从dbops拿到信息，然后做进一步处理，在做进一步处理的过程中用到defs里面的比如消息的定义，一起组成response，最后调取response，将response发出来。</p><p>符合ERSTful API在架构上的建议。</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Go语言实战流媒体视频网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang实战流媒体视频网站笔记5：流媒体网站架构以及API模块的实现3</title>
      <link href="/2021/09/20/Golang%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B05%EF%BC%9A%E6%B5%81%E5%AA%92%E4%BD%93%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E4%BB%A5%E5%8F%8AAPI%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%9E%E7%8E%B03/"/>
      <url>/2021/09/20/Golang%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B05%EF%BC%9A%E6%B5%81%E5%AA%92%E4%BD%93%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E4%BB%A5%E5%8F%8AAPI%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%9E%E7%8E%B03/</url>
      
        <content type="html"><![CDATA[<h1 id="API设计：用户资源"><a href="#API设计：用户资源" class="headerlink" title="API设计：用户资源"></a>API设计：用户资源</h1><ul><li><h3 id="获取资源列表"><a href="#获取资源列表" class="headerlink" title="获取资源列表"></a>获取资源列表</h3></li></ul><pre class="language-none"><code class="language-none">List all videos: URL:&#x2F;user&#x2F;:username&#x2F;videos Method:GET,SC:200,400,500</code></pre><ul><li><h3 id="获取一个资源"><a href="#获取一个资源" class="headerlink" title="获取一个资源"></a>获取一个资源</h3></li></ul><pre class="language-none"><code class="language-none">Get one video: URL:&#x2F;user&#x2F;:username&#x2F;videos&#x2F;:vid-id Method:GET,SC:200,400,500</code></pre><ul><li><h3 id="删除一个资源"><a href="#删除一个资源" class="headerlink" title="删除一个资源"></a>删除一个资源</h3></li></ul><pre class="language-none"><code class="language-none">Delete one video: URL:&#x2F;user&#x2F;:username&#x2F;videos&#x2F;:vid-id Method:DELETE,SC:204,400,401,403,500</code></pre><h1 id="API设计：评论"><a href="#API设计：评论" class="headerlink" title="API设计：评论"></a>API设计：评论</h1><ul><li><h3 id="展示评论"><a href="#展示评论" class="headerlink" title="展示评论"></a>展示评论</h3></li></ul><pre class="language-none"><code class="language-none">Show comments: URL:&#x2F;videos&#x2F;:vid-id&#x2F;comments Method:GET,SC:200,400,500</code></pre><ul><li><h3 id="创建一个评论"><a href="#创建一个评论" class="headerlink" title="创建一个评论"></a>创建一个评论</h3></li></ul><pre class="language-none"><code class="language-none">Post a comment: URL:&#x2F;videos&#x2F;:vid-id&#x2F;comments Method:POST,SC:201,400,500</code></pre><ul><li><h3 id="删除一个评论"><a href="#删除一个评论" class="headerlink" title="删除一个评论"></a>删除一个评论</h3></li></ul><pre class="language-none"><code class="language-none">Delete a comment: URL:&#x2F;videos&#x2F;:vid-id&#x2F;comment&#x2F;:comment-id Method:DELETE,SC:204,400,401,403,500           &#x2F;&#x2F;只有poster可以删</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210920233312657.png" alt="API模块设计"></p><p><strong>用户（user/:username）、资源（user/:username/videos/:vid-id）、评论（/videos/:vid-id/comments/:comment-id）互相有从属关系</strong></p><p>在很多Web APP上都是REST-ful风格API。</p><h3 id="三个遵守："><a href="#三个遵守：" class="headerlink" title="三个遵守："></a>三个遵守：</h3><ol><li>资源用URL来定位</li><li><p>不同的操作用不同的Method来表示</p></li><li><p>返回码严格按照HTTP协议所定义的返回码</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Go语言实战流媒体视频网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言实战流媒体视频网站笔记4：流媒体网站架构以及API模块的实现2</title>
      <link href="/2021/09/19/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B04%EF%BC%9A%E6%B5%81%E5%AA%92%E4%BD%93%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E4%BB%A5%E5%8F%8AAPI%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%9E%E7%8E%B02/"/>
      <url>/2021/09/19/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B04%EF%BC%9A%E6%B5%81%E5%AA%92%E4%BD%93%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E4%BB%A5%E5%8F%8AAPI%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%9E%E7%8E%B02/</url>
      
        <content type="html"><![CDATA[<h1 id="API设计"><a href="#API设计" class="headerlink" title="API设计"></a>API设计</h1><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210916184022858.png" alt="API设计"></p><p>用户、资源和评论之间的关系。</p><h2 id="API设计：用户"><a href="#API设计：用户" class="headerlink" title="API设计：用户"></a>API设计：用户</h2><ul><li>创建(注册)用户：URL:/user Method:POST,SC:201,400,500      </li></ul><p>user 代表URI里面的资源，201创建成功，200 OK（GET时），400 请求错误，500 内部错误</p><ul><li>用户登录： URL:/user/:username Method:POST,SC:200,400,500</li></ul><p>username 是他的参数，用200 是因为只提交了一个表单</p><ul><li>获取用户的基本信息： URL:/user/:username Method:GET,SC:200,400,401,403,500</li></ul><p>并没有往后台写任何东西 ，加401（并没有验证）,403（通过验证了但是不具备操作资源的权限） </p><ul><li>用户注销： URL:/user/:username Method:DELETE,SC:204,400,401,403,500</li></ul><p>成功204，不用返回任何东西</p><h2 id="设计用户API并实现"><a href="#设计用户API并实现" class="headerlink" title="设计用户API并实现"></a>设计用户API并实现</h2><h3 id="一、测试创建用户"><a href="#一、测试创建用户" class="headerlink" title="一、测试创建用户"></a>一、测试创建用户</h3><p>主函数</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//main.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/julienschmidt/httprouter"</span><span class="token string">"net/http"</span> <span class="token comment">//http 的 server</span><span class="token comment">//自动的把RESTful的API按照他请求的方式以及他的一些参数和URL的格式自动路由到我们想要处理的Handler上</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">RegisterHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>httprouter<span class="token punctuation">.</span>Router<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>router <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//初始化一个router</span>router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span>CreateUser<span class="token punctuation">)</span><span class="token keyword">return</span> router<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>r <span class="token operator">:=</span> <span class="token function">RegisterHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//main 函数里面放一些比较简单的定义型的东西，把逻辑处理的放到别的文件里面。</span><span class="token comment">//http分层的处理方式</span></code></pre><p>利用包<code>&quot;github.com/julienschmidt/httprouter&quot;</code> ，<a href="https://github.com/julienschmidt/httprouter">一个可扩展的高性能 HTTP 请求路由器</a>。</p><p>另外创建一个handlers函数</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//用于创建api包函数的使用</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/julienschmidt/httprouter"</span><span class="token string">"io"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">CreateUser</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> p httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">"Create User Handler"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>以上就完成了对创建用户API的函数，运行函数，在浏览器中使用谷歌插件不返回数据Talend API Tester（API测试工具）。</p><p><strong>在上面的输入模式选择POST，链接选择<code>http://localhost:8000/user</code>，点击发送send</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210919113228782.png" alt="成功返回值"></p><h3 id="二、设计用户登录API"><a href="#二、设计用户登录API" class="headerlink" title="二、设计用户登录API"></a>二、设计用户登录API</h3><ol><li>在主函数创建函数<code>RegisterHandlers()</code>中添加登录路由，</li></ol><pre class="language-go" data-language="go"><code class="language-go">router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/:user_name"</span><span class="token punctuation">,</span>Login<span class="token punctuation">)</span></code></pre><ol><li>而后在我们创建的<code>handlers.go</code>文件中，添加登录函数<code>Login()</code>如下：</li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Login</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span>p httprouter<span class="token punctuation">.</span>Param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    uname <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>uname<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ol><li><p>在谷歌API测试插件中POST模式输入<code>http://localhost:8000/user/sailaoda</code>，返回如下：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210919120429084.png" alt="登录API返回结果"></p></li></ol><p>该过程源代码如下：</p><p>主函数：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/julienschmidt/httprouter"</span><span class="token string">"net/http"</span> <span class="token comment">//http 的 server</span><span class="token comment">//自动的把RESTful的API按照他请求的方式以及他的一些参数和URL的格式自动路由到我们想要处理的Handler上</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">RegisterHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>httprouter<span class="token punctuation">.</span>Router<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>router <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//初始化一个router</span>router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span>CreateUser<span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/:user_name"</span><span class="token punctuation">,</span> Login<span class="token punctuation">)</span><span class="token keyword">return</span> router<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>r <span class="token operator">:=</span> <span class="token function">RegisterHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//main 函数里面放一些比较简单的定义型的东西，把逻辑处理的放到别的文件里面。</span><span class="token comment">//http分层的处理方式</span></code></pre><p>handlers函数：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/julienschmidt/httprouter"</span><span class="token string">"io"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">CreateUser</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> p httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">"Create User Handler"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Login</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span>p httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>uname <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>uname<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="总结Golang处理HTTP请求"><a href="#总结Golang处理HTTP请求" class="headerlink" title="总结Golang处理HTTP请求"></a>总结Golang处理HTTP请求</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/julienschmidt/httprouter"</span><span class="token string">"net/http"</span> <span class="token comment">//http 的 server</span><span class="token comment">//自动的把RESTful的API按照他请求的方式以及他的一些参数和URL的格式自动路由到我们想要处理的Handler上</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">RegisterHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>httprouter<span class="token punctuation">.</span>Router<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>router <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//初始化一个router</span>router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span>CreateUser<span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/:user_name"</span><span class="token punctuation">,</span> Login<span class="token punctuation">)</span><span class="token keyword">return</span> router<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>r <span class="token operator">:=</span> <span class="token function">RegisterHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>     <span class="token comment">//是一个类似于注册handler的函数，阻塞在这里调用r</span><span class="token punctuation">&#125;</span><span class="token comment">//main 函数里面放一些比较简单的定义型的东西，把逻辑处理的放到别的文件里面。</span><span class="token comment">//http分层的处理方式</span></code></pre><pre class="language-go" data-language="go"><code class="language-go">http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>     <span class="token comment">//是一个类似于注册handler的函数，阻塞在这里会注册调用r ，即RegisterHandlers</span>当一个request从http<span class="token punctuation">.</span><span class="token function">ListenAndServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数进来之后http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是block形式会把整个main Goruntine 完全block住所以listen  <span class="token operator">-</span><span class="token operator">></span>  RegisterHandlers  <span class="token operator">-</span><span class="token operator">></span>  handlers每一个handler映射到例如CreateUser<span class="token punctuation">,</span>Login<span class="token punctuation">,</span>等上面，都是用不同的Goruntine来处理的。一瞬间可以创建几千几百个Goruntine，Golang并发能力非常强，天然处理http请求作为http server上有得天独厚的优势真正把多核特性利用起来原生的http server框架会自动用Goruntine 方式来调用它。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Go语言实战流媒体视频网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于去掉博客花里胡哨的魔改</title>
      <link href="/2021/09/18/%E5%85%B3%E4%BA%8E%E5%8E%BB%E6%8E%89%E5%8D%9A%E5%AE%A2%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E7%9A%84%E9%AD%94%E6%94%B9/"/>
      <url>/2021/09/18/%E5%85%B3%E4%BA%8E%E5%8E%BB%E6%8E%89%E5%8D%9A%E5%AE%A2%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E7%9A%84%E9%AD%94%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="原博客效果"><a href="#原博客效果" class="headerlink" title="原博客效果"></a>原博客效果</h1><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/FA1703EF-C62C-4F7C-A610-C0F3F593AF22.GIF" alt="原博客效果"></p><p>感觉确实有些花里胡哨了</p><h2 id="去掉功能如下："><a href="#去掉功能如下：" class="headerlink" title="去掉功能如下："></a>去掉功能如下：</h2><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><pre class="language-none"><code class="language-none"># 音乐aplayer:  meting: false  asset_inject: false</code></pre><h3 id="B站番剧"><a href="#B站番剧" class="headerlink" title="B站番剧"></a>B站番剧</h3><pre class="language-none"><code class="language-none">#B站番剧bangumi:  enable: false  vmid:   title: &#39;生命不息，追番不止。&#39;  quote: &#39;Where there is life, there is life.&#39;  show: 1  loading: &#39;&#x2F;img&#x2F;gif&#x2F;brain.gif&#39;</code></pre><h3 id="豆瓣电影"><a href="#豆瓣电影" class="headerlink" title="豆瓣电影"></a>豆瓣电影</h3><pre class="language-none"><code class="language-none">##电影douban:  user:   builtin: false  book:    title: &#39;This is my book title&#39;    quote: &#39;This is my book quote&#39;</code></pre><h3 id="页面透明"><a href="#页面透明" class="headerlink" title="页面透明"></a>页面透明</h3><pre class="language-none"><code class="language-none">#hidden_element&#123;    display: none!important;    visibility: hidden;    opacity: 0;    &#x2F;* 三条属性择一即可 *&#x2F;  &#125;&#x2F;* 首页文章卡片 *&#x2F;#recent-posts &gt; .recent-post-item&#123;    background:rgba(255, 255, 255, 0.9);&#125;&#x2F;* 首页侧栏卡片 *&#x2F;.card-widget&#123;  background:rgba(255, 255, 255, 0.9)!important;&#125;&#x2F;* 文章页面正文背景 *&#x2F;div#post&#123;  background: rgba(255, 255, 255, 0.9);&#125;&#x2F;* 分页页面 *&#x2F;div#page&#123;  background: rgba(255, 255, 255, 0.9);&#125;&#x2F;* 归档页面 *&#x2F;div#archive&#123;  background: rgba(255, 255, 255, 0.9);&#125;&#x2F;* 标签页面 *&#x2F;div#tag&#123;  background: rgba(255, 255, 255, 0.9);&#125;&#x2F;* 分类页面 *&#x2F;div#category&#123;  background: rgba(255, 255, 255, 0.9);&#125;#footer&#123;    opacity: 0.5;  &#125;&#x2F;* 页脚透明 *&#x2F;#footer&#123;    background: transparent!important;  &#125;  &#x2F;* 头图透明 *&#x2F;  #page-header&#123;    background: transparent!important;  &#125;  &#x2F;*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 *&#x2F;  #page-header.post-bg:before &#123;    background-color: transparent!important;  &#125;  &#x2F;*夜间模式伪类遮罩层透明*&#x2F;  [data-theme&#x3D;&quot;dark&quot;]    #footer::before&#123;        background: transparent!important;      &#125;  [data-theme&#x3D;&quot;dark&quot;]    #page-header::before&#123;      background: transparent!important;      &#125;      [data-theme&#x3D;&quot;dark&quot;]      #aside-content .card-widget&#123;          background: rgba(0, 0, 0, 0.5)!important;        &#125;    [data-theme&#x3D;&quot;dark&quot;]      div#post&#123;        background: rgba(0, 0, 0, 0.5)!important;        &#125;        .read-mode #aside-content .card-widget&#123;            background: rgba(158, 204, 171, 0.5)!important;          &#125;      .read-mode div#post&#123;          background: rgba(158, 204, 171, 0.5)!important;          &#125;          [data-theme&#x3D;&quot;dark&quot;]          .read-mode #aside-content .card-widget&#123;                background: rgba(0, 0, 0, 0.5)!important;                color: #ffffff;              &#125;        [data-theme&#x3D;&quot;dark&quot;]            .read-mode div#post&#123;              background: rgba(0, 0, 0, 0.5)!important;              color: #ffffff;              &#125;</code></pre><p>还有好多各种各样的花哨js，CSS，等等。</p><p>现在的博客样式就很满意，看来是这十几天过去成熟了啊。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言实战流媒体视频网站笔记3：流媒体网站架构以及API模块的实现1</title>
      <link href="/2021/09/16/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B03%EF%BC%9A%E6%B5%81%E5%AA%92%E4%BD%93%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E4%BB%A5%E5%8F%8AAPI%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%9E%E7%8E%B01/"/>
      <url>/2021/09/16/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B03%EF%BC%9A%E6%B5%81%E5%AA%92%E4%BD%93%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E4%BB%A5%E5%8F%8AAPI%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%9E%E7%8E%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="流媒体点播网站"><a href="#流媒体点播网站" class="headerlink" title="流媒体点播网站"></a>流媒体点播网站</h1><ul><li>GO是一门网络编程语言</li><li>视频网站包含Go在实战项目中的绝大部分技能要点</li><li>优良的native http库以及模板引擎（无需任何第三方框架）</li></ul><h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210916181324756.png" alt="总体架构"></p><p>典型的前后端分离的服务，后端用API来连接前端。</p><p>API会将一些业务的数据往DB里面写，同时会将一些业务的处理比如说视频的播放，上传下载请求送到Streaming模块里面，Scheduler会处理一些删除，软删除，定期清理一些。</p><p>Streaming和Scheduler都会同时访问DB，会直接去文件系统里面找视频文件做相应的处理。</p><h2 id="什么是前后端解耦"><a href="#什么是前后端解耦" class="headerlink" title="什么是前后端解耦"></a>什么是前后端解耦</h2><ul><li>前后端解耦是时下流行的web网站架构</li><li>前端页面和服务通过普通的web引擎渲染</li><li>后端数据通过渲染后的页面脚本调用后处理和呈现</li></ul><h3 id="前后端解耦的优势"><a href="#前后端解耦的优势" class="headerlink" title="前后端解耦的优势"></a>前后端解耦的优势</h3><ul><li>解放生产力，提高合作效率</li><li>松耦合的架构更灵活，部署更方便，更符合微服务的设计特征</li><li>性能的提升，可靠性的提升</li></ul><h3 id="前后端耦合的缺点"><a href="#前后端耦合的缺点" class="headerlink" title="前后端耦合的缺点"></a>前后端耦合的缺点</h3><ul><li>工作量大</li><li>前后端分离带来的团队成本以及学习成本</li><li>系统更复杂</li></ul><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul><li>REST API</li><li>REST是一种设计风格，不是任何架构标准</li><li>当今RESTful API通常使用<strong>HTTP</strong>作为通信协议，<strong>JSON</strong>作为数据格式</li></ul><h2 id="API特点"><a href="#API特点" class="headerlink" title="API特点"></a>API特点</h2><ul><li>统一接口(Uniform Interface)</li><li>无状态(Stateless)    </li><li>可缓存(Cacheable)     减少后端服务的压力</li><li>分层(Layered System)  将一个API的servers 分成很多层很多个服务，每一层次负责一部分功能</li><li>CS模式(Client-server Atchitecture)</li></ul><h2 id="API设计原则"><a href="#API设计原则" class="headerlink" title="API设计原则"></a>API设计原则</h2><ul><li>以URL(统一资源定位符) 风格设计API</li><li>通过不同的METHOD(GET,POST,PUT,DELETE)来区分对资源的CRUD。用METHOD来区分对资源的不同操作</li><li>返回码(Status Code ) 符合HTTP资源描述的规定   （ 404 找不到页面等）可读性</li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Go语言实战流媒体视频网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言实战流媒体视频网站笔记2：一个例子了解Golang工具链</title>
      <link href="/2021/09/15/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B02%EF%BC%9A%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3golang%E5%B7%A5%E5%85%B7%E9%93%BE/"/>
      <url>/2021/09/15/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B02%EF%BC%9A%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3golang%E5%B7%A5%E5%85%B7%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="一个Go的例子"><a href="#一个Go的例子" class="headerlink" title="一个Go的例子"></a>一个Go的例子</h1><div class="note simple info flat"><p>通过一个简单的webservice具体从golang的工具链，到test，全面介绍golang在工程项目里需要掌握的知识点。 </p></div><h2 id="Go工具-命令"><a href="#Go工具-命令" class="headerlink" title="Go工具/命令"></a>Go工具/命令</h2><h3 id="Usage："><a href="#Usage：" class="headerlink" title="Usage："></a>Usage：</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token punctuation">[</span>arguments<span class="token punctuation">]</span></code></pre><h3 id="The-commands-are"><a href="#The-commands-are" class="headerlink" title="The commands are:"></a>The commands are:</h3><pre class="language-go" data-language="go"><code class="language-go">bug         start a bug reportbuild       compile packages and dependenciesclean       remove object files and cached filesdoc         show documentation <span class="token keyword">for</span> <span class="token keyword">package</span> or symbolenv         <span class="token builtin">print</span> Go environment informationfix         update packages to use <span class="token builtin">new</span> APIsfmt         gofmt <span class="token punctuation">(</span>reformat<span class="token punctuation">)</span> <span class="token keyword">package</span> sourcesgenerate    generate Go files by processing sourceget         add dependencies to current module and install theminstall     compile and install packages and dependencieslist        list packages or modulesmod         module maintenancerun         compile and run Go programtest        test packagestool        run specified <span class="token keyword">go</span> toolversion     <span class="token builtin">print</span> Go versionvet         report likely mistakes in packages</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> build       compile packages and dependencies</code></pre><ul><li>最常用的go command之一，编译go文件。</li><li>跨平台编译：<code>env GOOS=linux GOARCH=amd64 go build</code>，编译目标平台的操作系统上运行的二进制文件。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> install     compile and install packages and dependencies</code></pre><ul><li><p>也是编译，与build最大的区别是编译后会将输出文件打包成库放在pkg下</p></li><li><p>常用于本地打包编译的命令：go install</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get        download and install packages and dependencies</code></pre><ul><li>用于获取go的第三方包，通常会默认从git repo 上pull 最新的版本</li><li>常用命令如： <code>go get -u github.com/go-sql-driver/mysql</code>（从github上获取mysql的driver并安装至本地，-u 表示下载最新的包。）</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> fmt         gofmt <span class="token punctuation">(</span>reformat<span class="token punctuation">)</span> <span class="token keyword">package</span> sources</code></pre><ul><li>类似于C中的lint，统一代码风格和排版</li><li>常用命令如：<code>go fmt</code></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test          test packages</code></pre><ul><li>运行当前包目录下的tests</li><li>常用命令如：<code>go test</code>或<code>go test -v</code>后面一个命令打印出所有信息</li></ul><h2 id="Golang的test"><a href="#Golang的test" class="headerlink" title="Golang的test"></a>Golang的test</h2><ul><li><emp>Go的test一般以XXX_test.go为文件名</emp></li><li><p>XXX的部分一般为XXX_test.go所要测试的代码文件名。注：Go并没有要求XXX的部分必须是要测试的文件名。</p></li></ul><p>文件main.go</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//main.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"io"</span>    <span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span>    res <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">&#123;</span>        res <span class="token operator">+=</span> i    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">firstPage</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"&lt;h1>Hello,this is my fisrt page!&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span>firstPage<span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210915113343606.png" alt="程序输出结果"></p><p>文件测试：my_test.go（注意文件名格式 XXXtest.go）</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestPrintlto20</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res <span class="token operator">:=</span> <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hey"</span><span class="token punctuation">)</span><span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">210</span><span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Wrong result of Printlto20"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210915120054392.png" alt="测试结果"></p><h1 id="Test的写法"><a href="#Test的写法" class="headerlink" title="Test的写法"></a>Test的写法</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">:=</span> <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">210</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Return value not valid"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>每一个test文件必须import 一个testing，出现问题可以打印错误等</li><li>test文件下的每一个test case均必须以Test开头并且符合TestXxx形式，否则go test会直接跳过测试不执行。  如 func TestPrint</li></ul><h3 id="具体细节"><a href="#具体细节" class="headerlink" title="具体细节"></a>具体细节</h3><ul><li>test case 的入参为 t <em>testing.T 或 b </em>testing.B (b测试信息)</li><li>t.Errorf为打印错误信息，并且当前test case 会被跳过</li><li>t.SkipNow()为跳过当前test，并且直接按PASS处理下一个test。必须写在第一行。</li></ul><p>第二点：改成200时的报错信息</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestPrintlto20</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//t.SkipNow()</span>res <span class="token operator">:=</span> <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hey"</span><span class="token punctuation">)</span><span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Wrong result of Printlto20"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210915131056792.png" alt="报错信息"></p><p>第三点：在第一行加上t.SkipNow()后，会跳过当前test，也会显示PASS</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210915131350235.png" alt="Skip"></p><p>测试被忽略：1，已通过：0</p><h2 id="Test注意要点"><a href="#Test注意要点" class="headerlink" title="Test注意要点"></a>Test注意要点</h2><ul><li><p>Go的test不会保证多个TestXxx是顺序执行，但是通常会按顺序执行。</p></li><li><p>使用t.Run 来执行subtests可以做到控制test输出以及test的顺序</p></li></ul><p>例如</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"testing"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">,</span><span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"a2"</span><span class="token punctuation">,</span><span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a2"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"a3"</span><span class="token punctuation">,</span><span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a3"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>可能在做test之前要做一些初始化的东西</li><li>使用TestMain 作为初始化test，并且使用m.Run() 来调用其他tests可以完成一些需要初始化操作的testing，比如数据库连接，文件打开，REST服务登录等。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestMain</span><span class="token punctuation">(</span>m <span class="token operator">*</span>testing<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printkn</span><span class="token punctuation">(</span><span class="token string">"test main first"</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li><emp>如果没有在TestMain中调用m.Run则除了TestMain意外的其他tests都不会被执行。</emp></li></ul><p>例如：</p><h3 id="subtests测试实例"><a href="#subtests测试实例" class="headerlink" title="subtests测试实例"></a>subtests测试实例</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"testing"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">testPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//一般情况下大小写区分开，作为子test</span>    res <span class="token operator">:=</span> <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hey"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">210</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Wrong result of Printlto20"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">testPrint2</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">:=</span> <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    res <span class="token operator">++</span>    <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">211</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Test Print2 failed"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TestAll</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"TestPrint"</span><span class="token punctuation">,</span>testPrint<span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"TestPrint2"</span><span class="token punctuation">,</span>testPrint2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>测试结果：</p><pre class="language-none"><code class="language-none">&#x3D;&#x3D;&#x3D; RUN   TestPrinthey--- PASS: TestPrint (0.00s)&#x3D;&#x3D;&#x3D; RUN   TestPrint2--- PASS: TestPrint2 (0.00s)&#x3D;&#x3D;&#x3D; RUN   TestAll&#x3D;&#x3D;&#x3D; RUN   TestAll&#x2F;TestPrinthey&#x3D;&#x3D;&#x3D; RUN   TestAll&#x2F;TestPrint2--- PASS: TestAll (0.00s)    --- PASS: TestAll&#x2F;TestPrint (0.00s)    --- PASS: TestAll&#x2F;TestPrint2 (0.00s)PASSok  webserver5.658s进程 已完成，退出代码为 0</code></pre><p>子test小写后的输出结果：</p><pre class="language-none"><code class="language-none">&#x3D;&#x3D;&#x3D; RUN   TestAll&#x3D;&#x3D;&#x3D; RUN   TestAll&#x2F;TestPrinthey&#x3D;&#x3D;&#x3D; RUN   TestAll&#x2F;TestPrint2--- PASS: TestAll (0.00s)    --- PASS: TestAll&#x2F;TestPrint (0.00s)    --- PASS: TestAll&#x2F;TestPrint2 (0.00s)PASSok  webserver5.576s进程 已完成，退出代码为 0</code></pre><h3 id="TestMain测试实例"><a href="#TestMain测试实例" class="headerlink" title="TestMain测试实例"></a>TestMain测试实例</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"testing"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">testPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//一般情况下大小写区分开，作为子test</span>    res <span class="token operator">:=</span> <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hey"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">210</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Wrong result of Printlto20"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">testPrint2</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">:=</span> <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    res <span class="token operator">++</span>    <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">211</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Test Print2 failed"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TestAll</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"TestPrint"</span><span class="token punctuation">,</span>testPrint<span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"TestPrint2"</span><span class="token punctuation">,</span>testPrint2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TestMain</span><span class="token punctuation">(</span>m <span class="token operator">*</span>testing<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Tests begins..... "</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>测试结果：</p><pre class="language-none"><code class="language-none">Tests begins..... &#x3D;&#x3D;&#x3D; RUN   TestPrintlto20--- SKIP: TestPrintlto20 (0.00s)测试已忽略.&#x3D;&#x3D;&#x3D; RUN   TestAll&#x3D;&#x3D;&#x3D; RUN   TestAll&#x2F;TestPrinthey&#x3D;&#x3D;&#x3D; RUN   TestAll&#x2F;TestPrint2--- PASS: TestAll (0.00s)    --- PASS: TestAll&#x2F;TestPrint (0.00s)    --- PASS: TestAll&#x2F;TestPrint2 (0.00s)PASSok  webserver4.981s进程 已完成，退出代码为 0</code></pre><p>如果把m.Run() 注释掉，则只会执行TestMain()函数的内容。</p><h1 id="Test之benchmark"><a href="#Test之benchmark" class="headerlink" title="Test之benchmark"></a>Test之benchmark</h1><ul><li>benchmark函数一般以Benchmark开头</li><li>benchmark 的case 一般会跑b.N次，而且每次执行都会如此</li><li>在执行过程中会根据实际case的执行时间是否稳定会增加b.N的次数以达到稳态</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"testing"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">testPrint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//一般情况下大小写区分开，作为子test</span>    res <span class="token operator">:=</span> <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hey"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">210</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Wrong result of Printlto20"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">testPrint2</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">:=</span> <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    res <span class="token operator">++</span>    <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">211</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Test Print2 failed"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TestAll</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"TestPrint"</span><span class="token punctuation">,</span>testPrint<span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"TestPrint2"</span><span class="token punctuation">,</span>testPrint2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TestMain</span><span class="token punctuation">(</span>m <span class="token operator">*</span>testing<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Tests begins..... "</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">BenchmarkAll</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N <span class="token punctuation">;</span> n <span class="token operator">++</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//寻找函数最稳定的时候，得出最稳定的次数和每次跑的时间</span>        <span class="token function">Printlto20</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>单独运行BenchmarkAll()  </p><p><code>go test -bench=.</code></p><pre class="language-none"><code class="language-none">Tests begins..... goos: windowsgoarch: amd64pkg: webservercpu: Intel(R) Core(TM) i7-1065G7 CPU @ 1.30GHzBenchmarkAllBenchmarkAll-8   162938895         7.531 ns&#x2F;opPASS</code></pre><p>一共跑了162938895次，每次平均耗时7.531 ns/op。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol><li><p>Benchmark首字母大写</p></li><li><p>Benchmark同样也是普通的testcase之一，也会受TestMain限制。</p></li><li><p>千万注意保证被测函数总能在一定时间达到稳态。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Go语言实战流媒体视频网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言实战流媒体视频网站笔记1：要点介绍</title>
      <link href="/2021/09/14/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B01%EF%BC%9A%E8%A6%81%E7%82%B9%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/09/14/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E6%B5%81%E5%AA%92%E4%BD%93%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%AC%94%E8%AE%B01%EF%BC%9A%E8%A6%81%E7%82%B9%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么选择Golang"><a href="#为什么选择Golang" class="headerlink" title="为什么选择Golang"></a>为什么选择Golang</h1><ul><li><p>开发效率高（完整的开发工具链tools,test,benchmark,builtin.etc）</p></li><li><p>部署简单（Compile once,run everywhere）</p></li><li><p>良好的native http 库以及模板引擎（无需任何第三方框架）</p></li><li><p>优秀的并发模型</p></li></ul><h1 id="课程概述"><a href="#课程概述" class="headerlink" title="课程概述"></a>课程概述</h1><ul><li>Golang简单介绍，通过简单的web server了解Go的工具链以及玩法</li><li>用Golang完成一个可以使用的流媒体视频网站</li><li>网站上云</li></ul><h1 id="Golang简单介绍"><a href="#Golang简单介绍" class="headerlink" title="Golang简单介绍"></a>Golang简单介绍</h1><ul><li>Go的工具链的使用，build,install,fmt等</li><li>Go test和Go bench</li></ul><h1 id="Golang搭建视频网站"><a href="#Golang搭建视频网站" class="headerlink" title="Golang搭建视频网站"></a>Golang搭建视频网站</h1><ul><li>前后端分离的系统架构设计</li><li>RESTful风格API的设计与实现</li><li>Golang实现webservice</li><li>系统的服务化解耦</li><li>Golang的channel和并发模型的实践应用</li><li>利用Golang原生的template完成web UI 的实现</li></ul><h1 id="网站上云"><a href="#网站上云" class="headerlink" title="网站上云"></a>网站上云</h1><ul><li>用ECS，ELB等云服务重构业务工程架构</li><li>在阿里云上实现cloud native架构下的业务部署</li></ul><pre class="language-none"><code class="language-none">课程名称: Go语言开发高性能网站项目实战 实战流媒体视频网站 课程简介:go是很多php程序员的首选 php在web现在还有一席之地 而go面向未来 在微服务 云计算 直播 区块链等热门领域都有不错的发展----------------------课程目录------------------------------第1章 课程介绍介绍这门课程大纲，技术堆栈以及环境1-2 课程介绍及知识要点预习第2章 一个例子了解golang工具链通过一个简单的webservice具体从golang的工具链，到test，全面介绍golang在工程项目里需要掌握的知识点。2-1 一个例子了解golang常用工具链2-2 golang项目中test的写法2-3 golang项目中benchmark的写法2-4 章节总结第3章 流媒体网站架构以及API模块的实现本章通过实战演练，从网站的整体架构设计，到服务划分，数据库设计，到api模块的实现，全面讲述golang对webservice的实现以及代码分层架构的思想，同时辅以test cases的全程编写与指导，全面了解工程化golang项目的实现。3-1 流媒体网站整体介绍与架构梳理3-2 api设计与架构3-3 api实现之详细设计(上)3-4 api实现之详细设计(中)3-5 api实现之详细设计(下)3-6 api之http handler层3-7 api之数据库层设计3-8 api之数据库层实现_数据库连接3-9 api之数据库层实现_实现User3-10 api之数据库层实现_编写User Test Case3-11 api之数据库层实现_User部分代码优化3-12 api之数据库层实现_实现和验证Video3-13 api之数据库层实现_实现Comments3-14 api之数据库层实现_Comments Test Case3-15 api之session处理与实现(上)3-16 api之session处理与实现(下)3-17 api之http middleware的实现与handler收尾(上)3-18 api之http middleware的实现与handler收尾(下)第4章 stream模块通过stream server的实现过程，着重讲述通过golang实现流式播放，上传文件，以及利用channel实现流控等实用知识点，进一步加深对golang的掌握。4-2 streaming的架构搭建4-4 流控模块的实现4-5 在http middleware中嵌入流控4-6 streamHandler实现4-7 验证streamHandler4-8 uploadHandler实现4-9 验证uploadHandler第5章 scheduler模块通过对生产者消费者模型在scheduler中的实现，全面了解golang是如何处理并发场景，以及如何在并发场景下通过channel实现消息同步。5-1 scheduler介绍5-2 代码架构搭建5-3 runner的生产消费者模型实现5-4 runner的使用与测试5-5 task示例的实现5-6 timer的实现5-7 api实现以及scheduler完成第6章 前端服务和模版引擎渲染讲述如何使用golang的模版引擎来渲染html文件，如何通过原生proxy和api两种模式实现后端服务接口透传并避免跨域访问，以及整个前台在实现业务上的js逻辑代码。6-1 大前端和golang模版引擎介绍6-2 前端代码架构搭建6-3 静态页面渲染6-4 build脚本和homeHandler6-6 api透传模块实现6-7 proxy转发的实现6-8 UI部分的预览6-9 API service补全与讲解6-10 UI之html讲解6-11 js部分实现第7章 网站上云通过对网站部分架构的改造和代码重构，使之更符合cloud native架构，辅以阿里云计算存储网络等服务，最终实现网站上云，打通网站上线最后一公里。7-1 云原生讲解7-2 云存储改造之OSS方案分析7-3 云存储改造之OSS适配7-4 公共配置实现7-5 用vendor处理公共配置包7-6 SLB讲解与配置7-7 SLB之添加session容错7-8 ECS云主机和安全组配置7-9 scheduler的改造7-10 部署脚本以及db初始化7-11 部署演示以及完成效果展示7-12 课程总结（回顾，延伸和优化）</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Go语言实战流媒体视频网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记13：并发编程之缓冲channel</title>
      <link href="/2021/09/14/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BC%93%E5%86%B2channel/"/>
      <url>/2021/09/14/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BC%93%E5%86%B2channel/</url>
      
        <content type="html"><![CDATA[<h1 id="缓冲channel"><a href="#缓冲channel" class="headerlink" title="缓冲channel"></a>缓冲channel</h1><p><strong>定义：</strong></p><p><code>c := make(chan int,n)</code>         n是缓冲区大小</p><p>之前<code>c := make(chan int)</code>       相当于     <code>c := make(chan int , 0)</code></p><p>往里写就阻塞。</p><p>例如：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//缓冲channel</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">test_channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment">//相当于make(chan int , 0)</span>    ch <span class="token operator">&lt;-</span> <span class="token number">1</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"come to end goroutine 1"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">go</span> <span class="token function">test_channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"running end!"</span><span class="token punctuation">)</span>    <span class="token comment">//&lt;-ch</span>        <span class="token comment">//time.Sleep(time.Second)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">running end！</code></pre><p>结果显示：test_channel函数中的<code>come to end goroutine 1</code>无法打印，</p><p>原因：channel 容量为0，所以阻塞在<code>ch &lt;- 1</code> ，到<code>main</code>函数中等待两秒后，运行main函数中的打印命令。</p><h3 id="进行读操作"><a href="#进行读操作" class="headerlink" title="进行读操作"></a>进行读操作</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">test_channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment">//相当于make(chan int , 0)</span>    ch <span class="token operator">&lt;-</span> <span class="token number">1</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"come to end goroutine 1"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">go</span> <span class="token function">test_channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"running end!"</span><span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>ch                         <span class="token comment">//读操作 ， 只读不存到一个变量里</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>以上函数，有了<code>&lt;-ch</code>读操作之后，<code>test_channel</code>的写操作就不阻塞了，</p><p>以上流程就变成</p><pre class="language-go" data-language="go"><code class="language-go">main  <span class="token operator">--</span><span class="token operator">></span>  test_channel  <span class="token operator">--</span><span class="token operator">></span>  ch<span class="token operator">&lt;-</span><span class="token number">1</span>写操作  <span class="token operator">--</span><span class="token operator">></span>  阻塞等待两秒  <span class="token operator">--</span><span class="token operator">></span>  打印main函数中的running end<span class="token operator">!</span>  <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;-</span>ch读操作  <span class="token operator">--</span><span class="token operator">></span>  ch<span class="token operator">&lt;-</span><span class="token number">1</span>写操作不再阻塞  <span class="token operator">--</span><span class="token operator">></span>  打印test_channel函数中的come to end goroutine <span class="token number">1</span>  </code></pre><p>读完之后主函数结束的话，协程也是会结束的，所以读完后再睡一下。</p><p><strong>但是按照上面读操作之后，整个程序会死锁，可能是Go版本更新笔记过时的原因，等之后专门看下channel缓冲的源码，找找原因</strong></p><p>通过channel实现锁的功能。</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记12：并发编程之channel</title>
      <link href="/2021/09/13/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bchannel/"/>
      <url>/2021/09/13/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bchannel/</url>
      
        <content type="html"><![CDATA[<h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><p>Go语言在语言级别提供的goroutine间的通信方式</p><h3 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h3><p><strong><code>var chanName chan ElementType</code></strong></p><p>利用make 定义  可以指定chan 的容量。</p><h2 id="channel的写与读"><a href="#channel的写与读" class="headerlink" title="channel的写与读"></a>channel的写与读</h2><div class="note modern info flat"><p>协程之间的通信通过channel进行，也可以进行协程之间的同步。</p></div><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210913233056820.png" alt="channel的写与读"></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span>    <span class="token string">"strconv"</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         z <span class="token operator">:=</span> x <span class="token operator">+</span> y        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function">Read</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//没有写入会阻塞</span>    value <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch         <span class="token comment">//从value读出一个数据</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value:"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//(string)value  </span>    <span class="token comment">//上面该函数将输入int型转换成str型</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Write</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ch <span class="token operator">&lt;-</span> <span class="token number">10</span>                 <span class="token comment">//写入10</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">Read</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>     <span class="token comment">//先读，阻塞</span>    <span class="token keyword">go</span> <span class="token function">Write</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token comment">//写入之后，再进行读出</span>                    <span class="token comment">//写入之后没有读出操作也会阻塞</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>          <span class="token comment">//为了让协程都执行完</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"end of code"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">value:10end of code</code></pre><p>等十个协程都完成之后再结束</p><p>channel不用time</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"strconv"</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> quit <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         z <span class="token operator">:=</span> x <span class="token operator">+</span> y        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>         quit <span class="token operator">&lt;-</span> <span class="token number">1</span>                <span class="token comment">//每个协程开完之后，往里写一</span><span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function">Read</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//没有写入会阻塞</span>    value <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch         <span class="token comment">//从value读出一个数据</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value:"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//(string)value  </span>    <span class="token comment">//上面该函数将输入int型转换成str型</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Write</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//ch &lt;- 10                 //写入10</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    chs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>       <span class="token comment">//声明一个chan int 类型,10个</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">&#123;</span>        <span class="token comment">//遍历开协程</span>        chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>        <span class="token comment">//对每一个元素进行实例化，真实的生成channel</span>        <span class="token keyword">go</span> <span class="token function">Add</span><span class="token punctuation">(</span>i <span class="token punctuation">,</span> i <span class="token punctuation">,</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment">//每一个协程执行完毕后，往里写一</span>    <span class="token punctuation">&#125;</span>                               <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> chs<span class="token punctuation">&#123;</span>        <span class="token comment">//遍历channel数组</span>        <span class="token operator">&lt;-</span>v                       <span class="token comment">//输出channel的值</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">></span> Output<span class="token punctuation">:</span>command<span class="token operator">-</span>line<span class="token operator">-</span>arguments<span class="token number">18</span><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span class="token number">10</span><span class="token number">12</span><span class="token number">14</span><span class="token number">0</span><span class="token number">16</span><span class="token number">2</span><span class="token operator">></span> Elapsed<span class="token punctuation">:</span> <span class="token number">5.185</span>s<span class="token operator">></span> Result<span class="token punctuation">:</span> Success</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记11：并发编程之协程</title>
      <link href="/2021/09/13/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8D%8F%E7%A8%8B/"/>
      <url>/2021/09/13/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><emp>与传统的系统级**线程和进程**相比，协程的大优势在于其**“轻量级”**，可以轻松创建上百万个而不会导致系统资源衰竭，而线程和进程通常多也不能超过1万个。这也是协程也叫轻量级线程的原因。</emp><h2 id="goroutine-——Go对协程的实现"><a href="#goroutine-——Go对协程的实现" class="headerlink" title="goroutine ——Go对协程的实现"></a>goroutine ——Go对协程的实现</h2><div class="note simple info flat"><p>go + 函数名 ：启动一个协程执行函数体。</p></div><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">test_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"This is one routine!!!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">go</span> <span class="token function">test_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">&gt; Output:command-line-argumentsThis is one routine!!!&gt; Elapsed: 7.155s&gt; Result: Success</code></pre><p>函数实现</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     z <span class="token operator">:=</span> x <span class="token operator">+</span> y    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">go</span> <span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>      time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token comment">//为了让协程都执行完</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">&gt; Output:command-line-arguments181220414616810&gt; Elapsed: 5.067s&gt; Result: Success</code></pre><p>协程之间的同步，在Go中不需要加锁利用*sync.Mutex来实现。</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>365算法特训营笔记3：C++基础3循环结构</title>
      <link href="/2021/09/13/365%E7%AE%97%E6%B3%95%E7%89%B9%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B03%EF%BC%9AC-%E5%9F%BA%E7%A1%803%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
      <url>/2021/09/13/365%E7%AE%97%E6%B3%95%E7%89%B9%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B03%EF%BC%9AC-%E5%9F%BA%E7%A1%803%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><div class="note info simple"><p>在实际生活中，经常会将同一件事情<strong>重复</strong>做很多次，在C++语言中，也经常需要重复执行同一代码块，这时就需要使用<strong>循环结构</strong>。 </p></div><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210913213225323.png" alt="循环结构"></p><h2 id="一、for"><a href="#一、for" class="headerlink" title="一、for"></a>一、for</h2><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210913213358740.png" alt="for循环结构图"></p><p>实例一：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="二、break"><a href="#二、break" class="headerlink" title="二、break"></a>二、break</h2><h2 id="三、continue"><a href="#三、continue" class="headerlink" title="三、continue"></a>三、continue</h2>]]></content>
      
      
      <categories>
          
          <category> 365算法特训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记10：面向对象(下）</title>
      <link href="/2021/09/13/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8B/"/>
      <url>/2021/09/13/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言也提供了继承"><a href="#Go语言也提供了继承" class="headerlink" title="Go语言也提供了继承"></a>Go语言也提供了继承</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> person <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>name <span class="token builtin">string</span>age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> student <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>person                     <span class="token comment">//通过struct匿名字段来继承</span>    class_id <span class="token builtin">int</span><span class="token punctuation">&#125;</span></code></pre><p>一个简单的继承关系</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">type</span> Person <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span><span class="token punctuation">(</span>person Person<span class="token punctuation">)</span> <span class="token function">getNameAndAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> person<span class="token punctuation">.</span>name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    Person    speciality <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span><span class="token punctuation">(</span>student Student<span class="token punctuation">)</span> <span class="token function">getSpeciality</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> student<span class="token punctuation">.</span>speciality<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    student <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span>    student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span>    student<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">26</span>    student<span class="token punctuation">.</span>speciality <span class="token operator">=</span> <span class="token string">"math"</span>    name <span class="token punctuation">,</span> age <span class="token operator">:=</span> student<span class="token punctuation">.</span><span class="token function">getNameAndAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        speciality <span class="token operator">:=</span> student<span class="token punctuation">.</span><span class="token function">getSpeciality</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">&gt; Output:zhangsan 26 math&gt; Elapsed: 8.047s&gt; Result: Success</code></pre><h1 id="Go的接口"><a href="#Go的接口" class="headerlink" title="Go的接口"></a>Go的接口</h1><emp>在Go语言中，一个类只需要实现了接口要求的所有函数，我们就说这个类实现了该接口。</emp><h2 id="接口赋值（非侵入式接口）"><a href="#接口赋值（非侵入式接口）" class="headerlink" title="接口赋值（非侵入式接口）"></a>接口赋值（非侵入式接口）</h2><h3 id="把实例对象赋值给接口"><a href="#把实例对象赋值给接口" class="headerlink" title="把实例对象赋值给接口"></a>把实例对象赋值给接口</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Animal <span class="token keyword">interface</span><span class="token punctuation">&#123;</span>          <span class="token comment">//接口</span>    <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Bird <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>bird Bird<span class="token punctuation">)</span>  <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"bird is flying!!!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>bird Bird<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"bird is runing!!!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> animal Animal    bird <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Bird<span class="token punctuation">)</span>        animal <span class="token operator">=</span> bird    animal<span class="token punctuation">.</span><span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    animal<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>可以直接调用animal 接口</p><p>输出结果： </p><pre class="language-none"><code class="language-none">bird is flying!!!bird is runing!!!&gt; Elapsed: 7.075s&gt; Result: Success</code></pre><h3 id="将一个接口赋值给另一个接口"><a href="#将一个接口赋值给另一个接口" class="headerlink" title="将一个接口赋值给另一个接口"></a>将一个接口赋值给另一个接口</h3><emp>把方法多的，大的接口赋值给包含方法少的接口</emp><p>赋值等号前面是少的</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Animal <span class="token keyword">interface</span><span class="token punctuation">&#123;</span>          <span class="token comment">//接口</span>    <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Animal2 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span>          <span class="token comment">//接口</span>    <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Bird <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>bird Bird<span class="token punctuation">)</span>  <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"bird is flying!!!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>bird Bird<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"bird is runing!!!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> animal Animal    <span class="token keyword">var</span> animal2 Animal2        bird <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Bird<span class="token punctuation">)</span>    animal <span class="token operator">=</span> bird    animal2 <span class="token operator">=</span> animal    animal2<span class="token punctuation">.</span><span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">&gt; Output:bird is flying!!!&gt; Elapsed: 1.265s&gt; Result: Success</code></pre><h2 id="类型查询"><a href="#类型查询" class="headerlink" title="类型查询"></a>类型查询</h2><h3 id="Any类型"><a href="#Any类型" class="headerlink" title="Any类型"></a>Any类型</h3><p>变量可以指向任何类型，为了让第二个参数可以打印任何值。</p><p><strong>Go语言中任何对象实例都满足空接口interface{}</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> v1 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> v2 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token keyword">var</span> v3 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token number">2.345</span><span class="token keyword">var</span> v4 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Printf</span><span class="token punctuation">(</span>fmt <span class="token builtin">string</span><span class="token punctuation">,</span>args<span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>例如</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Animal <span class="token keyword">interface</span><span class="token punctuation">&#123;</span>          <span class="token comment">//接口</span>    <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Animal2 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span>          <span class="token comment">//接口</span>    <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Bird <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>bird Bird<span class="token punctuation">)</span>  <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"bird is flying!!!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>bird Bird<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"bird is runing!!!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> v1 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//接受任何类型的空接口</span>    v1 <span class="token operator">=</span> <span class="token string">"zhangsan"</span> <span class="token comment">//v1 = 123</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="类型查询-1"><a href="#类型查询-1" class="headerlink" title="类型查询"></a>类型查询</h2><p>标准格式</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span>ok <span class="token operator">:=</span> a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Integer<span class="token punctuation">)</span><span class="token punctuation">;</span>ok<span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span>v1<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span></code></pre><p>例如</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> v1 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    v1 <span class="token operator">=</span> <span class="token number">6.78</span>        <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v1<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok<span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v <span class="token punctuation">,</span> ok<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span> Output<span class="token punctuation">:</span>command<span class="token operator">-</span>line<span class="token operator">-</span>arguments<span class="token number">6.78</span> <span class="token boolean">true</span><span class="token operator">></span> Elapsed<span class="token punctuation">:</span> <span class="token number">7.801</span>s<span class="token operator">></span> Result<span class="token punctuation">:</span> Success</code></pre><p>或者也可以这样用</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> v1 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    v1 <span class="token operator">=</span> <span class="token number">6.78</span>        <span class="token keyword">switch</span> v1<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token builtin">float32</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这是float64"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"这是string"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span> Output<span class="token punctuation">:</span>command<span class="token operator">-</span>line<span class="token operator">-</span>arguments这是<span class="token builtin">float64</span><span class="token operator">></span> Elapsed<span class="token punctuation">:</span> <span class="token number">6.094</span>s<span class="token operator">></span> Result<span class="token punctuation">:</span> Success</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记9：面向对象(上）</title>
      <link href="/2021/09/13/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A%EF%BC%89/"/>
      <url>/2021/09/13/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象-上"><a href="#面向对象-上" class="headerlink" title="面向对象(上)"></a>面向对象(上)</h1><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210913174955865.png" alt=""></p><h2 id="类与函数"><a href="#类与函数" class="headerlink" title="类与函数"></a>类与函数</h2><div class="note simple"><p>“A method is a function with an implicit first argument, called a receiver.”</p></div><p>方法是一个函数要有一个接收者。</p><p><code>func (r ReceiverType) funcName(parameters) (results)</code></p><p>面向结构：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">2</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>返回true</p><p><strong>类型和作用在它上面定义的方法必须在同一个包里定义，这就是为什么不能在 int、float 或类似这些的类型上定义方法。</strong></p><p><strong>所以要用struct把int 封装起来，在golang中，struct 就相当于class</strong></p><h3 id="面向对象："><a href="#面向对象：" class="headerlink" title="面向对象："></a>面向对象：</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Integer <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>         <span class="token comment">//定义了一个Integer类</span>    value <span class="token builtin">int</span>                <span class="token comment">//成员变量叫value</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span><span class="token punctuation">(</span>a Integer<span class="token punctuation">)</span> <span class="token function">compare</span><span class="token punctuation">(</span>b Integer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//以接收者的形式来定义的</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>value                       <span class="token comment">//在Integer类里面添加compare方法</span><span class="token punctuation">&#125;</span>                                                  <span class="token comment">// 这个方法强加在Integer结构体上</span>                                                   <span class="token comment">//golang中面向对象</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> Integer<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span>    b <span class="token operator">:=</span> Integer<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span> <span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出true.</p><h3 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><pre class="language-go" data-language="go"><code class="language-go">point <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span>point <span class="token operator">:=</span> <span class="token operator">&amp;</span>Point<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> point <span class="token operator">:=</span> <span class="token operator">&amp;</span>Point<span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token number">100</span> <span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span>          <span class="token comment">//前三种都是初始化指针变量</span>point <span class="token operator">:=</span> Point<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                   <span class="token comment">//直接初始化实例对象</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Point <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    px <span class="token builtin">float32</span>    py <span class="token builtin">float32</span>               <span class="token comment">//x , y 坐标</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>point <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token function">setXY</span><span class="token punctuation">(</span>px <span class="token punctuation">,</span> py <span class="token builtin">float32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 设置</span>    point<span class="token punctuation">.</span>px <span class="token operator">=</span> px    point<span class="token punctuation">.</span>py <span class="token operator">=</span> py      <span class="token punctuation">&#125;</span>                                           <span class="token comment">//如果不是指针，则是拷贝，指针可以改变</span>                                            <span class="token comment">//方法设置在指针变量上，指针类型可以改变变量</span><span class="token keyword">func</span><span class="token punctuation">(</span>point <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token function">getXY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span><span class="token builtin">float32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 返回x,y 坐标的函数</span>    <span class="token keyword">return</span> point<span class="token punctuation">.</span>px<span class="token punctuation">,</span>point<span class="token punctuation">.</span>py<span class="token punctuation">&#125;</span><span class="token keyword">type</span> Integer <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    value <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    point <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span>              point<span class="token punctuation">.</span><span class="token function">setXY</span><span class="token punctuation">(</span><span class="token number">1.43</span><span class="token punctuation">,</span><span class="token number">2.78</span><span class="token punctuation">)</span>    px<span class="token punctuation">,</span>py <span class="token operator">:=</span> point<span class="token punctuation">.</span><span class="token function">getXY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>px<span class="token punctuation">,</span>py<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><p><code>1.43，2.78</code></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记8：struct</title>
      <link href="/2021/09/12/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08%EF%BC%9Astruct/"/>
      <url>/2021/09/12/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08%EF%BC%9Astruct/</url>
      
        <content type="html"><![CDATA[<h1 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h1><p>标准用法：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> person <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>name <span class="token builtin">string</span>age <span class="token builtin">int</span><span class="token punctuation">&#125;</span></code></pre><p>例如：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    weight <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    person <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出：</p><pre class="language-none"><code class="language-none">&#123;zhangsan,25&#125;</code></pre><h2 id="struct的匿名字段"><a href="#struct的匿名字段" class="headerlink" title="struct的匿名字段"></a>struct的匿名字段</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Human <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>name <span class="token builtin">string</span>age <span class="token builtin">int</span>weight <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>Human     <span class="token comment">//匿名字段，默认Student包含了Human的所有字段</span>speciality <span class="token builtin">string</span><span class="token punctuation">&#125;</span>jane <span class="token operator">:=</span> Student<span class="token punctuation">&#123;</span>Human<span class="token punctuation">:</span>Human<span class="token punctuation">&#123;</span><span class="token string">"Jane"</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>speciality<span class="token punctuation">:</span><span class="token string">"Biology"</span><span class="token punctuation">&#125;</span>   <span class="token comment">//初始化</span></code></pre><p>student 默认包含了 human 字段，类似于继承</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span>age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Personage        <span class="token builtin">int</span>               <span class="token comment">//可以重写age</span>speciality <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>student <span class="token operator">:=</span> Student<span class="token punctuation">&#123;</span>Person<span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"maths"</span><span class="token punctuation">&#125;</span>  <span class="token comment">//先对person初始化</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span>Person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果</p><pre class="language-none"><code class="language-none">&#123;&#123;zhangsan 25&#125; 30 maths&#125;25进程 已完成，退出代码为 0</code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>Go语言中没有private 、 protected 、 public这样的关键字。</p><p>要使某个符号对其他包(package)可见(即可以访问)，需要将该符号定义为以大写字母开头。</p><p>例如：  fmt.Printf()</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记7：Golang函数（下）</title>
      <link href="/2021/09/10/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07%EF%BC%9Agolang%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2021/09/10/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07%EF%BC%9Agolang%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><pre class="language-go" data-language="go"><code class="language-go">f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span> y <span class="token punctuation">,</span> <span class="token builtin">int</span> <span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span></code></pre><p>例如：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    f <span class="token operator">:=</span><span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>Go语言的小特性</p><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><pre class="language-go" data-language="go"><code class="language-go">file<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><u>就算出现异常，也会defer操作关闭文件，实现安全编程的目的。</u><p>defer 用来进行资源的关闭</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">&#123;</span>        <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"before defer"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">before defer54321进程 已完成，退出代码为 0</code></pre><u>先defer 的后执行</u><p>例子二：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"After defer"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment">//defer 加函数体加执行函数的一个括号表示</span>        f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      <span class="token comment">//上面的和这第二个等价</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"After defer 2"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">defer</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"before defer"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>此时输出结果：</p><pre class="language-none"><code class="language-none">before deferAfter defer 2After defer            &#x2F;&#x2F;先defer 的后执行</code></pre><h1 id="Golang中捕获异常"><a href="#Golang中捕获异常" class="headerlink" title="Golang中捕获异常"></a>Golang中捕获异常</h1><h2 id="panic-和-Recover-go的异常处理机制"><a href="#panic-和-Recover-go的异常处理机制" class="headerlink" title="panic 和 Recover(go的异常处理机制)"></a>panic 和 Recover(go的异常处理机制)</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"After defer"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">panic</span> <span class="token punctuation">(</span><span class="token string">"i am wrong~!"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"before defer"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">After deferpanic: i am wrong~!goroutine 1 [running]:main.main()C:&#x2F;Users&#x2F;yesai&#x2F;IdeaProjects&#x2F;12&#x2F;12.go:96 +0x49进程 已完成，退出代码为 2</code></pre><p>先执行第一个函数，显示“After defer”</p><p>然后抛出panic 异常，</p><p>下面一句“before defer”，不执行。</p><p>Recover是从异常中恢复。</p><h2 id="函数也可以作为值、类型-type"><a href="#函数也可以作为值、类型-type" class="headerlink" title="函数也可以作为值、类型(type)"></a>函数也可以作为值、类型(type)</h2><pre class="language-none"><code class="language-none">type typeName func(input1 inputType1,input2 inputType2[, ...]])(result1 resultType1[, ...])</code></pre><p>相当于C语言中的typedef。</p><p>函数的一种高级用法。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> sum <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token keyword">var</span> f sum <span class="token operator">=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>x <span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y    <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>返回7。</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记6：Golang函数（上）</title>
      <link href="/2021/09/10/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%EF%BC%9Agolang%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2021/09/10/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%EF%BC%9Agolang%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">funcName</span><span class="token punctuation">(</span>input1 type1<span class="token punctuation">,</span> input2 type2<span class="token punctuation">)</span> <span class="token punctuation">(</span>output1 type1<span class="token punctuation">,</span> output2 type2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这里是处理逻辑代码    </span><span class="token comment">//返回多个值    </span><span class="token keyword">return</span> value1<span class="token punctuation">,</span> value2 <span class="token punctuation">&#125;</span></code></pre><p>如下例子，交换函数，go语言中不需要中间量</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>a <span class="token builtin">int</span> <span class="token punctuation">,</span> b <span class="token builtin">int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int</span> <span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//这里后面一个括号表示返回值的类型</span><span class="token keyword">return</span> b<span class="token punctuation">,</span> a<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> <span class="token number">1</span>b <span class="token operator">:=</span> <span class="token number">2</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>a <span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>Golang可以返回多个值，如一些错误信息</strong></p><h1 id="传值和传指针"><a href="#传值和传指针" class="headerlink" title="传值和传指针"></a>传值和传指针</h1><p><strong>传值</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> x<span class="token punctuation">&#125;</span></code></pre><p><strong>传指针</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> b<span class="token punctuation">,</span> a<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">return</span> a<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> <span class="token number">1</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">2进程 已完成，退出代码为 0</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记5：Golang流程控制</title>
      <link href="/2021/09/10/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05%EF%BC%9Agolang%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/09/10/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05%EF%BC%9Agolang%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="if-在Golang里面if条件没有括号"><a href="#if-在Golang里面if条件没有括号" class="headerlink" title="if(在Golang里面if条件没有括号)"></a>if(在Golang里面if条件没有括号)</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"一百"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"九十"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"小于九十"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h1 id="for"><a href="#for" class="headerlink" title="for"></a>for</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//var x int</span><span class="token comment">//sum := 0</span><span class="token comment">//for x = 1;x &lt;=100; x ++ &#123;</span><span class="token comment">//sum += x</span>    sum <span class="token operator">:=</span> <span class="token number">0</span>    x <span class="token operator">:=</span> <span class="token number">1</span>    <span class="token keyword">for</span> x <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> x         x <span class="token operator">++</span>    <span class="token punctuation">&#125;</span><span class="token comment">//&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><emp>两种代码表示方式</emp><u>for 相当于以前的 while</u><p>输出结果</p><pre class="language-none"><code class="language-none">5050进程 已完成，退出代码为 0</code></pre><h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">switch</span> sExpr <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> expr1<span class="token punctuation">:</span>    some instructions           <span class="token comment">//后面没有break！</span>    <span class="token keyword">case</span> expr2<span class="token punctuation">:</span>            some other instructions     <span class="token keyword">case</span> expr3<span class="token punctuation">:</span>            some other instructions     <span class="token keyword">default</span><span class="token punctuation">:</span>           other code <span class="token punctuation">&#125;</span></code></pre><p>每一条case语句默认带了break，没有C语言的穿透性</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">:=</span> <span class="token number">2</span><span class="token keyword">switch</span> x <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"yesai 1"</span><span class="token punctuation">)</span>              <span class="token comment">//后面没有break</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">fallthrough</span>                <span class="token comment">//如果想继续后面的case，即具有穿透性，可以使用fallthrough</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"yesai 3"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"yesai 4"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>结果输出：</p><pre class="language-none"><code class="language-none">yesai 3进程 已完成，退出代码为 0</code></pre><h1 id="range"><a href="#range" class="headerlink" title="range"></a>range</h1><p>Go语言的关键字range，用于便捷地遍历容器中的元素。（相当于foreach)</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span>       <span class="token comment">//简短声明，遍历数组，range结合for循环用</span>y <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>y<span class="token punctuation">[</span><span class="token string">"zhangsan"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">78</span>y<span class="token punctuation">[</span><span class="token string">"lisi"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span>y<span class="token punctuation">[</span><span class="token string">"wangwu"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">for</span> i <span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> x<span class="token punctuation">&#123;</span>          <span class="token comment">// i相当于key , v相当于value</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span>           <span class="token comment">//Println 换行</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> y <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> y<span class="token punctuation">&#123;</span>           <span class="token comment">//用_ 占位符不显示key</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">0 11 22 33 44 5zhangsan 78lisi 90wangwu 1007890100进程 已完成，退出代码为 0</code></pre><emp>range还可以输出字符串</emp><p>参考如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x <span class="token operator">:=</span> <span class="token string">"zhangsan"</span>    <span class="token keyword">for</span> <span class="token boolean">_</span> <span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> x<span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>      <span class="token comment">//以字符串的形式输出</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">zhangsan进程 已完成，退出代码为 0</code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记4：Golang基础下</title>
      <link href="/2021/09/09/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%EF%BC%9Agolang%E5%9F%BA%E7%A1%80%E4%B8%8B/"/>
      <url>/2021/09/09/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%EF%BC%9Agolang%E5%9F%BA%E7%A1%80%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p>s</p><h2 id="array就是数组："><a href="#array就是数组：" class="headerlink" title="array就是数组："></a>array就是数组：</h2><p><code>var arr [n]type</code></p><p>数组也可以使用另一种简短声明符号<code>:=</code> 来声明</p><h2 id="slice—-Go的动态数组"><a href="#slice—-Go的动态数组" class="headerlink" title="slice—-Go的动态数组"></a>slice—-Go的动态数组</h2><ul><li><p><code>var fslice []int</code></p></li><li><p>声明方式：<code>var y []int</code> (中括号里面不填数字大小，因为是动态的)</p></li></ul><ul><li><p>还可以通过从<strong>一个数组</strong>或一个<strong>已经存在的slice</strong>中再次声明</p><pre class="language-go" data-language="go"><code class="language-go">x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span>y <span class="token operator">:=</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></code></pre><p>前闭后开，包含2但不包含4.</p><p>结果如下：</p><pre class="language-none"><code class="language-none">[2 3]进程 已完成，退出代码为 0</code></pre></li><li><p>slice 也可以使用<code>:=</code>来声明</p><p>​      <code>s := make([]int , 10 , 20)</code>             //长度是10 ，真正容量是20</p></li></ul><p>make关键字用来分配空间</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908235146664.png" alt="分配"></p><p>len 是长度    cap 是容量</p><p>第一个例子</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>y <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>       <span class="token comment">//5相当于参考容量</span>y <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token comment">//append函数向动态数组中添加</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>y，<span class="token function">cap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">//容量cap()</span><span class="token punctuation">&#125;</span></code></pre><p><strong>添加至数组长度大于容量，也没关系，go底层会自动扩宽空间</strong></p><p>运行结果：</p><pre class="language-none"><code class="language-none">[0 0 0 5 6 7] 10进程 已完成，退出代码为 0</code></pre><p>第二个例子</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">[1 2 3]进程 已完成，退出代码为 0</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210909000548219.png" alt="slice 动态数组"></p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>声明</p><p><code>map[keyType]valueType</code></p><p><code>student:= make(map[string]int)</code>        <strong>map使用必须make 一下分配内存</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> student <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float32</span>student <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token punctuation">)</span>     student<span class="token punctuation">[</span><span class="token string">"yesai"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18.2</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">map[yesai:18.2]进程 已完成，退出代码为 0</code></pre><p>也可以使用简短声明符号，声明的两行改为</p><pre class="language-go" data-language="go"><code class="language-go">student <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token punctuation">)</span> </code></pre><p><strong>make用于内建类型(map,slice和channel)的内存分配</strong></p><p>map无法和slice一样自动内存扩充</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记3：Golang基础上</title>
      <link href="/2021/09/08/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%EF%BC%9Agolang%E5%9F%BA%E7%A1%80%E4%B8%8A/"/>
      <url>/2021/09/08/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%EF%BC%9Agolang%E5%9F%BA%E7%A1%80%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言的常用关键字"><a href="#Go语言的常用关键字" class="headerlink" title="Go语言的常用关键字"></a>Go语言的常用关键字</h1><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908225802707.png" alt="常用关键字"></p><p>func 函数                      package  打包</p><p>interface  接口                    var  定义变量</p><p>Go语言的特色关键字：  select    ,    go       ,       chan</p><h2 id="Go程序是通过package来组织的"><a href="#Go程序是通过package来组织的" class="headerlink" title="Go程序是通过package来组织的"></a>Go程序是通过package来组织的</h2><p><code>package&lt;pkgName&gt;</code></p><p><code>package main</code></p><p>main.main()函数是每一个独立的可运行程序的入口点</p><h2 id="var"><a href="#var" class="headerlink" title="var:"></a>var:</h2><div class="note simple"><p>var关键字是Go最基本的定义变量的方式，与C语言不用的是Go把变量类型放在变量名的后面。 </p></div><span class='p center logo large'>var variableName type</span><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">int</span>x <span class="token operator">=</span> <span class="token number">1</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p>简短声明不用定义类型:=</p><p><code>vname1,vname2,vname3 := v1,v2,v3</code></p><p>简短声明无法用于函数体外部，不然会报错。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">int</span> x <span class="token operator">=</span> <span class="token number">2</span> y <span class="token punctuation">,</span> z <span class="token operator">:=</span> <span class="token string">"he"</span> <span class="token punctuation">,</span> <span class="token string">"she"</span>         <span class="token comment">//  :=  是go语言常用的赋值</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span> y <span class="token punctuation">,</span> z<span class="token punctuation">)</span></code></pre><h2 id="const常量："><a href="#const常量：" class="headerlink" title="const常量："></a>const常量：</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token keyword">const</span> hello <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"zhl"</span>    <span class="token comment">//类型在参数后面</span></code></pre><h2 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h2><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908232328246.png" alt="数据类型"></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">complex64</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">2i</span>        <span class="token comment">//可以直接定义复数</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span></code></pre><p>slice是动态的</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token comment">//声明数组</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>x<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"%v"</span> <span class="token punctuation">,</span> x<span class="token punctuation">)</span></code></pre><p>结果<code>[1 0 0 0 0 0 0 0 0 10]</code></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记2：初识Golang</title>
      <link href="/2021/09/08/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%9A%E5%88%9D%E8%AF%86golang/"/>
      <url>/2021/09/08/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%9A%E5%88%9D%E8%AF%86golang/</url>
      
        <content type="html"><![CDATA[<h1 id="实现简单Golang程序的实现"><a href="#实现简单Golang程序的实现" class="headerlink" title="实现简单Golang程序的实现"></a>实现简单Golang程序的实现</h1><h3 id="写自己的包自己调用"><a href="#写自己的包自己调用" class="headerlink" title="写自己的包自己调用"></a>写自己的包自己调用</h3><p>在GOPATH目录下的src目录下创建test文件夹，文件夹下新建go文件，print_hello.go</p><p>代码如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> test<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"hello sai!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>在任意位置创建go文件，main.go， 代码如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"test"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    test<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>main.go代码运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908225019735.png" alt="代码运行成功"></p><p>GOPATH环境变量设置使得可以调用自己写的包，如 <code>package test</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记1：环境配置</title>
      <link href="/2021/09/08/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/09/08/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装Go语言开发包"><a href="#一、安装Go语言开发包" class="headerlink" title="一、安装Go语言开发包"></a>一、安装Go语言开发包</h1><div class="note default simple"><p>Go 语言是Google 于2009 年发布的第二款开源编程语言。Go 语言专门针对多处理器系统应用程序的编程进行了优化，使用Go 编译的程序可以媲美C 或C++ 代码的速度，而且更加安全、支持并行进程，并具有垃圾回收功能的程式语言。</p></div><h2 id="1-1-下载安装包"><a href="#1-1-下载安装包" class="headerlink" title="1.1 下载安装包"></a>1.1 下载安装包</h2><p>Golang开发包下载链接：<a href="https://golang.org/dl/">https://golang.org/dl/</a></p><p>点击链接进入下载页面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/SNAGHTML6ccf29.PNG" alt="Golang开发包下载界面"></p><p>根据需要点击链接进行下载，笔者这里选择Windows 64位版本。</p><h2 id="1-2安装Golang开发包"><a href="#1-2安装Golang开发包" class="headerlink" title="1.2安装Golang开发包"></a>1.2安装Golang开发包</h2><p>双击所下载的msi文件，一步一步点击<kbd>next</kbd>， <kbd>install</kbd>进行安装。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908154015598.png" alt="安装第一步"></p><p>此处最好默认C盘路径，不然可能会产生自己的go程序无法编译的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908154104214.png" alt="安装第二步"></p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908154205220.png" alt="安装第三步"></p><h2 id="1-3验证安装结果"><a href="#1-3验证安装结果" class="headerlink" title="1.3验证安装结果"></a>1.3验证安装结果</h2><kbd>win</kbd>  +  <kbd>R</kbd> 输入`cmd`进入命令行输入命令<pre class="language-none"><code class="language-none">gogo version </code></pre><p>查看结果如下，说明安装完成。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908154912364.png" alt="go"></p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908155800448.png" alt="golang版本"></p><h2 id="1-4配置GOPATH"><a href="#1-4配置GOPATH" class="headerlink" title="1.4配置GOPATH"></a>1.4配置GOPATH</h2><p>自动Golang采用Module的方式管理项目后，GOPATH目录已经不是那么重要了，目前主要用来存放依赖的Module库，生成的可执行文件等。GOPATH环境变量的配置参考上面的安装Go，配置到/etc/profile或者Windows下的系统变量里。</p><p>这个目录我们可以根据自己的设置指定，比如我的Window在e:\mygo下。该目录下有3个子目录，他们分别是：</p><pre class="language-none"><code class="language-none">├── bin├── pkg└── src</code></pre><ul><li><p>bin文件夹存放go install命名生成的可执行文件，可以把$GOPATH/bin路径加入到PATH环境变量里，就和我们上面配置的$GOROOT/bin一样，这样就可以直接在终端里使用我们go开发生成的程序了。</p></li><li><p>pkg文件夹是存在go编译生成的文件。</p></li><li><p>src存放的是非Go Module项目源代码。</p></li></ul><p><strong>配置GOPATH</strong></p><ul><li>此电脑(右键) —&gt; 属性—&gt; 高级系统设置—&gt; 环境变量—&gt; 选择系统变量的Path —&gt; 编辑</li><li>在其中加入：<code>%GOPATH%;</code></li><li>新建系统变量如下，变量值为你想设置的位置。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908154837203.png" alt="编辑环境变量"></p><h1 id="二、初试golang"><a href="#二、初试golang" class="headerlink" title="二、初试golang"></a>二、初试golang</h1><p>在桌面上新建main.go文件，用VScode打开，输入代码</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加不加分号都可以</span><span class="token punctuation">&#125;</span></code></pre><p>接着命令行输入命令</p><pre class="language-none"><code class="language-none">cd desktopgo run main.go</code></pre><p>程序运行，成功输出hello world。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908163930920.png" alt="运行helloworld"></p><h1 id="三、安装远程包"><a href="#三、安装远程包" class="headerlink" title="三、安装远程包"></a>三、安装远程包</h1><h3 id="3-1操作"><a href="#3-1操作" class="headerlink" title="3.1操作"></a>3.1操作</h3><p>运行命令<code>go get github.com/astaxie/beego</code></p><p>结果报错</p><pre class="language-none"><code class="language-none">connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.</code></pre><h3 id="3-2原因"><a href="#3-2原因" class="headerlink" title="3.2原因"></a>3.2原因</h3><p><em>所下载的库依赖有官方库，而官方被封禁网导致。</em></p><h3 id="3-3解决方法"><a href="#3-3解决方法" class="headerlink" title="3.3解决方法"></a>3.3解决方法</h3><p><strong>方法一：设置代理</strong></p><pre class="language-none"><code class="language-none">go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn##设置完后 重新执行即可go get##ps：##go1.11发布后,还发布一个goproxy提供代理服务，goproxy.cn是专门服务于中国的，依赖于七牛云##github地址： https:&#x2F;&#x2F;github.com&#x2F;goproxy</code></pre><p><strong>方法二：git clone 依赖包直接到GOPATH/src/下</strong></p><pre class="language-none"><code class="language-none">cd &#x2F;e  %GOPATH%&#x2F;src&#x2F;git clone https:&#x2F;&#x2F;github.com&#x2F;golang&#x2F;net.git##ps：https:&#x2F;&#x2F;github.com&#x2F;golang上为golang.org的镜像依赖包##所以，可以直接使用git clone代替go get</code></pre><h3 id="3-4成功解决"><a href="#3-4成功解决" class="headerlink" title="3.4成功解决"></a>3.4成功解决</h3><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908164905587.png" alt="安装远程包"></p><h1 id="四、编辑器"><a href="#四、编辑器" class="headerlink" title="四、编辑器"></a>四、编辑器</h1><h2 id="sublime-text-4"><a href="#sublime-text-4" class="headerlink" title="sublime text 4"></a>sublime text 4</h2><ol><li>首先打开Sublime Text,使用快捷键Shift+Ctrl+P,弹出查找栏</li><li>在搜索框中直接输入关键字 install ,出现下拉选项。</li><li>点击选择其中的：Install Package Control,等待安装</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908165241193.png" alt="安装包管理" style="zoom: 67%;" /></p><p>安装成功之后会有提示，也可以通过Preferences查看如果有Package Control证明安装成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908165343552.png" alt="安装成功"></p><p>安装完之后就可以安装Sublime的插件了。需安装GoSublime、SidebarEnhancements和Go Build，安装插件之后记得重启Sublime生效，<strong>Ctrl+Shift+p打开Package Controll 输入<code>pcip</code>（即“Package Control: Install Package”的缩写）。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908170551991.png" alt="sublime text插件包"></p><p>这个时候输入GoSublime，按确定就开始安装了。同理应用于SidebarEnhancements和Go Build。</p><p>验证是否安装成功，你可以打开Sublime，打开main.go，看看语法是不是高亮了，输入<code>import</code>是不是自动化提示了，<code>import &quot;fmt&quot;</code>之后，输入<code>fmt.</code>是不是自动化提示有函数了。</p><p>如果已经出现这个提示，那说明你已经安装完成了，并且完成了自动提示。</p><p>如果没有出现这样的提示，一般就是你的<code>$PATH</code>没有配置正确。你可以打开终端，输入gocode，是不是能够正确运行，如果不行就说明<code>$PATH</code>没有配置正确。 (针对XP)有时候在终端能运行成功,但sublime无提示或者编译解码错误,请安装sublime text3和convert utf8插件试一试</p><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><h4 id="1-添加Go插件"><a href="#1-添加Go插件" class="headerlink" title="1.  添加Go插件"></a>1.  添加Go插件</h4><p>（1）首先，启动Intellij IDEA，点击File —&gt; Settings —&gt; Plugins，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908173600792.png" alt="添加go插件" style="zoom: 50%;" /></p><h4 id="2-配置GOROOT"><a href="#2-配置GOROOT" class="headerlink" title="2. 配置GOROOT"></a>2. 配置GOROOT</h4><p>点击File —&gt; Settings —&gt; Languages &amp; Frameworks —&gt; Go —&gt; GOROOT，如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908173745704.png" alt="goroot" style="zoom:50%;" /></p><h4 id="3-配置GOPATH"><a href="#3-配置GOPATH" class="headerlink" title="3. 配置GOPATH"></a>3. 配置GOPATH</h4><p>点击File —&gt; Settings —&gt; Languages &amp; Frameworks —&gt; Go —&gt; GOPATH，如果按1中Go语言环境搭建的步骤，相信到这边的 Global GOPATH 就有了如下截图所示的内容，在下面的 Project GOPATH 可以添加我们自己的工程路径。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908173831179.png" alt="gopath" style="zoom:50%;" /></p><h4 id="4-运行go-项目"><a href="#4-运行go-项目" class="headerlink" title="4. 运行go 项目"></a>4. 运行go 项目</h4><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210908174039119.png" alt="go项目"></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Golang学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>365算法特训营笔记2：C++基础2分支结构</title>
      <link href="/2021/09/05/365%E7%AE%97%E6%B3%95%E7%89%B9%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B02%EF%BC%9AC-%E5%9F%BA%E7%A1%802/"/>
      <url>/2021/09/05/365%E7%AE%97%E6%B3%95%E7%89%B9%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B02%EF%BC%9AC-%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<h1 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h1><div class="note notice simple"><p>对条件做出判断，从而决定用那一段代码，使用选择结构语句。if 条件有三种语法形式。 </p></div><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210905222211035.png" alt="选择结构语句"></p><div class="note info simple"><p>if 语句 —— 单分支结构 </p></div><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210905222441637.png" alt="单分支结构"></p><div class="note info simple"><p>if —- else 语句 —— 双分支结构 </p></div><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210905222543089.png" alt="双分支结构"></p><div class="note info simple"><p>if 语句的嵌套 </p></div><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210905222900676.png" alt="if 语句的嵌套 "></p><h1 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h1><p><strong>switch 条件语句</strong>也是一种常用的选择语句，和if 语句不同， 她只能针对某个表达式的值做出判断，从而决定程序执行哪一段代码。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/3/image-20210905223202104.png" alt="switch 条件语句"></p><h1 id="关系运算与逻辑运算"><a href="#关系运算与逻辑运算" class="headerlink" title="关系运算与逻辑运算"></a>关系运算与逻辑运算</h1><div class="table-container"><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>关系运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr><tr><td>三目运算符</td><td>用于根据表达式的值执行相应的语句</td></tr><tr><td>逗号运算符</td><td>用于连接并执行若干表达式，并返回最后一个表达式的值</td></tr><tr><td>位运算符</td><td>用于处理数据的位运算</td></tr><tr><td><code>sizeof</code>运算符</td><td>用于求字节数长度</td></tr></tbody></table></div><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算用于对两个数值或变量进行比较，其结果是一个逻辑值(“真” 或 “ 假”)。</p><div class="table-container"><table><thead><tr><th><strong>运算符</strong></th><th><strong>运算</strong></th><th><strong>范例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4  == 3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4  != 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4  &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4  &gt; 3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4  &lt;= 3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4  &gt;= 3</td><td>1</td></tr></tbody></table></div><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符用于判断数据的真假，其结果仍为 “真” 或 “ 假” 。</p><div class="table-container"><table><thead><tr><th><strong>运算符</strong></th><th><strong>运算</strong></th><th><strong>范例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真  如果a为真，则!a为假</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a&amp;&amp;b</td><td>如果a和b都为真，则结果为真否则为假</td></tr><tr><td>\</td><td>\</td><td></td><td>或</td><td>a \</td><td>\</td><td>b</td><td>如果a和b有一个或一个以上为真，则结果为真，二者都为假，结果为假</td></tr></tbody></table></div><h1 id="相关实例"><a href="#相关实例" class="headerlink" title="相关实例"></a>相关实例</h1><ul><li><p>示例一</p><p>输入一个学生的成绩score， 判断是否及格。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> score <span class="token punctuation">;</span>    cin <span class="token operator">>></span> score <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"及格"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>示例二</p><p>输入一个学生的成绩score， 判断是及格还是不及格。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> score <span class="token punctuation">;</span>    cin <span class="token operator">>></span> score<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"及格"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"不及格"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>示例三</p><p>输入一个学生的成绩score， 判断其成绩等级(&lt;60不及格，60-69及格，70-79中等，80-89良好，90-100优秀。)。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> score <span class="token punctuation">;</span>    cin <span class="token operator">>></span> score <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">70</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"中等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"良好"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"优秀"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"及格"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"不及格"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><ul><li><p>示例四</p><p>输入一个年份，判断其是闰年好事平年(非整百年：能被4整除的为闰年；整百年：能被400整除的是闰年。)。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> year <span class="token punctuation">;</span>    cin <span class="token operator">>></span> year<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>year <span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year<span class="token operator">%</span><span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这一年是闰年。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这一年是平年。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><ul><li><p>示例五</p><p>输入一个整数，判断其是否为水仙花数。（所谓水仙花数是指一个n位数(n &gt;=3) , 他的每个位上的数字n次幂之和等于本身。例如，3位数153是水仙花数，各位数字的立方和$ 1^3 + 5^3 + 3^3 = 153 $。）。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token punctuation">,</span> a <span class="token punctuation">,</span> b <span class="token punctuation">,</span> c <span class="token punctuation">;</span>    cin <span class="token operator">>></span> num <span class="token punctuation">;</span>    a <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span> <span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> num<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token operator">*</span>a <span class="token operator">+</span> b<span class="token operator">*</span>b<span class="token operator">*</span>b <span class="token operator">+</span> c<span class="token operator">*</span>c<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">"是水仙花数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>   cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">"不是水仙花数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>示例六</p><p>输入一个月份，判断属于什么季节（阳历3-5月为春季，6-8月为夏季，9-11月为秋季，12-来年2月为冬季。）。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> month <span class="token punctuation">,</span> season <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> month <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;=</span> mouth <span class="token operator">&amp;&amp;</span> month <span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span>        season <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">&lt;=</span> month <span class="token operator">&amp;&amp;</span> month <span class="token operator">&lt;=</span><span class="token number">8</span><span class="token punctuation">)</span>        season <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;=</span> month <span class="token operator">&amp;&amp;</span> month <span class="token operator">&lt;=</span><span class="token number">11</span><span class="token punctuation">)</span>        season <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> month <span class="token operator">&amp;&amp;</span> month <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span>        season <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"春季"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"夏季"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"秋季"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冬季"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入的月份不对！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><h3 id="运算千万不要写成赋值"><a href="#运算千万不要写成赋值" class="headerlink" title="== 运算千万不要写成赋值 ="></a>== 运算千万不要写成赋值 =</h3><p>例如 ：if(a == b)    <del>if(a = b)</del></p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><emp>&&优先级高于||</emp><emp>&& 、|| 优先级低于关系运算</emp><emp>！优先级高于所有关系运算和算术运算</emp><h3 id="switch语句-1"><a href="#switch语句-1" class="headerlink" title="switch语句"></a>switch语句</h3><emp>switch语句执行完一个case之后不会自动停止，如果需要停止，必须使用break语句</emp><emp>switch语句中的每一个case必须是一个单独的值。这个值必须是整数或字符，不能是浮点数。如果涉及取值范围、浮点测试、或比较，则先使用if else转换。</emp>]]></content>
      
      
      <categories>
          
          <category> 365算法特训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
            <tag> C ++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>365算法特训营笔记1：C++基础1</title>
      <link href="/2021/09/04/365%E7%AE%97%E6%B3%95%E7%89%B9%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B01%EF%BC%9AC-%E5%9F%BA%E7%A1%801/"/>
      <url>/2021/09/04/365%E7%AE%97%E6%B3%95%E7%89%B9%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B01%EF%BC%9AC-%E5%9F%BA%E7%A1%801/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>什么是C++ </p></div><p>C++是在C语言基础上开发的一种集面向对象编程、泛型编程和过程化编程于一体的编程语言。</p><p>不同于C语言，C++是一种面向对象的语言，在C语言的基础上，C++扩充了一些自己的特有的知识，如bool类型、重载函数、模板、STL等。</p><h1 id="程序设计入门"><a href="#程序设计入门" class="headerlink" title="程序设计入门"></a>程序设计入门</h1><h2 id="第一个C-程序"><a href="#第一个C-程序" class="headerlink" title="第一个C++程序"></a>第一个C++程序</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world!"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p>C++中的输入、输出头文件iostream</p><p>i ——input输入</p><p>o ——output输出</p><p>stream———流</p><p>C语言中的头文件以.h后缀，C++中头文件不加后缀。C语言中的string.h头文件，C++用cstring，C语言中的math头文件，C++用cmath头文件。这不只是形式上的改变，其实现也有所不同。</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>C++标准库中所有标识符并定义于一个名为std的命名空间中，std称为标准命名空间(standard，标准的)。</p><p>引入标准命名空间方法：</p><p><code>using namespace std;</code>          //语句末尾的分号不能少。</p><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>主函数main()是程序的入口，每个程序都需要一个主函数。主函数返回值为int 型。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="输入输出、格式"><a href="#输入输出、格式" class="headerlink" title="输入输出、格式"></a>输入输出、格式</h2><p>标准输入输出流的对象和操作方法都是由istream和ostream两个类提供的，这两个类继承自ios基类，他们预定义了标准输入输出流对象，并且提供了多种形式的输入输出功能。</p><p>C++在进行输入时需要从流中提取数据，在输入时需要向流中插入数据，提取和插入是通过在流类库中重载”&gt;&gt;”和”&lt;&lt;”运算符来实现的。</p><h3 id="四个预定义的标准流对象"><a href="#四个预定义的标准流对象" class="headerlink" title="四个预定义的标准流对象"></a>四个预定义的标准流对象</h3><p>cin、cout 、cerr 、 clog</p><p>其中cin是istream类的对象，用于处理标准输入(即键盘输入) ；cout是ostream类的对象，用于处理标准输出(即屏幕输出)，cerr和clog也都是ostream类的对象，用于处理标准出错信息，并将信息显示到屏幕上。</p><p>在这四个标准流对象中，除了cerr不支持缓冲外，其余3个都带有缓冲区。</p><div class="table-container"><table><thead><tr><th><strong>对象名</strong></th><th><strong>所属类</strong></th><th><strong>对应设备</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>cin</strong></td><td>istream</td><td>键盘</td><td>标准输入，有缓冲</td></tr><tr><td><strong>cout</strong></td><td>ostream</td><td>屏幕</td><td>标准输出，有缓冲</td></tr><tr><td><strong>cerr</strong></td><td>ostream</td><td>屏幕</td><td>标准错误输出，无缓冲</td></tr><tr><td><strong>clog</strong></td><td>ostream</td><td>屏幕</td><td>标准错误输出，有缓冲</td></tr></tbody></table></div><p><strong>cin与提取运算符“&gt;&gt;”结合使用，cout、cerr与clog与插入运算符“&lt;&lt;”结合使用，完成了C++中所有的输入输出操作。</strong></p><details cyan open><summary> cin </summary>              <div class='content'>              <p>cin是istream类的对象，它从标准输入设备（键盘）获取数据，程序中的变量通过提取运算符“&gt;&gt;”从流中提取数据，然后送给cin对象，由cin将对象送到指定地方。</p>              </div>            </details><div class="note success modern"><p>cin是带缓冲区的输入流对象，只有在输入完数据按下回车键后，该行数据才被送入键盘缓冲区，形成输入流，提取运算符“&gt;&gt;”才能从中提取数据。</p></div><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> acin <span class="token operator">>></span> a <span class="token punctuation">;</span></code></pre><p>此时若从键盘上输入10，则10只是存入缓冲区而并不能为“&gt;&gt;”运算符提取，当按下回车键后，相当于执行endl语句，则缓冲区中内容才被刷新形成输入流，被“&gt;&gt;”运算符提取，然后传递给cin对象，由cin对象送到变量a中存储。</p><p>从流中读取数据要保证能正常进行。例如，如果针对上述代码从键盘输入“abc”，则提取操作会失败，此时，cin流被置为出错状态。只有在正常状态时才能从输入流中提取数据，这也是C++I/O的安全性体现。</p><div class="note success modern"><p>除了单个变量读取，cin对象也可以一次读入多个变量的值，因为“&gt;&gt;”运算符返回的是istream的引用，可连续提取数据。</p></div><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> c1<span class="token punctuation">,</span>c2<span class="token punctuation">;</span>cin <span class="token operator">>></span> c1 <span class="token operator">>></span> c2<span class="token punctuation">;</span></code></pre><p>若从键盘输入’a’、’b’两个字符，上面的cin语句把输入的’a’字符送给变量c1，把输入的’b’字符送给c2。当输入多个数值时，要在数值之间加空格以示区分，cin读到空格时，就能够区别输入中的各个数值。</p><p>除了在输入的数据之间加空格，也可以在每输入一个数据后按回车键，这样完全可以正确的读入数据。</p><div class="note success modern"><p>采用cin对象也可以对不同类型的变量读入数据。</p></div><pre class="language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token punctuation">;</span><span class="token keyword">float</span> f<span class="token punctuation">;</span>cin <span class="token operator">>></span> s <span class="token operator">>></span> f<span class="token punctuation">;</span></code></pre><p>当从键盘正确输入字符串和float类型的值时，cin将它们分别存储到对应变量中。字符串的读入也可以采用字符数组存储，例如：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> str<span class="token punctuation">;</span></code></pre><p>如果用一个字符数组存储字符串，要确保输入的字符串不超出字符数组的大小，否则会发生溢出，破坏内存中的其他数据。</p><details cyan open><summary> cout </summary>              <div class='content'>              <p>cout是ostream类预定义的对象，对应的标准设备为屏幕，称作标准输出对象或屏幕输出对象，但也可以重定向输出到磁盘文件。用户可以通过cout对象调用ostream类的插入运算符和成员函数来输出信息。</p>              </div>            </details><div class="note success modern"><p>利用cout对象可以直接输出常量值，代码如下所示：</p></div><pre class="language-cpp" data-language="cpp"><code class="language-cpp">cout <span class="token operator">&lt;&lt;</span> <span class="token number">10</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'a'</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C++"</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></code></pre><p>在输出常量值时，直接将要输出的内容放在“&lt;&lt;”运算符后面即可。</p><div class="note success modern"><p>利用cout对象输出变量的值，代码如下所示：</p></div><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span>string s <span class="token operator">=</span> <span class="token string">"C++"</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>       <span class="token comment">//输出int 类型的变量</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>       <span class="token comment">//输出string类型的变量</span>cout <span class="token operator">&lt;&lt;</span> f <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>       <span class="token comment">//输出float类型的变量</span></code></pre><p>在用cout输出变量值时，不必设置以什么格式输出，“&lt;&lt;”运算符会根据变量的数据类型自动调用相匹配的重载函数，而正确输出。这比C语言中的printf()函数用法更简便。</p><div class="note success modern"><p>利用cout对象输出变量的值，代码如下所示：</p></div><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> b <span class="token operator">=</span> a <span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>string s <span class="token operator">=</span> <span class="token string">"C++"</span><span class="token punctuation">;</span>string<span class="token operator">*</span> ps <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//输出结果是指针p的值，a变量的地址</span>cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//输出结果是b的值10</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//输出结果是指针p指向的变量的值，即a的值10</span>cout <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//输出结果是指针ps的值，s变量的地址</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//输出结果是指针ps指向的变量的值，即s的值"C++"</span></code></pre><p>当输出数据类型为指针或引用时，与printf()函数的用法一致，不加“<em>”符号是输出指针的值，即变量的地址，带有“</em>”符号输出的是指针指向的变量的值，它比printf()的简便之处在于不必设置数据的输出格式。</p><div class="note success modern"><p>利用cout对象可以连续输出数据，代码如下所示：</p></div><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></code></pre><p>当用户在程序中包含了头文件iostream时，编译器调用相应的构造函数产生这4个标准流对象，用户在程序中就可以直接使用它们了。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> r <span class="token punctuation">,</span> c <span class="token punctuation">,</span> s <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入圆的半径："</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> r <span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">*</span> pi <span class="token operator">*</span> r <span class="token punctuation">;</span>    s <span class="token operator">=</span> pi <span class="token operator">*</span> r <span class="token operator">*</span> r <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"圆的周长为："</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"圆的面积为："</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="精度、域宽、填充字符的设置"><a href="#精度、域宽、填充字符的设置" class="headerlink" title="精度、域宽、填充字符的设置"></a>精度、域宽、填充字符的设置</h2><h3 id="浮点数精度设置"><a href="#浮点数精度设置" class="headerlink" title="浮点数精度设置"></a>浮点数精度设置</h3><p><code>#include &lt;iomanip&gt;</code></p><div class="table-container"><table><thead><tr><th><strong>操作符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><strong>setfill(char  c)</strong></td><td>设置以c表示的填充字符</td></tr><tr><td><strong>setprecision(int n) </strong></td><td>设置以n表示的数值精度</td></tr><tr><td><strong>setw(int n)</strong></td><td>设置以n表示的域宽</td></tr></tbody></table></div><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"精度设置："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//设置不同的精度</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"当前精度为："</span> <span class="token operator">&lt;&lt;</span> cout<span class="token punctuation">.</span><span class="token function">precision</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"当前域宽："</span> <span class="token operator">&lt;&lt;</span> cout<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//默认是右对齐</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"当前填充字符："</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token function">setfill</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//setfill()函数可以直接插入流中</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><div class="table-container"><table><thead><tr><th><strong>操作符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><strong>oct</strong></td><td>以八进制格式输出数据</td></tr><tr><td><strong>dec</strong></td><td>以十进制格式输出数据</td></tr><tr><td><strong>hex</strong></td><td>以十六进制格式输出数据</td></tr><tr><td><strong>endl</strong></td><td>插入换行符并刷新输出缓冲流</td></tr><tr><td><strong>uppercase</strong></td><td>十六进制输出时字母大写</td></tr><tr><td><strong>skipws</strong></td><td>输出时跳过空白</td></tr><tr><td><strong>flush</strong></td><td>刷新流</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img/img/3/image-20210905100820915.png" alt="" style="zoom:80%;" /></p><h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><div class="note simple info flat"><p>+加法、-减法、*乘法、/除法、%取余  </p></div><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token punctuation">;</span>    <span class="token keyword">int</span> ge <span class="token punctuation">,</span> shi <span class="token punctuation">,</span> bai <span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token punctuation">;</span>    ge <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span> <span class="token punctuation">;</span>    shi <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    bai <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ge <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shi <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> bai <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><div class="table-container"><table><thead><tr><th><strong>运算符</strong></th><th><strong>运算</strong></th><th><strong>范例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>b=4;-b;</td><td>-4</td></tr><tr><td>+</td><td>加</td><td>5+5</td><td>10</td></tr><tr><td>-</td><td>减</td><td>6-4</td><td>2</td></tr><tr><td>*</td><td>乘</td><td>3*4</td><td>12</td></tr><tr><td>/</td><td>除</td><td>5/5</td><td>1</td></tr><tr><td>%</td><td>取模</td><td>7%5</td><td>2</td></tr><tr><td>++</td><td>自增（前）</td><td>a=2;b=++a;</td><td>a=3;b=3;</td></tr><tr><td>++</td><td>自增（后）</td><td>a=2;b=a++;</td><td>a=3;b=2;</td></tr><tr><td>—</td><td>自减（前）</td><td>a=2;b=—a;</td><td>a=1;b=1;</td></tr><tr><td>—</td><td>自减（后）</td><td>a=2;b=a—;</td><td>a=1;b=2;</td></tr></tbody></table></div><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><div class="table-container"><table><thead><tr><th><strong>运算符</strong></th><th><strong>运算</strong></th><th><strong>范例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=3;b=2;</td><td>a=3;b=2;</td></tr><tr><td>+=</td><td>加等于</td><td>a=3;b=2;a+=b;</td><td>a=5;b=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=3;b=2;a-=b;</td><td>a=1;b=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=3;b=2;a*=b;</td><td>a=6;b=2;</td></tr><tr><td>/=</td><td>除等于</td><td>a=3;b=2;a/=b;</td><td>a=1;b=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3;b=2;a%=b;</td><td>a=1;b=2;</td></tr></tbody></table></div><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token punctuation">,</span> a <span class="token punctuation">,</span> b <span class="token punctuation">,</span> c <span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token punctuation">;</span>    a <span class="token operator">=</span> n <span class="token operator">++</span> <span class="token punctuation">;</span>    b <span class="token operator">*=</span> <span class="token number">10</span> <span class="token punctuation">;</span>    c <span class="token operator">/=</span> <span class="token number">10</span> <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 365算法特训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习2：PHP文件格式</title>
      <link href="/2021/09/03/PHP%E5%AD%A6%E4%B9%A02%EF%BC%9Aphp%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
      <url>/2021/09/03/PHP%E5%AD%A6%E4%B9%A02%EF%BC%9Aphp%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token number">2222</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//中间是php的代码部分</span><span class="token keyword">echo</span> <span class="token number">4444</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token number">1111</span>  <span class="token comment">//echo就是输出的意思</span><span class="token delimiter important">?></span></span></code></pre><p>可以使用段标签风格</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token keyword">echo</span> <span class="token number">3333</span><span class="token punctuation">;</span>  <span class="token comment">//需要在php.ini配置文件中修改，ctrl+F搜索 short_open_tag 改成on</span><span class="token delimiter important">?></span></span></code></pre><p>修改完配置文件后重启服务</p>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习1：环境搭建</title>
      <link href="/2021/09/03/PHP%E5%AD%A6%E4%B9%A01%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/09/03/PHP%E5%AD%A6%E4%B9%A01%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="一、WAMP介绍"><a href="#一、WAMP介绍" class="headerlink" title="一、WAMP介绍"></a>一、WAMP介绍</h2><p>Windows下的Apache+Mysql/MariaDB+Perl/PHP/Python，一组常用来搭建动态网站或者服务器的<a href="https://baike.baidu.com/item/开源软件/8105369">开源软件</a>，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。随着开源潮流的蓬勃发展，<a href="https://baike.baidu.com/item/开放源代码/114160">开放源代码</a>的LAMP已经与J2EE和.Net<a href="https://baike.baidu.com/item/商业软件/3528488">商业软件</a>形成三足鼎立之势，并且该软件开发的项目在软件方面的投资成本较低，因此受到整个IT界的关注。LAMP是基于Linux，Apache，MySQL/MariaDB和PHP的开放资源网络开发平台，PHP是一种有时候用Perl或Python可代替的编程语言。这个术语来自欧洲，在那里这些程序常用来作为一种标准开发环境。名字来源于每个程序的第一个字母。每个程序在所有权里都符合开放源代码标准：Linux是开放系统；Apache是最通用的<a href="https://baike.baidu.com/item/网络服务器/99096">网络服务器</a>；mySQL是带有基于网络管理附加工具的关系数据库；PHP是流行的对象<a href="https://baike.baidu.com/item/脚本语言/1379708">脚本语言</a>，它包含了多数其它语言的优秀特征来使得它的网络开发更加有效。开发者在Windows操作系统下使用这些Linux环境里的工具称为使用WAMP。</p><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><p>刚开始学习搭建安装一个简易集成环境WampServer</p><p>WampServer 　Wamp就是Windows Apache Mysql PHP集成安装环境，即在window下的apache、php和mysql的服务器软件。PHP扩展、Apache模块，开启/关闭鼠标点点就搞定，再也不用亲自去修改配置文件了，WAMP它会去做。再也不用到处询问php的安装问题了，WAMP一切都搞定了，这个软件在win平台上使用的较多。</p><div class="note info modern"><p><a href="https://sourceforge.net/projects/wampserver/">WampServer下载链接地址</a></p></div><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/nowimage-20210903002457222.png" alt="安装过程"></p><h3 id="安装过程的问题"><a href="#安装过程的问题" class="headerlink" title="安装过程的问题"></a>安装过程的问题</h3><h4 id="安装时缺少VCRUNTIME140-dll"><a href="#安装时缺少VCRUNTIME140-dll" class="headerlink" title="安装时缺少VCRUNTIME140.dll"></a>安装时缺少VCRUNTIME140.dll</h4><p>　　官方给的提示：</p><p>　　— Visual C++ Packages —</p><p>　　The MSVC runtime libraries VC9, VC10, VC11 are required for Wampserver 2.4, 2.5 and 3.0, even if you use only Apache and PHP versions with VC11. Runtimes VC13, VC14 is required for PHP 7 and Apache 2.4.17</p><p>　　– VC9 Packages (Visual C++ 2008 SP1)</p><p>　　<a href="http://www.microsoft.com/en-us/download/details.aspx?id=5582">http://www.microsoft.com/en-us/download/details.aspx?id=5582</a></p><p>　　<a href="http://www.microsoft.com/en-us/download/details.aspx?id=2092">http://www.microsoft.com/en-us/download/details.aspx?id=2092</a></p><p>　　– VC10 Packages (Visual C++ 2010 SP1)</p><p>　　<a href="http://www.microsoft.com/en-us/download/details.aspx?id=8328">http://www.microsoft.com/en-us/download/details.aspx?id=8328</a></p><p>　　<a href="http://www.microsoft.com/en-us/download/details.aspx?id=13523">http://www.microsoft.com/en-us/download/details.aspx?id=13523</a></p><p>　　<strong>– VC11 Packages (Visual C++ 2012 Update 4)</strong></p><p>　　The two files VSU4vcredist_x86.exe and VSU4vcredist_x64.exe to be download are on the same page: <a href="http://www.microsoft.com/en-us/download/details.aspx?id=30679">http://www.microsoft.com/en-us/download/details.aspx?id=30679</a></p><p>　　– VC13 Packages] (Visual C++ 2013[)</p><p>　　The two files VSU4vcredist_x86.exe and VSU4vcredist_x64.exe to be download are on the same page: <a href="https://www.microsoft.com/en-us/download/details.aspx?id=40784">https://www.microsoft.com/en-us/download/details.aspx?id=40784</a></p><p>　　– VC14 Packages (Visual C++ 2015)</p><p>　　The two files vcredist_x86.exe and vcredist_x64.exe to be download are on the same page:</p><p>　　<a href="http://www.microsoft.com/fr-fr/download/details.aspx?id=48145">http://www.microsoft.com/fr-fr/download/details.aspx?id=48145</a></p><p>　　If you have a 64-bit Windows, you must install both 32 and 64bit versions, even if you do not use Wampserver 64 bit.</p><p>　　不同版本对应的The MSVC runtime libraries也不一样。建议安装全了，要不会报错误(32bit 和 64bit 全都安装)。</p><p>报错缺失MSVCR120.ddl时，下载</p><p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=40784">https://www.microsoft.com/en-us/download/details.aspx?id=40784</a></p><p>报错缺失MSVCR110.ddl时，下载</p><p> <a href="http://www.microsoft.com/zh-cn/download/details.aspx?id=30679">http://www.microsoft.com/zh-cn/download/details.aspx?id=30679</a></p><h2 id="三、环境配置"><a href="#三、环境配置" class="headerlink" title="三、环境配置"></a>三、环境配置</h2><ul><li>WampServer</li></ul><p>安装完之后屏幕右下角就会出来一个标记![WampServer 64位]<img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/nowimage-20210903003242401.png" alt="image-20210903003242401">，你右键单击，然后依次选择Language—Chinese，</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/now80cfc1efc0fb931b4fb982373207e870.jpg" alt="WampServer 64位" style="zoom:67%;" /></p><ul><li>MySQL以及PhpMyAdmin的配置</li></ul><p>​    单独安装过MySQL的朋友们肯定会发现一个问题，以前安装MySQL的时候是需要配置一个root的密码的，可是安装wampserver的时候，至始至终都没有配置密码的步骤，那岂不是MySQL为空密码了？答案是肯定的，确实是空密码。这样岂不是很不安全？非常对，所以我们要修改密码</p><p>​    1、左键点击，选择“phpMyAdmin”，就会打开phpMyAdmin的管理页面，点击右上方的“权限”，一般情况下会出现如图所示的表格，我们要做的就是点击每一行用户名为root的右边的。</p><p><img src="http://src.onlinedown.net/d/file/p/2017-11-14/cf7c62543e4114b75df7ff81799b1c00.jpg" alt="WampServer 64位" style="zoom:80%;" /></p><p>​    2、点击后，找到如图二所示的修改密码区域，填入欲修改的密码，再点击右下方的执行，片刻之后上方就会出现修改成功的提示，每一个root用户均需要做此操作，如果一时半会想不到一个好的密码，也可以使用“生成密码”功能生成一个随机的密码，但是这个密码一定要记住，忘记了麻烦可就大了。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/now4a72c367562a3bb4c065ef92dbf74a38.jpg" alt="WampServer 64位" style="zoom:80%;" /></p><p>​    备注：修改密码后可以看到 对应账户 密码栏 由原来的“否”变为“是”，如上图 <a href="http://www.onlinedown.net/soft/262731.htm">绿色</a>圈出部分。那么添加新用户（接下来会详细讲到）、删除用户 如 上图红色标出部分即可完成操作！</p><p>​    3、做完上述操作之后重启一下MySQL服务，然后刷<a href="http://www.onlinedown.net/soft/88695.htm">新页</a>面，大家就会发现出现了如图所示的错误，这是为什么呢？</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/nowac6c5869af807e5be40d0fb95a1168f5.jpg" alt="WampServer 64位" style="zoom:80%;" /></p><p>​    是因为刚才我们修改了MySQL的密码，但是没有修改phpMyAdmin与MySQL通讯的密码，怎么改呢？打开wampserver安装目录，然后依次打开wampappsphpmyadmin3.3.9，用记事本或者DW软件打开里面的config.inc.php，找到“$cfg[‘Servers’][$i][‘password’] = ‘’;”，在最后的两个单引号里面输入刚才修改的那个密码，然后保存，操作完毕之后再刷新一下phpMyAdmin的页面，是不是<a href="http://www.onlinedown.net/soft/288759.htm">恢复</a>正常了呢？</p><p><img src="http://src.onlinedown.net/d/file/p/2017-11-14/2045afd52e74b5825f506392f6116a99.jpg" alt="WampServer 64位"></p><p>​    4、做完了上面的配置之后，我们需要给MySQL数据库创建一个用户以及用户对应的数据库，同样，点击右上方的权限按钮，找到中间偏下面的一个“添加新用户”链接，按照图示的方法创建一个用户以及对应的数据库，并赋予单个数据库管理权限，下面的资源限制则是按照实际情况填写就可以了，一般自用的情况下那个区域是可以保留默认的，最后再点击右下角的“执行”按钮，相应的用户以及数据库就创建好了。</p><p><img src="http://src.onlinedown.net/d/file/p/2017-11-14/cc72401dbd73ece13dee46eb8bca5e1e.jpg" alt="WampServer 64位" style="zoom:67%;" /></p><ul><li>Apache的配置</li></ul><p>​    虽说wampserver已经帮我们集成好了Apache，但是有些细节的东西还是需要我们自己去完善的，下面就让我们来一一对wampserver自带的Apache进行完善。</p><p>​    1、刚装完wampserver之后，有没有性子比较急的朋友们可能会尝试通过外网访问我们配置好的wampserver服务器，但是会发现通过外网访问会提示权限不够，这是为什么呢？是因为wampserver默认是只允许127.0.0.1访问的，也就是只允许本机访问，怎么修改呢？依次点击—Apache—httpd.conf，找到如图所示的地方，大概在第234行，把“Deny from all”删掉，再把“Allow from 127.0.0.1”改成“Allow from all”，就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/now875d573c07e5567113a792108dd912e7.jpg" alt="WampServer 64位"></p><p>​    2、继续搜索，找到如图所示的两个地方（分别在大约第190行和第225行），分别把“AllowOverride None”改成“AllowOverride  All”（这一步操作是针对使用了URL重写功能的朋友，如果没有用到的话这步建议不要做修改，因为改了这个之后Apache的安全性会略微有所下降。）</p><p>​    3、开启URL重写功能，当然咯，如果大家觉得URL重写功能没有必要的话，这个可以直接无视，但是如果开了的话，上面的第二条就必须做一下了，否则很容易造成错误。按照上面的方法打开httpd.conf文件，找到#LoadModule rewrite_module  modules/mod_rewrite.so，然后把前面的“#”删掉，就可以了，当然咯，如果想要这个修改生效的话，还需要立即重启一下apache服务。</p><p>​    4、相信大家还记得上面更改wampserver的“www  目录”指向路径的方法吧？我曾经说这个方法只是改了wamp中“www  目录”这个链接而已，那如果要真正修改，我们应该怎么改呢？很简单，打开httpd.conf，寻找“DocumentRoot”大概在第178行，把后面的值改成我们实际网站需要的路径，再寻找“<Directory "c:/wamp/www/">”，同样把后面的值改成我们网站存放的实际地址，就OK了。</p><ul><li><p>配置PHP</p><p>php (超文本处理器)</p><p>PHP的配置比较简单，只需要进行一些基本设置的修改就可以了，依次点击<img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/nowimage-20210903003806963.png" alt="WampServer 64位">—PHP—php.ini，找到这三个地方：short_open_tag = Off（是否允许使用 PHP 代码开始标志的缩写形式（&lt;? ?&gt; ）。)；</p></li></ul><p>​    memory_limit = 128M（最大使用<a href="http://www.onlinedown.net/soft/112455.htm">内存</a>的大小）；upload_max_filesize = 2M（上传附件的最大值），第一个需要改成on，否则的话很多php程序都会运行不了，后面的两项就按照大家的实际需求更改就行了。</p><p>​    PHP也可以切换版本 PHP — PHP版本来切换PHP的语言版本。</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/nowimage-20210903005106785.png" alt="WampServer-PHP-php.ini"></p><h2 id="四、访问网站"><a href="#四、访问网站" class="headerlink" title="四、访问网站"></a>四、访问网站</h2><p>打开浏览器输入 localhost 或 127.0.0.1  (本机IP 地址)</p><p>在www目录下面创建代码， PHP文件，例如localhost/1.php  进行访问</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/nowimage-20210903005649747.png" alt="www文件夹下创建php代码文件"></p><p>phpinfo();  显示所有的php 的信息</p><p>他是模块化的，需要用什么就开启那个模块</p><p>参考博客：<a href="https://www.cnblogs.com/hitwgs/p/8723142.html">https://www.cnblogs.com/hitwgs/p/8723142.html</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACwing算法笔记二：整数二分，浮点数二分</title>
      <link href="/2021/09/02/ACwing%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9A%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%EF%BC%8C%E6%B5%AE%E7%82%B9%E6%95%B0%E4%BA%8C%E5%88%86/"/>
      <url>/2021/09/02/ACwing%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9A%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86%EF%BC%8C%E6%B5%AE%E7%82%B9%E6%95%B0%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="数的范围"><a href="#数的范围" class="headerlink" title="数的范围"></a>数的范围</h2><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p><a href="https://www.acwing.com/problem/content/791/">原题链接</a></p></div><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个按照升序排列的长度为n的整数数组，以及 q 个查询。<br>对于每个查询，返回一个元素k的起始位置和终止位置（位置从0开始计数）。<br>如果数组中不存在该元素，则返回“-1 -1”。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数n和q，表示数组长度和询问个数。<br>第二行包含n个整数（均在1~10000范围内），表示完整数组。<br>接下来q行，每行包含一个整数k，表示一个询问元素。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共q行，每行包含两个整数，表示所求元素的起始位置和终止位置。<br>如果数组中不存在该元素，则返回“-1 -1”。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000<br>1≤n≤100000</p><p>1≤q≤10000<br>1≤q≤10000</p><p>1≤k≤10000<br>1≤k≤10000</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><pre class="language-none"><code class="language-none">6 31 2 2 3 3 4345</code></pre><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><pre class="language-none"><code class="language-none">3 45 5-1 -1</code></pre><h4 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h4><p>本题是练习二分很好的一道题目，二分程序虽然简单，但是如果写之前不考虑好想要查找的是什么，十有八九会是死循环或者查找错误，就算侥幸写对了也只是运气好而已。用二分去查找元素要求数组的有序性或者拥有类似于有序的性质，对本题而言，一个包含重复元素的有序序列，要求输出某元素出现的起始位置和终止位置，翻译一下就是：在数组中查找某元素，找不到就输出-1，找到了就输出不小于该元素的最小位置和不大于该元素的最大位置。所以，需要写两个二分，一个需要找到&gt;=x的第一个数，另一个需要找到&lt;=x的最后一个数。查找不小于x的第一个位置，较为简单：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span>  l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    r <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>当a[mid]小于x时，令l = mid + 1，mid及其左边的位置被排除了，可能出现解的位置是mid + 1及其后面的位置；当a[mid] &gt;= x时，说明mid及其左边可能含有值为x的元素；当查找结束时，l与r相遇，l所在元素若是x则一定是x出现最小位置，因为l左边的元素必然都小于x。查找不大于x的最后一个位置，便不容易了：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> l1 <span class="token operator">=</span> l<span class="token punctuation">,</span> r1 <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> r1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l1 <span class="token operator">+</span> r1 <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span>  l1 <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">else</span>    r1 <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>要查找不大于x的最后一个位置，当a[mid] &lt;= x时，待查找元素只可能在mid及其后面，所以l = mid；当a[mid] &gt; x时，待查找元素只会在mid左边，令r = mid。<br>为什么不令r = mid - 1呢？因为如果按照上一个二分的写法，循环判断条件还是l &lt; r,当只有两个元素比如2 2时，l指向第一个元素，r指向第二个元素，mid指向第一个元素，a[mid] &lt;= x，l = mid还是指向第一个元素，指针不移动了，陷入死循环了，此刻l + 1 == r，未能退出循环。<br>那么直接把循环判断条件改成l + 1 &lt; r呢？此时一旦只有两个元素，l和r差1，循环便不再执行，查找错误。<br>所以这里出现了二分的典型错误，l == r作为循环终止条件，会出现死循环，l + 1 == r作为循环终止条件，会出现查找错误。<br>问题如何解决，一种方法就是将查找的区间设置为左闭右开，比如待查找元素在[0,n - 1]范围内，可以写成[0,n)，令r = n，这时候只有两个元素时，r是取最右边元素的后一个位置的，l和r相差2，还会执行循环。<br>现在再来理解上一段的r1 = mid，说明a[mid] &gt; x时，r = mid就表示待查找元素会是在r的左边，因为r是开区间。上面这种写法修改了循环条件使得二分不会死循环，修改了区间的开闭性使得不会查找错误。另一种解决办法就是：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></code></pre><p>不修改循环终止条件，想办法解决死循环的问题，首先想下为什么查找不小于x的第一个位置不会死循环？因为这时就算只有两个元素，l + 1 = r,mid = l,a[mid]小于x时l是会+1的，不小于x时r = mid也会缩小区间。<br>而查找不大于x的最后一个位置之所以会死循环是因为编程语言里面除以2的下取整性，试想下如果l + 1 = r时，mid = （l + r） / 2 = l，一旦a[mid] &lt;= x,l = mid = l，区间并没有缩小，从而陷入死循环；如果一开始取mid为r，一旦a[mid] &lt;= x,l = mid = r,区间缩小，否则r = mid - 1 = l区间缩小，l都会与r相遇，就不会陷入死循环了。<br>如何做到上取整呢？只需要取mid时在l + r后面再加1即可，这里l和r都是闭区间，所以当a[mid] &gt; x时，r = mid - 1.<br>是否还有其他办法既不修改区间的开闭性和循环终止条件，又不用上取整呢？答案是肯定的。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> l1 <span class="token operator">=</span> l<span class="token punctuation">,</span> r1 <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">&lt;</span> r1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l1 <span class="token operator">+</span> r1 <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span>  l1 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    r1 <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> l1 <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>l1<span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们之所以会进行第二轮查找不大于x的最后一个位置，是因为第一轮已经找到了一个等于x的位置。所以完全可以当a[mid] &lt;= x时，令l = mid + 1，此时，l指向的元素可能是x也可能比x大，但是由于不论大小，l和r的指针都移动了，就不会陷入死循环了，最后，如果a[l] == x则，l就是x出现的最后的位置，否则，l - 1就是x出现的最后一个位置。或许有人会疑惑，当a[mid] &lt;= x时，l已经右移，最后l不是肯定指向的是大于x的位置嘛，为什么也可能指向等于x的位置？这是因为一旦第一轮查找的x出现的位置就是x唯一出现的位置，当x出现在数组末尾时，l == r，循环不会执行，此刻l指向的还是x，所以加上这个判断就可以解决该问题了。这也是二分程序可能遇见的第三种问题，当左右指针都移动时，待查找元素处在元素末尾会引起查找错误。总的代码如下：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token punctuation">;</span>    cin <span class="token operator">>></span> m <span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>   cin <span class="token operator">>></span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> m <span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token punctuation">;</span>        cin <span class="token operator">>></span> x <span class="token punctuation">;</span>        <span class="token keyword">int</span>  l <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> x <span class="token punctuation">)</span>  r <span class="token operator">=</span> mid <span class="token punctuation">;</span>            <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">!=</span> q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1 -1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token punctuation">;</span>          <span class="token comment">// 这里前面先输出前面的值</span>                        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">// 一定要注意重新定义l 和 r </span>            <span class="token keyword">while</span><span class="token punctuation">(</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span>   l <span class="token operator">=</span> mid<span class="token punctuation">;</span>   <span class="token comment">// 两个判断条件都有等号</span>                <span class="token keyword">else</span>   r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACwing算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACwing算法笔记一：快排，归并排序</title>
      <link href="/2021/09/01/ACwing%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E5%BF%AB%E6%8E%92%EF%BC%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/09/01/ACwing%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E5%BF%AB%E6%8E%92%EF%BC%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、快速排序"><a href="#一、快速排序" class="headerlink" title="一、快速排序"></a>一、快速排序</h2><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p><a href="https://www.acwing.com/problem/content/787/">原题链接</a></p></div><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定你一个长度为n的整数数列。</p><p>请你使用快速排序对这个数列按照<strong>从小到大</strong>进行排序。</p><p>并将排好序的数列按<strong>顺序输出</strong>。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入共两行，第一行包含整数 n。</p><p>第二行包含 n 个整数（所有整数均在1~1e9范围内），表示整个数列。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共一行，包含 n 个整数，表示排好序的数列。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="language-none"><code class="language-none">53 1 2 4 5</code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="language-none"><code class="language-none">1 2 3 4 5</code></pre><h4 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h4><p>题意理解<br>这道题目显然是要我们将一个无序数列排序,成为具有升序性质的升序序列.</p><p>算法处理<br>一道排序题目,数据范围是关键,我们发现这道题目只能让我们使用O(nlogn)O(nlogn)的算法,这里我们就使用快速排序.</p><h4 id="快排思想图"><a href="#快排思想图" class="headerlink" title="快排思想图"></a>快排思想图</h4><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/now1130_1196bbb27a-2.gif" alt="快速排序思想图"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> l <span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">,</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">(</span>i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> q<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这里不要等号， 不然会报错</span>        <span class="token keyword">do</span> <span class="token punctuation">(</span>j <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> q<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>  <span class="token function">swap</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>q <span class="token punctuation">,</span> l <span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//注意这里的边界问题</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>q <span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>   cin <span class="token operator">>></span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>   cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/nowimage-20210902011203300.png" alt="快排的边界问题"></p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/nowimage-20210902011320401.png" alt="边界问题出错如上"></p><h4 id="相关习题"><a href="#相关习题" class="headerlink" title="相关习题"></a>相关习题</h4><div class="note info modern"><p><a href="https://www.acwing.com/problem/content/788/">第k个数</a></p></div><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/nowimage-20210902011758398.png" alt="第k个数"></p><h2 id="二、归并排序"><a href="#二、归并排序" class="headerlink" title="二、归并排序"></a>二、归并排序</h2><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定你一个长度为n的整数数列。</p><p>请你使用归并排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入共两行，第一行包含整数 n。</p><p>第二行包含 n 个整数（所有整数均在1~100000范围内），表示整个数列。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共一行，包含 n 个整数，表示排好序的数列。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="language-none"><code class="language-none">53 1 2 4 5</code></pre><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="language-none"><code class="language-none">1 2 3 4 5</code></pre><h4 id="解题报告-1"><a href="#解题报告-1" class="headerlink" title="解题报告"></a>解题报告</h4><p>题意理解<br>这道题目还是让我们排序,只不过这里强制要求我们使用归并排序,所以既然如此的话,让我们好好地康康这道题目.</p><p>算法处理<br>归并排序,它有两大核心操作.</p><p>一个是将数组<strong>一分为二</strong>,一个无序的数组成为两个数组.</p><p>另外一个操作就是,<strong>合二为一</strong>,将两个有序数组合并成为一个有序数组.</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/now1130_4cf170747a-3.gif" alt="归并排序思想图" style="zoom:67%;" /></p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> l <span class="token punctuation">,</span> <span class="token keyword">int</span> r <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">,</span> i <span class="token operator">=</span> l <span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//j的取值为mid + 1 , 而不是mid</span>        <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> l <span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>   tmp<span class="token punctuation">[</span>k <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i <span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> tmp<span class="token punctuation">[</span>k <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j <span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>   tmp<span class="token punctuation">[</span>k <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i <span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r <span class="token punctuation">)</span>    tmp<span class="token punctuation">[</span>k <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j <span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> j <span class="token operator">=</span> l <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> r <span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">,</span> j <span class="token operator">++</span><span class="token punctuation">)</span>   q<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//***important!  for循环中间的条件要用&lt;= r ,而不能用&lt;n</span>    <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>   cin <span class="token operator">>></span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>   cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="相关习题-1"><a href="#相关习题-1" class="headerlink" title="相关习题"></a>相关习题</h4><div class="note info modern"><p><a href="https://www.acwing.com/problem/content/790/">逆序对的数量</a></p></div><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img//img/nowimage-20210902015146963.png" alt="逆序对的数量"></p>]]></content>
      
      
      <categories>
          
          <category> ACwing算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试学习笔记2-熟悉Kali Linux 环境</title>
      <link href="/2021/08/30/kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E7%86%9F%E6%82%89kali-linux-%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/08/30/kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E7%86%9F%E6%82%89kali-linux-%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="熟悉环境"><a href="#熟悉环境" class="headerlink" title="熟悉环境"></a>熟悉环境</h2><h3 id="前十安全工具"><a href="#前十安全工具" class="headerlink" title="前十安全工具"></a>前十安全工具</h3><div class="note success no-icon flat"><p>aircrack-ng</p></div><p>这是一个无线安全的攻击套件，包含十几个相关的命令，关于无线WiFi的攻击渗透工具</p><div class="note success no-icon flat"><p>burpsuite</p></div><p>基于web的渗透测试工具，一个手动的，作用是一个中间的截断的代理，对发送的请求进行拦截和修改，通过修改变更数据发送给服务器，服务器反馈信息来判断漏洞。</p><div class="note success no-icon flat"><p>hydra</p></div><div class="note success no-icon flat"><p>john</p></div><p>两个密码破解工具</p><div class="note success no-icon flat"><p>maltego</p></div><p>收集信息，提供一个图形化界面，提供渗透对象的部分信息收集。</p><div class="note success no-icon flat"><p>metasploit framework</p></div><p>msf框架，目前几乎所有黑客必须掌握的一个框架</p><div class="note success no-icon flat"><p>nmap</p></div><p>网络发现层和应用层等的扫描工具，非常有效的网络扫描工具</p><div class="note success no-icon flat"><p>owasp-zap</p></div><p>基于web的渗透测试工具，与burpsuite类似</p><div class="note success no-icon flat"><p>sqlmap</p></div><p>sql注入工具，做web服务器的sql注入探测</p><div class="note success no-icon flat"><p>wireshark</p></div><p>抓包分析工具</p><h3 id="调整设置优化"><a href="#调整设置优化" class="headerlink" title="调整设置优化"></a>调整设置优化</h3><div class="note warning no-icon flat"><p>中文输入法设置</p></div><p>利用gcitx安装googlepinyin ，</p><p><code>apt-get install fcitx</code></p><p><code>apt-get install facitx-googlepinyin</code></p><p><code>reboot       #重启</code>    </p><kbd>ctrl</kbd>    +   <kbd>space</kbd> 来切换输入法<div class="note warning no-icon flat"><p>字体调整</p></div>]]></content>
      
      
      <categories>
          
          <category> KaliLinux </category>
          
          <category> Kali渗透笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透笔记1-Kali介绍</title>
      <link href="/2021/08/30/kali%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B01-kali%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/08/30/kali%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B01-kali%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="安全问题的根源"><a href="#安全问题的根源" class="headerlink" title="安全问题的根源"></a>安全问题的根源</h2><ul><li>分层思想的优劣</li><li>只追求功能实现</li><li>最⼤大的安全威胁是⼈人</li></ul><h2 id="安全目标"><a href="#安全目标" class="headerlink" title="安全目标"></a>安全目标</h2><h3 id="先于攻击者发现和防⽌止漏洞出现"><a href="#先于攻击者发现和防⽌止漏洞出现" class="headerlink" title="先于攻击者发现和防⽌止漏洞出现"></a>先于攻击者发现和防⽌止漏洞出现</h3><ul><li>攻击型安全</li><li>防护性安全</li></ul><h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><ul><li>尝试挫败安全防御机制，发现系统安全弱点；</li><li>从攻击者的⾓角度思考，测量安全防护有效性；</li><li>证明安全问题的存在，⽽而⾮非破坏；</li><li>道德约束</li><li>法律</li></ul><h2 id="渗透测试标准"><a href="#渗透测试标准" class="headerlink" title="渗透测试标准"></a>渗透测试标准</h2><ul><li>PETS(<a href="http://www.pentest-standard.org">http://www.pentest-standard.org</a>)</li><li>前期交互阶段</li><li>情报收集阶段</li><li>威胁建模阶段</li><li>漏洞分析阶段</li><li>渗透攻击阶段</li><li>后渗透攻击阶段</li><li>渗透测试报告</li></ul><h2 id="渗透测试项目"><a href="#渗透测试项目" class="headerlink" title="渗透测试项目"></a>渗透测试项目</h2><h4 id="渗透测试范围"><a href="#渗透测试范围" class="headerlink" title="渗透测试范围"></a>渗透测试范围</h4><h4 id="获得授权"><a href="#获得授权" class="headerlink" title="获得授权"></a>获得授权</h4><h4 id="渗透测试方法"><a href="#渗透测试方法" class="headerlink" title="渗透测试方法"></a>渗透测试方法</h4><ul><li>是否允许社会工程学</li><li>是否允许拒绝服务攻击</li></ul><h2 id="渗透测试误区"><a href="#渗透测试误区" class="headerlink" title="渗透测试误区"></a>渗透测试误区</h2><ul><li>扫描器就是一切</li><li>忽视业务逻辑重的漏洞</li></ul><h2 id="KALI-LINUX介绍"><a href="#KALI-LINUX介绍" class="headerlink" title="KALI LINUX介绍"></a>KALI LINUX介绍</h2><ul><li>基于Debian的Linux发行版本</li><li>前身是BackTrack，2013年3月发布</li><li>用于渗透测试和安全审计</li><li>包含600+安全工具</li><li>FHS标准目录结构</li><li>定制内核</li><li>支持ARM和手机平台</li><li>开源免费</li></ul><h2 id="KALI-LINUX策略"><a href="#KALI-LINUX策略" class="headerlink" title="KALI LINUX策略"></a>KALI LINUX策略</h2><ul><li>Root用户策略</li><li>网络服务策略</li><li>更新升级策略</li></ul>]]></content>
      
      
      <categories>
          
          <category> KaliLinux </category>
          
          <category> Kali渗透笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解工具及壳的介绍及常用的方法</title>
      <link href="/2021/08/28/%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7%E5%8F%8A%E5%A3%B3%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2021/08/28/%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7%E5%8F%8A%E5%A3%B3%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="破解工具及壳的介绍及常用的方法"><a href="#破解工具及壳的介绍及常用的方法" class="headerlink" title="破解工具及壳的介绍及常用的方法"></a>破解工具及壳的介绍及常用的方法</h1><h2 id="一、壳的介绍"><a href="#一、壳的介绍" class="headerlink" title="一、壳的介绍"></a>一、壳的介绍</h2><p>壳是出于程序作者想对程序资源进行压缩或注册保护的目的，把壳大致分为<wavy>压缩壳</wavy>和<wavy>加密壳</wavy>两种。顾名思义，压缩壳只是为了减小程序体积对资源进行压缩，加密壳是程序输入表等等进行加密保护。当然加密壳的保护能力要强得多！</p><h2 id="二、脱壳的流程"><a href="#二、脱壳的流程" class="headerlink" title="二、脱壳的流程"></a>二、脱壳的流程</h2><p>•查壳—-&gt;寻找OEP—-&gt;脱壳/Dump—-&gt;修复</p><details cyan open><summary> 1.查壳 </summary>              <div class='content'>              <p>•PEID—功能强大的侦壳工具，自带脱壳插件</p><p>•Exeinfo PE - 查壳功能在某些壳上远胜PEID，可以剥离dll</p><p>•Detect it Easy - 可以在加壳的情况下依然看见程序的编程语言</p>              </div>            </details><details cyan open><summary> 2.寻找OEP </summary>              <div class='content'>              <p><kbd>F2</kbd>：在需要的地方下断点</p><p><kbd>F3</kbd>：选择打开程序</p><p><kbd>F4</kbd>：运行到所选择的那一行</p><p><kbd>F7</kbd>：单步进入(让call不运行程式)</p><p><kbd>F8</kbd>：单步跟踪</p><p><kbd>F9</kbd>：执行程序（运行程序）</p><p><kbd>Shift</kbd> + <kbd>F9</kbd> ： 与F9相同，但是如果被调试程序发生异常而中止，调试器会首先尝试执行被调试程序指定的异常处理（请参考忽略Kernel32中的内存非法访问）。</p><p><kbd>Alt</kbd> + <kbd>F9</kbd> ： 执行直到返回到用户代码段，跟踪程序直到指令所属于的模块不在系统目录中，在此期间不进入子函数也不更新CPU数据。因为程序是一条一条执行的，所以速度可能会慢一些。按Esc键，可以停止跟踪。</p>              </div>            </details><details cyan open><summary> 3.脱壳/Dump(LordPE) </summary>              <div class='content'>              <p>LordPE—选择所调试的进程—右键—完整脱壳</p>              </div>            </details><details cyan open><summary> 4.修复(ImportREC) </summary>              <div class='content'>              <p>ImportREC—选择所调试的进程—填写相关的数据信息—进行修复—抓取脱壳文件进行修复</p>              </div>            </details><h2 id="三、脱壳的方法"><a href="#三、脱壳的方法" class="headerlink" title="三、脱壳的方法"></a>三、脱壳的方法</h2><h3 id="方法一：单步跟踪法"><a href="#方法一：单步跟踪法" class="headerlink" title="方法一：单步跟踪法"></a>方法一：单步跟踪法</h3><ol><li><p>用OD载入，</p></li><li><p>单步向下跟踪（F8），实现向下的跳。也就是说向上的跳不让其实现！</p></li><li><p>遇到程序往回跳的（包括循环），我们在下一句代码处按F4</p></li><li><p>绿色线条表示跳转没实现，不用理会，红色线条表示跳转已经实现！</p></li><li><p>如果刚载入程序，在附近就有一个CALL的，我们就F7跟进去，不然程序很容易跑飞，这样很快就能到程序的OEP</p></li><li><p>在跟踪的时候，如果运行到某个CALL程序就运行的，就在这个CALL中F7进入</p></li><li><p>一般有很大的跳转（大跨段），比如   jmp XXXXXX 或者 JE XXXXXX 或者有RETN的一般很快就会到程序的OEP<strong>。</strong></p></li></ol><h3 id="方法二：ESP定律法"><a href="#方法二：ESP定律法" class="headerlink" title="方法二：ESP定律法"></a>方法二：ESP定律法</h3><ol><li><p>开始就点F8，注意观察OD右上角的寄存器中ESP有没突现（变成红色）。</p></li><li><p>在命令行下：dd XXXXXXXX(指在当前代码中的ESP地址，或者是hr XXXXXXXX)，按回车！</p></li><li><p>选中下断的地址，断点—-&gt;硬件访—-&gt;WORD断点。</p></li><li><p>按一下F9运行程序，直接来到了跳转处，按下F8，到达程序OEP（或OEP附近）。</p></li></ol><h3 id="方法三：内存镜像法"><a href="#方法三：内存镜像法" class="headerlink" title="方法三：内存镜像法"></a>方法三：内存镜像法</h3><ol><li><p>用OD打开软件！</p></li><li><p>点击选项——调试选项——异常，把里面的忽略全部√上！CTRL+F2重载下程序！</p></li><li><p>按ALT+M,打开内存镜象，找到程序的第一个.rsrc.按F2下断点，然后按SHIFT+F9运行到断点，接着再按ALT+M,打开内存镜象，找到程序的第一个.rsrc.上面的.CODE（也就是00401000处），按F2下断点！然后按SHIFT+F9（或者是在没异常情况下按F9），直接到达程序OEP！</p></li></ol><h3 id="方法四：一步到达OEP"><a href="#方法四：一步到达OEP" class="headerlink" title="方法四：一步到达OEP"></a>方法四：一步到达OEP</h3><ol><li><p>开始按Ctrl+F,输入：popad，然后按下F2，F9运行到此处</p></li><li><p>来到大跳转处，点下F8，到达OEP！</p></li></ol><h3 id="方法五：最后一次异常法"><a href="#方法五：最后一次异常法" class="headerlink" title="方法五：最后一次异常法"></a>方法五：最后一次异常法</h3><ol><li><p>用OD打开软件</p></li><li><p>点击选项——调试选项——异常，把里面的√全部去掉！CTRL+F2重载下程序</p></li><li><p>一开始程序就是一个跳转，在这里我们按SHIFT+F9，直到程序运行，记下从开始按SHIFT+F9到程序运行的次数m！</p></li><li><p>CTRL+F2重载程序，按SHIFT+F9（这次按的次数为程序运行的次数m-1次）</p></li><li><p>在OD的右下角我们看见有一个”SE 句柄”，这时我们按CTRL+G，输入SE 句柄前的地址！</p></li><li><p>按F2下断点！然后按SHIFT+F9来到断点处！</p></li><li><p>去掉断点，按F8慢慢向下走！</p></li><li><p>到达程序的OEP！</p></li></ol><h3 id="方法六：模拟跟踪法"><a href="#方法六：模拟跟踪法" class="headerlink" title="方法六：模拟跟踪法"></a>方法六：模拟跟踪法</h3><ol><li><p>先试运行，跟踪一下程序，看有没有SEH暗桩之类</p></li><li><p>ALT+M打开内存镜像，找到（包含=SFX,imports,relocations）</p></li><li><p>地址为0054B000，如是我们在命令行输入tc eip&lt;0054B000,回车，正在跟踪ing。。</p></li></ol><h3 id="方法七：“SFX”法"><a href="#方法七：“SFX”法" class="headerlink" title="方法七：“SFX”法"></a>方法七：“SFX”法</h3><ol><li><p>设置OD，忽略所有异常，也就是说异常选项卡里面都打上勾</p></li><li><p>切换到SFX选项卡，选择“字节模式跟踪实际入口（速度非常慢）”，确定。</p></li><li><p>重载程序（如果跳出是否“压缩代码？”选择“否”，OD直接到达OEP）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> hacker学习 </category>
          
          <category> 脱壳破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脱壳破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo生成文章显示undefined问题</title>
      <link href="/2021/08/27/hexo%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0%E6%98%BE%E7%A4%BAundefined%E9%97%AE%E9%A2%98/"/>
      <url>/2021/08/27/hexo%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0%E6%98%BE%E7%A4%BAundefined%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>hexo生成文章undefined</p><p>关于hexo-abbrlink链接undefined</p><p>文章无法查看</p><p>文章全删除后hexo 三连报错</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img/img/b/image-20210827234601776.png" alt="新建文件链接"></p><p>此时代码为</p><pre class="language-.yml" data-language=".yml"><code class="language-.yml">## 启用算法生成不重复文件编号，添加permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F; #主题默认文章链接配置# permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;#permalink: posts&#x2F;:abbrlink&#x2F;  # wys 是自定义的前缀 这里是为了生成的文章链接不会因为有中文而访问不到#abbrlink:    #alg: crc32   #算法： crc16(default) and crc32    #rep: hex     #进制： dec(default) and hexarchive_dir: newscode_dir: downloads&#x2F;codenew_post_name: :year-:month-:day-:title.md # File name of new postspost_asset_folder: falseper_page: 0pretty_urls:  trailing_index: false  trailing_html: false</code></pre><p>当我尝试换成abbrlink之后</p><p>按照</p><p>步骤进行操作，在引入abbrlink之后就有各种报错</p><p>安装步骤按照rozbo佬引用如下</p><h2 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h2><p>向 Hexo 添加插件：</p><pre class="language-none"><code class="language-none">npm install hexo-abbrlink --save</code></pre><p>修改 config.yml 文件中的永久链接：</p><pre class="language-none"><code class="language-none">permalink: posts&#x2F;:abbrlink&#x2F;</code></pre><p>有两种设置：</p><pre class="language-none"><code class="language-none">alg -- Algorithm (currently support crc16 and crc32, which crc16 is default)rep -- Represent (the generated link could be presented in hex or dec value)# abbrlink configabbrlink:  alg: crc32      #support crc16(default) and crc32  rep: hex        #support dec(default) and hex  drafts: false   #(true)Process draft,(false)Do not process draft. false(default)   # Generate categories from directory-tree  # depth: the max_depth of directory-tree you want to generate, should &gt; 0  auto_category:     enable: true  #true(default)     depth:        #3(default)     over_write: false   auto_title: false #enable auto title, it can auto fill the title by path  auto_date: false #enable auto date, it can auto fill the date by time today  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</code></pre><h2 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h2><p>生成的链接将如下所示：</p><pre class="language-none"><code class="language-none">crc16 &amp; hexhttps:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;66c8.htmlcrc16 &amp; dechttps:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;65535.htmlcrc32 &amp; hexhttps:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;8ddf18fb.htmlcrc32 &amp; dechttps:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;1690090958.html</code></pre><p>新建文章后</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img/img/b/image-20210827234646669.png" alt="加入后新建文章"></p><p>当想要查看该文章时，显示<a href="http://localhost:4000/posts/undefined/">http://localhost:4000/posts/undefined/</a></p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img/img/b/image-20210827234721556.png" alt="查看文章链接"></p><p>自动定向到之前的文章</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>去掉abbrlink插件或者不适用该插件（即enable改为false）</p><p>然后将根目录的_config文件 post_name处改为标题名称或者加时间加标题。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Metasploit 渗透测试魔鬼训练营》 个人学习笔记（一）渗透测试实验环境的配置</title>
      <link href="/2021/08/26/%E3%80%8Ametasploit%20%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%AD%94%E9%AC%BC%E8%AE%AD%E7%BB%83%E8%90%A5%E3%80%8B%20%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/08/26/%E3%80%8Ametasploit%20%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%AD%94%E9%AC%BC%E8%AE%AD%E7%BB%83%E8%90%A5%E3%80%8B%20%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="《Metasploit-渗透测试魔鬼训练营》-个人学习笔记（一）渗透测试实验环境的配置"><a href="#《Metasploit-渗透测试魔鬼训练营》-个人学习笔记（一）渗透测试实验环境的配置" class="headerlink" title="《Metasploit 渗透测试魔鬼训练营》 个人学习笔记（一）渗透测试实验环境的配置"></a>《Metasploit 渗透测试魔鬼训练营》 个人学习笔记（一）渗透测试实验环境的配置</h1><p><img src="https://img-blog.csdnimg.cn/20201111182912978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTY1MDQ1,size_16,color_FFFFFF,t_70#pic_center" alt="Kali-Linux的环境配置"><br><img src="https://img-blog.csdnimg.cn/20201111183030637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTY1MDQ1,size_16,color_FFFFFF,t_70#pic_center" alt="WinXP的环境配置"><br><img src="https://img-blog.csdnimg.cn/20201111183139478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTY1MDQ1,size_16,color_FFFFFF,t_70#pic_center" alt="Win2003的环境配置"><br><img src="https://img-blog.csdnimg.cn/20201111183207556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTY1MDQ1,size_16,color_FFFFFF,t_70#pic_center" alt="Metasploit Ubuntu的环境配置"><br><img src="https://img-blog.csdnimg.cn/20201111183254859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTY1MDQ1,size_16,color_FFFFFF,t_70#pic_center" alt="OWASP环境配置"></p><h2 id="渗透测试实验环境的拓扑结构"><a href="#渗透测试实验环境的拓扑结构" class="headerlink" title="渗透测试实验环境的拓扑结构"></a>渗透测试实验环境的拓扑结构</h2><p> <img src="https://img-blog.csdnimg.cn/20201111183850187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTY1MDQ1,size_16,color_FFFFFF,t_70#pic_center" alt="实验环境拓扑结构"></p><p>Kali-Linux作为攻击机<br>公司内网（host-only）的内网客户机——WINXP<br>网站服务器OWASP 网络服务器靶机<br>后台服务器 Win2K3 靶机<br>网管服务器 Linux 靶机</p><p>一共五台虚拟机，模拟真实的公司网络环境。</p><h2 id="攻击机环境"><a href="#攻击机环境" class="headerlink" title="攻击机环境"></a>攻击机环境</h2><p>书上用的是Back Track5   ，我用的是Kali Linux。<br>两者差别不大</p><h2 id="配置靶机环境："><a href="#配置靶机环境：" class="headerlink" title="配置靶机环境："></a>配置靶机环境：</h2><h3 id="1-OWASP-BWA-靶机"><a href="#1-OWASP-BWA-靶机" class="headerlink" title="1.OWASP BWA 靶机"></a>1.OWASP BWA 靶机</h3><p>(1)基于Ubuntu 10.04 LTS<br>(2)这是一个初学者用的靶机，汇集了很多漏洞<br>(3)在第三章中会介绍与演示信息收集<br>(4)在第四章中会讲命令注入，SQL注入，XSS夸张，RFI远程文件包含，文件上传，等web引用安全漏洞与扫描</p><h3 id="2-Linux-Metasploitable-靶机"><a href="#2-Linux-Metasploitable-靶机" class="headerlink" title="2.Linux Metasploitable 靶机"></a>2.Linux Metasploitable 靶机</h3><p>(1)基于ubuntu 8.04<br>(2)存在安全漏洞软件包，可以用多种攻击方式获取系统远程访问权</p><h3 id="3-Win2K3-Metasploitable-靶机"><a href="#3-Win2K3-Metasploitable-靶机" class="headerlink" title="3.Win2K3 Metasploitable 靶机"></a>3.Win2K3 Metasploitable 靶机</h3><p>(1)基于windows2k3<br>(2)模拟后台服务器及企业内网的终端主机，将使用两个。<br>(3)在第五章中，将使用MS08-067，Oracle数据库的TNS服务漏洞，KingView SCADA 软件服务堆溢出漏洞渗透。<br>(4)在第七章中将通过伪装木马实现免杀技术，对主机实施社会工程学攻击</p><h3 id="4-WinXP-Metasploitable-靶机"><a href="#4-WinXP-Metasploitable-靶机" class="headerlink" title="4.WinXP Metasploitable 靶机"></a>4.WinXP Metasploitable 靶机</h3><p>2.2.2 网络环境配置<br>配置VM的子网IP。将VMnet1设置为192.168.10.0将VMnet8设置成10.10.10.0</p><h2 id="虚拟机镜像配置"><a href="#虚拟机镜像配置" class="headerlink" title="虚拟机镜像配置"></a>虚拟机镜像配置</h2><p>(1)攻击机环境配置<br>在BT5（kali）中/etc/hosts中添加下列语句：<br>10.10.10.128 attacker.dvssc.com<br>…<br>然后给VMware给这个快照一下，遇到异常可以直接恢复初始状态<br>2.配置靶机和分析及环境</p><h3 id="1-配置OWASP"><a href="#1-配置OWASP" class="headerlink" title="(1)配置OWASP"></a>(1)配置OWASP</h3><p>a.IP地址 10.10.10.129<br>b.检测网络环境，互ping一下<br>c.在BT5上打开www.dvssc.com看看能不能访问，能访问的话，服务端就建立好了</p><h3 id="2-配置Win2K3"><a href="#2-配置Win2K3" class="headerlink" title="(2)配置Win2K3"></a>(2)配置Win2K3</h3><p>a.IP地址 10.10.10.130<br>b.检测网络环境，互ping一下</p><h3 id="3-配置-Linux"><a href="#3-配置-Linux" class="headerlink" title="(3)配置 Linux"></a>(3)配置 Linux</h3><p>a.双网卡，NAT和HOSTONLIY<br>b.IP地址 10.10.10.254和192.168.254<br>c.连接模拟DMZ区和VMnet8<br>d.之后我们会说这个虚拟机上作者干了什么。<br>e.Metasploitable_ubuntu root/ubuntu<br>f.修改网卡，配置路由器功能设置，设置转发规则</p><h3 id="4-配置XP"><a href="#4-配置XP" class="headerlink" title="(4)配置XP"></a>(4)配置XP</h3><p>a.WinXPenSP3 administrator/123456<br>b.设置网卡为HOSTONLY模式，模拟企业内网NMNET1网段<br>c.互ping<br>d.在hosts文件中加入内容，书上的hosts文件在C:\WINDOWS\system32\里面，有的可能在..\system32\drivers\etc里面，可以在C盘里面找一下<br>e.打开IE，如果配置正确，我们访问门户网站服务器的时候，能够显示内部网站登录页面（记得访问的时候打开服务器虚拟机）</p>]]></content>
      
      
      <categories>
          
          <category> KaliLinux </category>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tag插件测试博</title>
      <link href="/2021/08/25/%E3%80%8A/"/>
      <url>/2021/08/25/%E3%80%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="行内文本样式text"><a href="#行内文本样式text" class="headerlink" title="行内文本样式text"></a>行内文本样式text</h1><ol><li><p>带 <u>下划线</u> 的文本</p></li><li><p>带 <emp>着重号</emp> 的文本</p></li><li><p>带 <wavy>波浪线</wavy> 的文本</p></li><li><p>带 <del>删除线</del> 的文本</p></li><li><p>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></p></li><li><p>密码样式的文本：<psw>这里没有验证码</psw></p></li></ol><h1 id="行内文本span"><a href="#行内文本span" class="headerlink" title="行内文本span"></a>行内文本span</h1><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<span class='p center logo large'>Volantis</span><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><h1 id="段落文本p"><a href="#段落文本p" class="headerlink" title="段落文本p"></a>段落文本p</h1><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul><h1 id="引用note"><a href="#引用note" class="headerlink" title="引用note"></a>引用note</h1><h2 id="simple样式"><a href="#simple样式" class="headerlink" title="simple样式"></a>simple样式</h2><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div> <div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div> <h2 id="modern样式"><a href="#modern样式" class="headerlink" title="modern样式"></a>modern样式</h2><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div> <div class="note icon modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><h2 id="flat样式"><a href="#flat样式" class="headerlink" title="flat样式"></a>flat样式</h2><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div> <p>disable 样式<br><div class="note disabled"><p>默认 提示块标签</p></div></p><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><h2 id="noicon样式"><a href="#noicon样式" class="headerlink" title="noicon样式"></a>noicon样式</h2><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div><h1 id="上标标签tip"><a href="#上标标签tip" class="headerlink" title="上标标签tip"></a>上标标签tip</h1><div class="tip "><p>默认情况</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><h1 id="动画标签anima"><a href="#动画标签anima" class="headerlink" title="动画标签anima"></a>动画标签anima</h1><p>1.on dom load (页面加载是显示动画)<br><div class="tip warning faa-horizontal animated"><p>warning</p></div><br><div class="tip ban faa-flash animated"><p>ban</p></div></p><p>2.on hover(当鼠标悬停时显示动画)<br><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><br><div class="tip ban faa-flash animated-hover"><p>ban</p></div></p><h1 id="复选列表checkbox"><a href="#复选列表checkbox" class="headerlink" title="复选列表checkbox"></a>复选列表checkbox</h1><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><h1 id="单选列表radio"><a href="#单选列表radio" class="headerlink" title="单选列表radio"></a>单选列表radio</h1><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><h1 id="时间轴timeline"><a href="#时间轴timeline" class="headerlink" title="时间轴timeline"></a>时间轴timeline</h1><div class="timeline"><div class="timenode"><div class="meta"><p><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></p></div><div class="body"><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></p></div><div class="body"><p>不需要额外处理。</p></div></div><div class="timenode"><div class="meta"><p><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></p></div><div class="body"><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><h1 id="链接卡片link"><a href="#链接卡片link" class="headerlink" title="链接卡片link"></a>链接卡片link</h1><div class="tag link"><a class="link-card" title="hackerwuの博客" href="https://hackerwu.cn"><div class="left"><img src="https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/blog_f/butterfly-tags/20201230_05_cover.jpg"/></div><div class="right"><p class="text">hackerwuの博客</p><p class="url">https://hackerwu.cn</p></div></a></div><h1 id="按钮btns"><a href="#按钮btns" class="headerlink" title="按钮btns"></a>按钮btns</h1><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div><div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><h1 id="网站卡片sites"><a href="#网站卡片sites" class="headerlink" title="网站卡片sites"></a>网站卡片sites</h1><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><h1 id="行内图片inlineimage"><a href="#行内图片inlineimage" class="headerlink" title="行内图片inlineimage"></a>行内图片inlineimage</h1><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="愿你成为自己的太阳，无需凭借谁的光芒。" style="width:400px;"/></div><span class="image-caption">愿你成为自己的太阳，无需凭借谁的光芒。</span></div><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><h1 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h1><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src='/' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">DM1</div>  <p>/gallery/DM1/</p>  <a href='https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/blog_f/vue-admin-temp/t00_cover.jpg'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src='/' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">DM2</div>  <p>/gallery/DM2/</p>  <a href='https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/blog_f/md-emoji/t01_cover.jpg'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src='/' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Ethan</div>  <p>/gallery/Ethan/</p>  <a href='https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/blog_f/nvm-npm-nrm/t02_cover.jpg'></a>  </figcaption>  </figure>  </div><div class="justified-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt=""></p>          </div><h1 id="折叠框"><a href="#折叠框" class="headerlink" title="折叠框"></a>折叠框</h1><details 参数（可选）><summary> 标题 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><h1 id="分栏tab"><a href="#分栏tab" class="headerlink" title="分栏tab"></a>分栏tab</h1><div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#unique-name-1"><i class="icon]"></i>[Tab caption] [</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><p>Any content (support inline tags too).</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="诗词标签"><a href="#诗词标签" class="headerlink" title="诗词标签"></a>诗词标签</h1><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><h1 id="阿里图标"><a href="#阿里图标" class="headerlink" title="阿里图标"></a>阿里图标</h1><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-bianpao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-chuanghua"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-hongbao"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-baozhu"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-lipao"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-shanzi"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-denglong"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-zhongguojie"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-tongqian"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-yanhua"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-fuzi"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-qiqiu"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-qiandaizi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-duilian"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-bingtanghulu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-liwu"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tangguo"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-jiaozi"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-wanju"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-yuanbao"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-lipao"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-lipao"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-denglong"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tangguo"></use></svg>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-butterfly布置个人博客看板娘</title>
      <link href="/2021/08/24/hexo-butterfly%E5%B8%83%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
      <url>/2021/08/24/hexo-butterfly%E5%B8%83%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
      
        <content type="html"><![CDATA[<p>我的网站可以预览一下效果：<a href="https://hackerwu.cn/">首席刺客伍六七</a></p><p><img src="/img/md/md1.png" alt="网站截图"></p><h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p>hexo安装模块:</p><pre class="language-none"><code class="language-none">npm install --save hexo-helper-live2d</code></pre><p>前提是已经安好了hexo啦。</p><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>向Hexo的 <code>_config.yml</code> 文件或主题的 <code>_config.yml</code> 文件中添加配置.</p><p>我的设置如下：</p><pre class="language-none"><code class="language-none"># live-2dlive2d:  enable: true  scriptFrom: local #jsdelivr # local  pluginRootPath: live2dw&#x2F;  pluginJsPath: lib&#x2F;  pluginModelPath: assets&#x2F;  tagMode: false  debug: false  model:    use: live2d-widget-model-haru   #这里是改变模型的地方      #  好看的haru,epsilon2_1      #live2d-widget-model-hijiki # npm-module package name    # use: wanko # 博客根目录&#x2F;live2d_models&#x2F; 下的目录名    # use: .&#x2F;wives&#x2F;wanko # 相对于博客根目录的路径    # use: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;live2d-widget-model-wanko@1.0.5&#x2F;assets&#x2F;wanko.model.json # 你的自定义 url    scale: 1    hHeadPos: 0.5    vHeadPos: 0.618  display:    superSample: 2    position: right # Left of right side to show 显示位置：左或右    width: 200            # 根据我的经验，人物宽高比1：2设置    height: 400    hOffset: 0          # 水平平移    vOffset: -20        # 垂直平移  mobile:    show: true          # 手机上显示    scale: 0.5  react:    opacityDefault: 0.7    opacityOnHover: 0.2    opacity: 0.95          # 模型透明度  dialog:              #  头顶显示对话框    enable: true    hitokoto: true</code></pre><p>因为我比较喜欢她的对话框，所以只能把她放在右边了，不然对话框会有一部分出界了。</p><p>我们改变模型只需要改上面代码的 model:下面的use部分就行了</p><h3 id="三、live2d-models子目录名称"><a href="#三、live2d-models子目录名称" class="headerlink" title="三、live2d_models子目录名称"></a>三、live2d_models子目录名称</h3><ol><li>在您博客根目录下创建一个 <code>live2d_models</code> 文件夹.</li><li>在此文件夹内新建一个子文件夹.</li><li>将你的 Live2D 模型复制到这个子文件夹中.</li><li>将子文件夹的名称输入 <code>_config.yml</code> 的 <code>model.use</code> 中.</li></ol><details open="" style="box-sizing: border-box; display: block; margin-bottom: 16px; margin-top: 0px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"><summary style="box-sizing: border-box; display: list-item; cursor: pointer;">例如</summary><br style="box-sizing: border-box;"><p style="box-sizing: border-box; margin-bottom: 16px; margin-top: 0px;">你的模型叫<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">mymiku</code>.</p><p style="box-sizing: border-box; margin-bottom: 16px; margin-top: 0px;">在博客根目录 (应当有<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">_config.yml</code><span>&nbsp;</span>、<code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">sources</code><span>&nbsp;</span>、<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">themes</code><span>&nbsp;</span>) 新建名为<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">mymiku</code><span>&nbsp;</span>的子文件夹.</p><p style="box-sizing: border-box; margin-bottom: 16px; margin-top: 0px;">将模型复制到<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">/live2d_models/mymiku/</code><span>&nbsp;</span>中.</p><p style="box-sizing: border-box; margin-bottom: 16px; margin-top: 0px;">现在, 在这里应当有一个<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">.model.json</code><span>&nbsp;</span>文件 (例如<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">mymiku.model.json</code>)</p><p style="box-sizing: border-box; margin-bottom: 16px; margin-top: 0px;">在<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">/live2d_models/mymiku/</code><span>&nbsp;</span>中.</p><p style="box-sizing: border-box; margin-bottom: 16px; margin-top: 0px;">将<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">mymiku</code><span>&nbsp;</span>输入到位于<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">_config.yml</code><span>&nbsp;</span>的<span>&nbsp;</span><code style="box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, &quot;SF Mono&quot;, Menlo, Consolas, &quot;Liberation Mono&quot;, monospace; font-size: 13.6px; background-color: var(--color-markdown-code-bg); border-radius: 6px; margin: 0px; padding: 0.2em 0.4em;">model.use</code><span>&nbsp;</span>中.</p></details><h3 id="四、也可以相对于博客根目录的自定义路径"><a href="#四、也可以相对于博客根目录的自定义路径" class="headerlink" title="四、也可以相对于博客根目录的自定义路径"></a>四、也可以相对于博客根目录的自定义路径</h3><p>您可直接输入<strong>相对于博客根目录</strong>的自定义路径到 <code>model.use</code> 中.</p><p>示例: <code>./wives/wanko</code></p><h3 id="五、很多模型"><a href="#五、很多模型" class="headerlink" title="五、很多模型"></a>五、很多模型</h3><p>模型可以在作者大大那里下载，<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a></p><p>把下载后的模型放到上面自己创建的文件夹里面，改use:的内容就可以直接换人物啦。</p><p>参考：<a href="https://github.com/EYHN/hexo-helper-live2d">https://github.com/EYHN/hexo-helper-live2d</a></p><p>​           <a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统里Ubuntu最新版20.04软件安装与软件中心恢复</title>
      <link href="/2021/08/22/Linux%E7%B3%BB%E7%BB%9F%E9%87%8CUbuntu%E6%9C%80%E6%96%B0%E7%89%8820.04%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BF%83%E6%81%A2%E5%A4%8D/"/>
      <url>/2021/08/22/Linux%E7%B3%BB%E7%BB%9F%E9%87%8CUbuntu%E6%9C%80%E6%96%B0%E7%89%8820.04%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BF%83%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Ubuntu软件中心是什么？"><a href="#一、Ubuntu软件中心是什么？" class="headerlink" title="一、Ubuntu软件中心是什么？"></a>一、Ubuntu软件中心是什么？</h1><p>示例：Ubuntu在最新一版20.04中对软件中心进行了调整，集合成snap应用中心，新手下载软件应用会比较困惑。或者出现软件中心没有软件的情况解决方法。</p><h1 id="二、两个寻找安装应用软件步骤"><a href="#二、两个寻找安装应用软件步骤" class="headerlink" title="二、两个寻找安装应用软件步骤"></a>二、两个寻找安装应用软件步骤</h1><h2 id="1-卸载snap应用并找回原来的可见软件中心"><a href="#1-卸载snap应用并找回原来的可见软件中心" class="headerlink" title="1.卸载snap应用并找回原来的可见软件中心"></a>1.卸载snap应用并找回原来的可见软件中心</h2><p>20.04软件中心不显示解决方案：</p><pre class="language-c" data-language="c"><code class="language-c">sudo apt update              <span class="token comment">//系统更新查询</span>sudo apt upgrade             <span class="token comment">//系统更新</span>sudo systemctl reboot        <span class="token comment">//系统重启应用更新</span></code></pre><p>卸载snap应用并安装软件中心代码：</p><pre class="language-c" data-language="c"><code class="language-c">sudo apt install ubuntu<span class="token operator">-</span>software      <span class="token comment">//安装Ubuntu软件中心</span>sudo snap remove snap<span class="token operator">-</span>store           <span class="token comment">//卸载snap应用中心</span>sudo apt purge snapd                  <span class="token comment">//卸载所有snap应用</span></code></pre><p>若要重新装回snap应用中心则执行以下代码：<br><pre class="language-c" data-language="c"><code class="language-c">sudo snap install snap<span class="token operator">-</span>store         <span class="token comment">//下载snap应用</span></code></pre></p><h2 id="2-在Ubuntu中安装浏览器下载的软件包"><a href="#2-在Ubuntu中安装浏览器下载的软件包" class="headerlink" title="2.在Ubuntu中安装浏览器下载的软件包"></a>2.在Ubuntu中安装浏览器下载的软件包</h2><p>在浏览器中下载对应软件的Linux版本的deb格式，选择保存文件选项。下载完成后打开文件所在的文件夹，鼠标右键，选择从终端打开，在终端输入如下代码<br>代码如下：<br><pre class="language-c" data-language="c"><code class="language-c">sudo dpkg <span class="token operator">-</span>i 软件名</code></pre><br>软件名可能复杂，只需输入前几个字母之后，按下”Ctrl”+”Tab”，即可自动补全软件名。之后点击回车键即可进行安装。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在Ubuntu系统中安装各种软件方法：</p><ul><li>1.使软件中心安装显示，直接在软件中心中下载。</li><li>2.直接在浏览器下载deb格式的安装包，按以上步骤即可安装。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全栈工程师技能图谱个人版</title>
      <link href="/2021/08/20/%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1%E4%B8%AA%E4%BA%BA%E7%89%88/"/>
      <url>/2021/08/20/%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1%E4%B8%AA%E4%BA%BA%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="全栈工程师技能图谱"><a href="#全栈工程师技能图谱" class="headerlink" title="全栈工程师技能图谱"></a>全栈工程师技能图谱</h1><p>本人学习过程：</p><h2 id=""><a href="#" class="headerlink" title=""></a><emp>Web安全工程师</emp></h2><h3 id="概念基础"><a href="#概念基础" class="headerlink" title="概念基础"></a>概念基础</h3><h3 id="一．了解黑客是如何工作的"><a href="#一．了解黑客是如何工作的" class="headerlink" title="一．了解黑客是如何工作的"></a>一．了解黑客是如何工作的</h3><ol><li><p>在虚拟机配置Linux系统</p></li><li><p>漏洞测试工具</p></li><li><p>msf控制台</p></li><li><p>远程工具RATS</p></li><li><p>远程访问计算机</p></li><li><p>白帽</p></li></ol><h3 id="二．技术基础"><a href="#二．技术基础" class="headerlink" title="二．技术基础"></a>二．技术基础</h3><ul><li><p>漏斗扫描工具AWVS</p></li><li><p>AWVS简介 安装 站点扫描</p></li><li><p>扫码结果分析  </p></li><li><p>Site crawler</p></li><li><p>HTTP Editor</p></li><li><p>Target finger</p></li><li><p>Authentication Teater</p></li><li><p>HTTP Sniffer</p></li><li><p>HTTP fuzzer</p></li><li><p>网络安全审计工具：Nmap</p></li><li><p>安装和使用</p></li><li><p>扫描多个目标</p></li><li><p>扫描并排除特殊目标</p></li><li><p>扫描技术</p></li><li><p>端口扫描选项</p></li><li><p>系统检测</p></li><li><p>时间选项part1</p></li><li><p>防火墙</p></li><li><p>输出文件</p></li><li><p>排错选项</p></li><li><p>Namp的脚本引擎</p></li><li><p>Zenmap的内部结构</p></li><li><p>解读zenmap的输出信息</p></li><li><p>NDiff和技巧</p></li><li><p>Web安全基础入门</p></li><li><p>ASP木马</p></li><li><p>数据库的安全风险</p></li><li><p>网站配置的安全风险</p></li><li><p>php木马</p></li><li><p>Php漏洞</p></li><li><p>Apache解析漏洞</p></li><li><p>入侵防范</p></li><li><p>Malego</p></li><li><p>添加链接和选择</p></li><li><p>管理Mangage选项卡</p></li><li><p>视图选项</p></li><li><p>增加实体（entities）</p></li><li><p>基本图形界面</p></li><li><p>入侵痕迹追踪</p></li></ul><ol><li><p>基于入侵检测的告警分析-外网</p></li><li><p>基本入侵检测的告警分析-内网</p></li></ol><ul><li>社会工程学工具：SET</li></ul><ol><li><p>Social-EnglishToolkit的社交攻击</p></li><li><p>social-English ToolKit的端口转发</p></li><li><p>social-English ToolKit的DNS欺骗</p></li><li><p>social-English ToolKit的更新</p></li></ol><ul><li>Web安全漏洞分析和防御</li></ul><ol><li><p>phpYun xml注入漏洞</p></li><li><p>weBid1.1.1文件上传漏洞</p></li><li><p>KPPW2.2任意文件下载漏洞</p></li><li><p>Phpcms 2008命令执行漏洞</p></li><li><p>CmsEasy 5.5代码执行漏洞</p></li><li><p>Akcms 6.0登录绕过漏洞</p></li><li><p>Aspcms2.2.9登录绕过漏洞</p></li><li><p>Dedecms5.7远程文案包含漏洞</p></li></ol><ul><li><p>渗透实战</p></li><li><p>渗透工具：sqlmap</p></li></ul><ol><li><p>什么是sqlmap</p></li><li><p>Sqlmap三种请求类型注入探测</p></li><li><p>获取数据库相关信息</p></li><li><p>获取数量和用户权限</p></li><li><p>Mysql数据库注入</p></li><li><p>管理自己的数据库</p></li><li><p>延时注入</p></li><li><p>交互式命令执行和写webshell</p></li><li><p>Tamper脚本的介绍和使用</p></li><li><p>本地写入webshell</p></li><li><p>批量检测注入漏洞</p></li><li><p>Sqlmap学习注入技术</p></li></ol><ul><li>集成平台：Burpsuite</li></ul><ol><li><p>Burpsuite应用场景</p></li><li><p>Burpsuite安装和简介</p></li><li><p>proxy代理模块详解</p></li><li><p>代理监听设置</p></li><li><p>代理的其他设置</p></li><li><p>重故</p></li></ol><ul><li>攻击</li></ul><ol><li><p>攻击类型的选择</p></li><li><p>攻击的payload</p></li><li><p>攻击的设置</p></li><li><p>扫描模块</p></li><li><p>设置</p></li></ol><ul><li>漏洞校测工具：metasploat</li></ul><ol><li><p>框架介绍</p></li><li><p>升级更新</p></li><li><p>端口扫描</p></li><li><p>获取系统信息</p></li><li><p>服务识别</p></li><li><p>密码嗅探</p></li><li><p>Metasploat SMB 扫描</p></li><li><p>登录验证</p></li><li><p>Metaspiolt VNC身份识别</p></li><li><p>Metasploat WMAP web扫描</p></li><li><p>Metasploat之远程代码执行</p></li><li><p>Metasploat之MIDI文件解析远程代码</p></li><li><p>Metasploat之口令安全</p></li><li><p>之hash值传递渗透</p></li><li><p>之NDproxy内核提权</p></li><li><p>之多种后门生成</p></li><li><p>之内网渗透</p></li><li><p>之反病毒</p></li><li><p>之玩转不一样xss</p></li><li><p>之维持访问</p></li></ol><ul><li>Kail渗透测试教程</li></ul><ol><li><p>虚拟节介绍及kail系统的安装</p></li><li><p>虚拟机配置及kail系统配置</p></li><li><p>windows过度到基本的Linux操作</p></li><li><p>玩转windows美化</p></li><li><p>局域网攻击</p></li><li><p>实战-获取内网之qq相册</p></li><li><p>综合应用之http账号密码获取</p></li><li><p>综合应用之https账号密码获取</p></li><li><p>会话劫持—登录别人的百度贴吧</p></li><li><p>会话劫持—一键劫持会话</p></li><li><p>sqlmap介绍及asp网络渗透</p></li><li><p>sqlmap介绍及php网络渗透</p></li><li><p>sqkmap之cookie注入</p></li><li><p>metasploit新手知识补全</p></li><li><p>metasploit之我的远程控制元件</p></li><li><p>metasploit木马文件操作功能</p></li><li><p>metasploit之木马系统操作功能</p></li><li><p>metasploit之木马的永操作及摄像头控制</p></li><li><p>metasploit之渗透安卓实战</p></li><li><p>metasploit服务器蓝屏攻击</p></li><li><p>metasploit之生成webshell及应用</p></li><li><p>自己的学习方法&amp;新年贺岁</p></li></ol><h3 id="完全开发"><a href="#完全开发" class="headerlink" title="完全开发"></a>完全开发</h3><ul><li>安全开发设计</li></ul><ol><li><p>java安全开发规范</p></li><li><p>安全开发流程</p></li><li><p>源代码缺陷审计</p></li><li><p>C/c++安全开发规范</p></li></ol><ul><li>Php代码审计</li></ul><ol><li><p>环境准备</p></li><li><p>审计方法与步骤</p></li><li><p>常见的INI配置</p></li><li><p>常见危险函数及特殊函数</p></li><li><p>XDebug的配置和使用</p></li><li><p>命令注入</p></li><li><p>安装问题的审计</p></li><li><p>SQL数字注入</p></li><li><p>Xss后台敏感操作</p></li><li><p>文件包含漏洞的审计</p></li><li><p>任意文件读取</p></li><li><p>越权操作</p></li><li><p>登录密码爆破</p></li><li><p>截断注入</p></li></ol><h3 id="Android安全"><a href="#Android安全" class="headerlink" title="Android安全"></a>Android安全</h3><ul><li>Android java逆向基础</li></ul><ol><li><p>Android环境配置与常用工具介绍</p></li><li><p>调试方法及Smali文件结构</p></li><li><p>新版本调试方法及Smail函数文件修改</p></li><li><p>JD-Gui进行代码快速阅读分析</p></li><li><p>实战演练如何去除应用中的广告</p></li><li><p>分析神器JEB使用方法</p></li></ol><ul><li>Android系统编译</li></ul><ol><li><p>安装部署Android源代码编译环境</p></li><li><p>Android源码目录结构与修改引导</p></li><li><p>Android源码修改与刷机介绍</p></li><li><p>Android Jni编程</p></li></ol><ul><li>Daivik虚拟机</li></ul><ol><li><p>Daivik虚拟机的基本原理</p></li><li><p>Daivik汇编语言</p></li><li><p>Daivik版hello world</p></li></ol><ul><li><p>Smail语法学习</p></li><li><p>逆向工程开发</p></li><li><p>应用逆向详解</p></li></ul><ol><li><p>常见Android快速定位关键点方法介绍</p></li><li><p>从0开始打造自己的破解代码库</p></li><li><p>Daivik dex处理分析</p></li></ol><ul><li>静态分析</li></ul><ol><li><p>静态分析的概念与定位关键代码</p></li><li><p>Smail文件格式与分析</p></li></ol><ul><li>Android Hook插件开发</li></ul><ol><li><p>Android结构接触详解</p></li><li><p>快速Hook代码搭建之Cydia Ubstrate</p></li><li><p>快速Hook搭建之Xposed</p></li></ol><ul><li><p>Android arm native逆向</p></li><li><p>Arm汇编代码详解</p></li><li><p>Elf结构详解</p></li></ul><ol><li><p>elf结构详解：动态运行库so文件的文件</p></li><li><p>Elf结构详解：加载so文件的流程</p></li><li><p>Elf文件变形与保护</p></li><li><p>Elf文件的修复文件</p></li></ol><ul><li>Android dvm 脱壳</li></ul><ol><li><p>Anroid脱壳中的思路，技巧</p></li><li><p>Daivik dex处理分析</p></li><li><p>IDA脱壳脚本编写</p></li><li><p>Odex修复方法</p></li><li><p>IDAOdex修复脚本编写</p></li></ol><ul><li><p>应用层攻击</p></li><li><p>安卓应用破解技巧</p></li></ul><ol><li><p>试用版软件破解</p></li><li><p>网络验证</p></li><li><p>常见调试检测方法与过检方法</p></li></ol><ul><li><p>应用层防护</p></li><li><p>Apk加固保护及对抗</p></li></ul><ol><li><p>Android加固方法</p></li><li><p>Java混淆</p></li><li><p>Elf内存加载</p></li><li><p>Dex整体加密</p></li><li><p>Dex方法隐藏</p></li><li><p>常见anti的手段</p></li><li><p>常见厂商加固和脱壳方法研究</p></li></ol><ul><li>安卓系统架构与安全机制</li></ul><ol><li>Android源码定制添加反调试机制</li></ol><ul><li>Android应用初步编程保护</li></ul><ol><li><p>class.dex文件格式讲解</p></li><li><p>Android动态代码自修改原理</p></li><li><p>Android动态代码自修改实现</p></li></ol><ul><li>Android应用保护</li></ul><ol><li><p>Android加壳原理</p></li><li><p>Android加壳原理编写</p></li><li><p>So加壳文件修复</p></li><li><p>Android源码定制添加</p></li></ol><h3 id="系统内核攻防"><a href="#系统内核攻防" class="headerlink" title="系统内核攻防"></a>系统内核攻防</h3><ul><li>系统攻防</li></ul><ol><li><p>Root及其危害</p></li><li><p>权限攻击</p></li><li><p>组件安全</p></li><li><p>CVE-2015-1805漏洞分析与研究</p></li><li><p>寄生兽漏洞原理与利用</p></li><li><p>2015年最大的移动app安全事件—虫洞</p></li></ol><h2 id="1-前端技能图谱"><a href="#1-前端技能图谱" class="headerlink" title="1 前端技能图谱"></a>1 前端技能图谱</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li>HTML / CSS</li><li>JavaScript</li><li>DOM</li></ul><h3 id="中级篇"><a href="#中级篇" class="headerlink" title="中级篇"></a>中级篇</h3><ul><li>数据格式（如JSON、XML）</li><li>RESTful API交互（如jQuery Ajax，Fetch API，ReactiveX）</li><li>正则表达式</li><li>HTML语义化</li><li>命令行</li><li>Node.js</li><li>DIV / CSS</li><li>SCSS / SASS</li><li>矢量图形 / 矢量图形动画（如SVG）</li><li>单页面应用</li></ul><h3 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h3><ul><li>ES6 / TypeScript</li><li>CSS3</li><li>面向对象编程</li><li>函数式编程</li><li>MVC / MVVM / MV *</li><li>安全性（如跨域）</li><li>授权（如HTTP Basic、JWT等等）</li></ul><h3 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h3><ul><li>代码质量（如JSLint / ESLint / TSLint / CSLint）</li><li>代码分析（如Code Climate）</li><li>测试覆盖率</li><li>构建系统（gulp、grunt、webpack等等）</li><li>自动构建（脚本）</li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ul><li>跨浏览器测试 （Chrome，IE，Firefox，Safari等等）</li><li>跨平台测试（Windows、GNU / Linux，Mac OS等等）</li><li>跨设备测试（Desktop，Android，iOS，Windows Phone）</li><li>跨版本测试（同一个浏览器的不同版本）</li></ul><h3 id="前端特定"><a href="#前端特定" class="headerlink" title="前端特定"></a>前端特定</h3><ul><li>CSS / CSS3 动画</li><li>JavaScript动画</li><li>Web字体嵌入</li><li>Icon字体</li><li>图形和图表</li><li>CSS Sprite（如glue）</li><li>DOM操作（如jQuery、React等等）</li><li>模板引擎（如JSX、Handlebars、JSP、Mustache等等）</li></ul><h3 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h3><ul><li>版本管理（如git、svn）</li><li>包管理（如npm、bower）</li><li>依赖管理</li><li>模块化（如CommonJS、WebPack）</li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul><li>浏览器调试</li><li>Debug工具</li><li>Wireshark / Charles抓包</li><li>远程设备调试（如Chrome Inspect Devices）</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>单元测试</li><li>服务测试</li><li>UI测试</li><li>集成测试</li></ul><h3 id="性能与优化"><a href="#性能与优化" class="headerlink" title="性能与优化"></a>性能与优化</h3><ul><li>PageSpeed / Yslow 优化</li><li>加载优化（如gzip压缩、缓存等等）</li><li>性能测试（特别是移动Web）</li><li>可用性</li><li>压缩（如Minify、Uglify、CleanCSS等等）</li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul><li>切页面</li><li>线框图（Wireframe）</li><li>响应式设计</li><li>网格布局（Grid Layout）</li><li>Flexbox布局</li></ul><h3 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h3><ul><li>Sitemap（站点地图）</li><li>内部链接建设</li><li>MicroData / MicroFormat</li><li>页面静态内容生成</li><li>H1、H2、H3和strong使用</li><li>Title、Description优化</li><li>页面静态内容生成</li></ul><h2 id="2-后台技能图谱"><a href="#2-后台技能图谱" class="headerlink" title="2 后台技能图谱"></a>2 后台技能图谱</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><ul><li>HTML / CSS</li><li>编程语言：Java / Python / PHP / Ruby等等</li><li>Web框架，如Spring MVC、Flask、Laravel等等</li><li>HTTP协议基础</li><li>CGI基础</li></ul><h3 id="中级篇-1"><a href="#中级篇-1" class="headerlink" title="中级篇"></a>中级篇</h3><ul><li>XML和JSON处理</li><li>数据结构与算法</li><li>面向对象编程</li><li>CMS</li><li>API设计</li><li>网络通信协议，如TCP / Socket</li></ul><h3 id="高级篇-1"><a href="#高级篇-1" class="headerlink" title="高级篇"></a>高级篇</h3><ul><li>函数式编程</li><li>领域驱动设计</li><li>MVC架构</li><li>运行环境优化，如JVM</li><li>远程调试</li></ul><h3 id="工程化-1"><a href="#工程化-1" class="headerlink" title="工程化"></a>工程化</h3><ul><li>版本管理</li><li>单元测试</li><li>依赖管理</li><li>包管理</li></ul><h3 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h3><ul><li>虚拟化，如Docker</li><li>自动化部署</li><li>应用包创建、管理、发布</li><li>发布脚本编写</li><li>Web容器，如Jboss</li></ul><h3 id="缓存篇"><a href="#缓存篇" class="headerlink" title="缓存篇"></a>缓存篇</h3><ul><li>应用层缓存</li><li>平台缓存</li><li>数据库端缓存</li><li>分布式缓存</li></ul><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><ul><li>SQL</li><li>NoSQL</li><li>ORM</li><li>DBMS</li><li>搜索引擎</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>查询性能优化</li><li>结构优化</li><li>主从复制、主主复制等等</li><li>伸缩性与高可用性</li><li>备份恢复与容灾</li></ul><h3 id="安全和加密"><a href="#安全和加密" class="headerlink" title="安全和加密"></a>安全和加密</h3><ul><li>认证与会话管理</li><li>加密解密</li><li>数字签名、数字证书</li><li>加密算法</li><li>XSS / CSRF / SQL注入</li></ul><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><ul><li>应用性能监控</li><li>异常监控</li><li>日志</li><li>流量监控</li></ul><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><ul><li>RESTful</li><li>SOA</li><li>RPC</li><li>MicroServices</li></ul><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><ul><li>JMS</li><li>IPC</li><li>MQ</li></ul><h2 id="3-DevOps技能图谱"><a href="#3-DevOps技能图谱" class="headerlink" title="3 DevOps技能图谱"></a>3 DevOps技能图谱</h2><h3 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h3><ul><li>编写脚本，如Shell、Perl、Python等等</li><li>编程语言</li><li>Web应用运行基本原理</li><li>HTTP服务器</li><li>应用容器</li><li>命令行，如awk</li><li>CGI</li><li>修复漏洞</li></ul><h3 id="中级篇-2"><a href="#中级篇-2" class="headerlink" title="中级篇"></a>中级篇</h3><ul><li>自动化运维</li><li>GNU / Linux操作系统</li><li>编译</li><li>数据库</li></ul><h3 id="高级篇-2"><a href="#高级篇-2" class="headerlink" title="高级篇"></a>高级篇</h3><ul><li>分布式文件系统</li><li>分布式存储系统</li></ul><h3 id="云服务"><a href="#云服务" class="headerlink" title="云服务"></a>云服务</h3><ul><li>存储服务，如AWS S3</li><li>计算服务，如AWS Lambda</li><li>托管服务，如AWS EC2</li></ul><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ul><li>CCNP / CCNA</li></ul><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><ul><li>持续集成工具</li><li>自动构建工具</li><li>依赖管理工具</li><li>版本管理工具</li></ul><h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h3><ul><li>应用容器虚拟化，如Docker</li><li>环境虚拟化</li><li>操作系统虚拟化</li></ul><h3 id="自动化-puppet-chef"><a href="#自动化-puppet-chef" class="headerlink" title="自动化 (puppet,chef)"></a>自动化 (puppet,chef)</h3><ul><li>自动化配置</li><li>自动化部署</li><li>进程管理工具，如Supervisor</li></ul><h3 id="监控-1"><a href="#监控-1" class="headerlink" title="监控"></a>监控</h3><ul><li>基础设施监控</li><li>日志管理</li><li>监控服务</li></ul><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>边缘缓存，如（Varnish）</li><li>DNS负载均衡</li><li>CDN</li></ul><h2 id="4-软技能图谱"><a href="#4-软技能图谱" class="headerlink" title="4 软技能图谱"></a>4 软技能图谱</h2><h3 id="影响力-个人品牌"><a href="#影响力-个人品牌" class="headerlink" title="影响力 / 个人品牌"></a>影响力 / 个人品牌</h3><ul><li>写作</li><li>演讲</li><li>培训</li><li>博客</li><li>社交媒体</li></ul><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><ul><li>社交媒体交流</li><li>自媒体平台</li><li>技术社区</li><li>问答社区</li></ul><h3 id="持续学习"><a href="#持续学习" class="headerlink" title="持续学习"></a>持续学习</h3><ul><li>学习新技术、语言</li></ul><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><ul><li>运动</li><li>不熬夜</li></ul><h3 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h3><ul><li>熟悉工具</li><li>快捷键、快捷键、快捷键</li></ul><h3 id="估算"><a href="#估算" class="headerlink" title="估算"></a>估算</h3><ul><li>完成时间估算</li><li>延迟花费</li><li>预算估算</li><li>薪资估算</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>面试</li><li>客户沟通</li></ul><p>在 <a href="https://github.com/phodal/awesome-growth">https://github.com/phodal/awesome-growth</a><br><a href="https://blog.csdn.net/wfhjhffg/article/details/78331928?utm_source=app&amp;app_version=4.14.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen">https://blog.csdn.net/wfhjhffg/article/details/78331928?utm_source=app&amp;app_version=4.14.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen</a> 图谱的总结基础上结合自身完善。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kali Linux安装基本操作</title>
      <link href="/2021/08/20/kali-linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/08/20/kali-linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>复制：右键光标</p><p>粘贴：鼠标中键</p><h3 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h3><p>vim /etc/resolv.conf</p><p>永久设置IP</p><p>vim /etc/network/interfaces</p><h3 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h3><p>i 插入      ZZ 保存并退出       esc 之后 ：      要显示行号   ：set nu</p><p>vim /etc/resolv.conf    #在文档最后插入 DNS 地址</p><p>systemctl restart networking    #重启网络程序</p><p>/etc/init.d/</p><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img/img/b/image-20210830133444335.png" alt="KALI配置网络"></p><h3 id="配置sshd服务并使用xshell连接"><a href="#配置sshd服务并使用xshell连接" class="headerlink" title="配置sshd服务并使用xshell连接"></a>配置sshd服务并使用xshell连接</h3><p>显示行数      : set nu</p><p>允许root 用户登录sshd服务           vim /etc/ssh/sshd_config</p><p> systemctl restart ssh </p><p>开机启动      update-rc.d ssh enable </p><h3 id="Xshell连接ssh"><a href="#Xshell连接ssh" class="headerlink" title="Xshell连接ssh"></a>Xshell连接ssh</h3><p><img src="https://cdn.jsdelivr.net/gh/sailaoda/sai_img/img/b/image-20210830134046498.png" alt="Xshell界面"></p>]]></content>
      
      
      <categories>
          
          <category> KaliLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KaliLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装nvm后无npm导致无法安装GitBook解决办法</title>
      <link href="/2021/08/20/%E5%AE%89%E8%A3%85nvm%E5%90%8E%E6%97%A0npm%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85gitbook%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2021/08/20/%E5%AE%89%E8%A3%85nvm%E5%90%8E%E6%97%A0npm%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85gitbook%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="安装nvm后无npm导致无法安装GitBook解决办法"><a href="#安装nvm后无npm导致无法安装GitBook解决办法" class="headerlink" title="安装nvm后无npm导致无法安装GitBook解决办法"></a>安装nvm后无npm导致无法安装GitBook解决办法</h1><h2 id="1-nvm的安装"><a href="#1-nvm的安装" class="headerlink" title="1.nvm的安装"></a>1.nvm的安装</h2><p><code>nvm-windows</code> 可以在 github 中进行下载。下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">download-nvm-windows</a></p><p>然后直接选择第二个 <code>nvm-setup.zip</code>，然后解压出来一步一步按照提示安装即可（建议放D盘）</p><p><img src="https://img-blog.csdnimg.cn/20210307182221374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTY1MDQ1,size_16,color_FFFFFF,t_70#pic_center" alt="NVM 版本信息"></p><p>nvm会自动配置系统变量，注意记好nvm的解压地址和安装路径。</p><p>之后按键win+R输入<code>cmd</code>打开命令行</p><p>命令行输入<code>nvm -v</code>，若出现NVM版本信息则配置成功。</p><pre class="language-none"><code class="language-none">$ nvm -v1.1.7</code></pre><p><img src="https://img-blog.csdnimg.cn/20210307182233226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTY1MDQ1,size_16,color_FFFFFF,t_70#pic_center" alt="nvm版本信息验证"></p><h2 id="2-验证与配置node-和npm"><a href="#2-验证与配置node-和npm" class="headerlink" title="2.验证与配置node 和npm"></a>2.验证与配置node 和npm</h2><h3 id="2-1验证node和npm是否配置成功"><a href="#2-1验证node和npm是否配置成功" class="headerlink" title="2.1验证node和npm是否配置成功"></a>2.1验证node和npm是否配置成功</h3><p>接着用同样的方法验证 <code>npm</code> 和 <code>node</code>：</p><pre class="language-none"><code class="language-none">$ npm -v6.1.0$ node -vv10.3.0</code></pre><p>若出现找不到<code>npm</code>和<code>node</code>版本信息的情况，如下：</p><pre class="language-none"><code class="language-none">D:\&gt;npm -v&#39;npm&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。D:\&gt;node -v&#39;node&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。</code></pre><h3 id="2-2配置node-的相关操作"><a href="#2-2配置node-的相关操作" class="headerlink" title="2.2配置node 的相关操作"></a>2.2配置node 的相关操作</h3><p>此时，可以通过 nvm 进行安装指定的 node 版本，如下所示：</p><pre class="language-none"><code class="language-none">nvm install latest     &#x2F;&#x2F; 下载最新的 node 版本 v7.2.0nvm install 8.5.0      &#x2F;&#x2F; 安装指定 node 版本nvm install 6.11.3 32  &#x2F;&#x2F; 安装指定 node 版本，并指定32位操作系统。默认是64位，32位需指定</code></pre><p><strong>查看已安装的 node 版本</strong></p><p><strong>注意：</strong> <code>*</code> 表示当前使用版本</p><pre class="language-none"><code class="language-none">$ nvm ls  * 10.3.0 (Currently using 64-bit executable)    8.11.2</code></pre><p><strong>引入使用 node 版本</strong></p><pre class="language-none"><code class="language-none">$ nvm use 8.11.2Now using node v8.11.2 (64-bit)</code></pre><p><strong>验证是否已切换至 8.11.2 版本</strong></p><pre class="language-none"><code class="language-none">$ nvm ls    10.3.0  * 8.11.2 (Currently using 64-bit executable)</code></pre><p><strong>卸载对应 node 的版本</strong></p><pre class="language-none"><code class="language-none">$ nvm uninstall 10.3.0Uninstalling node v10.3.0...Error removing node v10.3.0Manually remove D:\Npm\nvm\v10.3.0.</code></pre><p><img src="https://img-blog.csdnimg.cn/20210307182250488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTY1MDQ1,size_16,color_FFFFFF,t_70#pic_center" alt="nvm配置node过程"></p><h3 id="2-3配置相应npm的相关操作"><a href="#2-3配置相应npm的相关操作" class="headerlink" title="2.3配置相应npm的相关操作"></a>2.3配置相应npm的相关操作</h3><blockquote><p>安装nvm，只指定了node的存放位置，和应用目录，别的临时目录啥的都没动。</p></blockquote><p>如果不清楚node的安装位置，可以先在命令行中输入<code>where node</code>查找node路径</p><pre class="language-none"><code class="language-none">D:\&gt;npm -v7.6.0</code></pre><p>接着打开nvm的安装文件夹，修改settings文件中的</p><pre class="language-none"><code class="language-none">node_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</code></pre><p><code>改成淘宝镜像，增加成功率</code></p><p>修改完成之后，在cmd中使用nvm 卸载当前指定的node版本</p><p><code>nvm uninstall</code> 指定版本号</p><p>使用<code>nvm ls</code> 查询是否卸载成功</p><p>成功后</p><p>使用 <code>nvm install xx</code> 安装指定版本</p><p>再次使用 <code>nvm ls</code>查询安装成功</p><p>使用 <code>nvm use xx</code>启用该版本的node</p><p>再次查询 <code>node -v</code>和<code>npm -v</code></p><p>成功得到版本号</p><pre class="language-none"><code class="language-none">D:\&gt;npm -v7.6.0</code></pre><h4 id="2-3-1经过几个小时摸索npm的发现"><a href="#2-3-1经过几个小时摸索npm的发现" class="headerlink" title="2.3.1经过几个小时摸索npm的发现"></a>2.3.1经过几个小时摸索npm的发现</h4><p>在nvm中，当你安装配置了第一个node版本后，再安装其他的node版本，use 之后会发现找不到npm路径命令。</p><p>解决方法：<strong>全部删除nvm文件夹重新装</strong>，然后安装第一个node版本就安你想要的哪个。</p><p>好像是因为一些<strong>缓存的原因</strong>，我尝试了网上各种方法都是虚的。搞不好。</p><p>直接nvm文件夹全部删除重装，简单干净。</p><h2 id="3-安装GitBook过程"><a href="#3-安装GitBook过程" class="headerlink" title="3.安装GitBook过程"></a>3.安装GitBook过程</h2><p>先进入D盘，创建一个文件夹，创建成功后进入文件夹：</p><pre class="language-none"><code class="language-none">D:\&gt;D:D:\&gt;mkdir gitbookD:\&gt;cd gitbook</code></pre><p>也可以直接进入D盘新建文件夹后shift+右键，直接文件夹处打开命令行</p><p>先来进行安装，为了保险起见。需要执行一次卸载命令，防止系统中有预留：</p><pre class="language-none"><code class="language-none">npm uninstall -g gitbooknpm uninstall -g gitbook-cli</code></pre><p>然后再进行安装。</p><ul><li>npm 直接下载：</li></ul><pre class="language-none"><code class="language-none">npm install -g gitbook-cli</code></pre><p>到此，就安装成功了。可以在命令终端中输入 <code>gitbook help</code> 进行验证：</p><pre class="language-none"><code class="language-none">gitbook help</code></pre><p>卸载重装结果又卡到这里了！！！！</p><p>对不起兄弟们，我直接裂开了，之前好了的现在又一直卡在安装GitBook3.2.3了。</p><p>网上所有方法又都试了一遍，没一个适合解决的。</p><p>兄弟们不用想着等这个转完安装好了，因为我已经等了好久了，还怕网慢了开着科学上网的。</p><p><strong>！！！！！！！就是网速的问题，我打完字一看居然下好了！！！！！！！！</strong></p><p>兄弟们还是要有耐心！</p><p>我差点就准备放弃GitBook了，不过是真的香！</p><p>希望兄弟们装的时候一路顺风！别像我一样搞了一整天…</p><p><img src="https://img-blog.csdnimg.cn/20210307182312425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTY1MDQ1,size_16,color_FFFFFF,t_70#pic_center" alt="一定要有耐心兄弟们！"></p><p><em>可能还有fsevents@0.3.8: “Please update to latest v2.3 or v2.2”等等一些报错的情况，别管他了，搜也搜不明白的，直接按照上面的重装完事！！</em></p><p>安装成功之后可以看到，在输出的信息中有如何使用说明。比如：</p><p>创建一个 <code>gitbook</code> 文件夹，创建成功后进入文件夹：</p><pre class="language-none"><code class="language-none">$ mkdir gitbook$ cd gitbook</code></pre><p>进入 <code>gitbook</code> 文件夹后在命令终端中输入 <code>gitbook init</code> 初始化命令。该命令同 <code>git init</code>，不过 <code>git</code> 是初始化仓库，<code>gitbook</code> 则是初始化书。</p><pre class="language-none"><code class="language-none">$ gitbook init </code></pre><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 启动书本 gitbook serve&#x2F;&#x2F; 指定具体端口进行启动 gitbook serve --lrport&#x3D;&lt;listen-port&gt; --port&#x3D;&lt;server-port&gt;</code></pre><p>启动完成后，就可以在浏览器中输入 <code>http://localhost:4000</code> 进行预览你的书籍了！</p><p>4.GitBook常见命令</p><pre class="language-none"><code class="language-none">gitbook init &#x2F;&#x2F;初始化目录文件gitbook help &#x2F;&#x2F;列出gitbook所有的命令gitbook --help &#x2F;&#x2F;输出gitbook-cli的帮助信息gitbook build &#x2F;&#x2F;生成静态网页gitbook serve &#x2F;&#x2F;生成静态网页并运行服务器gitbook build --gitbook&#x3D;2.0.1 &#x2F;&#x2F;生成时指定gitbook的版本, 本地没有会先下载gitbook ls &#x2F;&#x2F;列出本地所有的gitbook版本gitbook ls-remote &#x2F;&#x2F;列出远程可用的gitbook版本gitbook fetch 标签&#x2F;版本号 &#x2F;&#x2F;安装对应的gitbook版本gitbook update &#x2F;&#x2F;更新到gitbook的最新版本gitbook uninstall 2.0.1 &#x2F;&#x2F;卸载对应的gitbook版本gitbook build --log&#x3D;debug &#x2F;&#x2F;指定log的级别gitbook builid --debug &#x2F;&#x2F;输出错误信息</code></pre><p>附上我安装过程中搜的一些感觉还挺有用的教程：</p><p>不用nvm直接用npm教程：<a href="https://blog.csdn.net/zerorm/article/details/79229053">https://blog.csdn.net/zerorm/article/details/79229053</a></p><p>排坑：<a href="http://www.yanjuntech.cn/archives/2396">http://www.yanjuntech.cn/archives/2396</a></p><p>这个算是比较详细的排坑了：<a href="https://blog.csdn.net/qq_43528771/article/details/107949010">https://blog.csdn.net/qq_43528771/article/details/107949010</a></p><p>一直等待安装一个可能的原因（<code>grateful.fs有关</code>）<a href="https://blog.csdn.net/qq_30033537/article/details/113738575?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=1328602.43614.16150998597630083&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/qq_30033537/article/details/113738575?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=1328602.43614.16150998597630083&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p><p>附上node.js的各种版本：<a href="https://nodejs.org/zh-cn/download/releases/">https://nodejs.org/zh-cn/download/releases/</a></p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我不算一个诗人</title>
      <link href="/2021/08/20/%E6%88%91%E4%B8%8D%E7%AE%97%E4%B8%80%E4%B8%AA%E8%AF%97%E4%BA%BA/"/>
      <url>/2021/08/20/%E6%88%91%E4%B8%8D%E7%AE%97%E4%B8%80%E4%B8%AA%E8%AF%97%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<div class='poem'><div class='poem-title'>我不算一个诗人</div><div class='poem-author'>赛</div><p>我不算一个诗人，我知道<br>诗人有酒，可我没有<br>那钓诗钩，那扫愁帚<br>我不会知晓<br>孤独不会发酵<br>所以不会有酒精来陪我笑<br>我只是一个孩子<br>只好在食堂<br>点上两大碗米酒来模仿<br>模仿毛巨星的坦荡<br>一碗敬自由<br>一碗敬死亡<br>止住心中诗人的痒</p></div><div class='poem'><div class='poem-title'></div><div class='poem-author'></div><p>我不算一个诗人，我知道<br>诗人有愁，可我没有<br>低下头看那舴艋舟<br>抬起头问那多少恨的西风<br>不过是故弄玄虚<br>为赋新词罢了<br>我只是一个少年<br>如何能识得愁的滋味<br>我又不是李白迪伦薛之谦<br>如何能创造出伟大的诗篇<br>好喜欢小四的坦白<br>我的心中就是有霾<br>扩散成诗人的癌</p></div><div class='poem'><div class='poem-title'></div><div class='poem-author'></div><p>我不算一个诗人，我知道<br>求你别再心劳日拙地反复提及<br>正如上句，我用成语也会褒贬失当<br>希望你不要发散想象<br>我不算一个诗人，我知道<br>没有人会去盗版我的诗集<br>不会一本万利，只会亏本到底<br>哦，对不起<br>我忘了我甚至没有一部诗集<br>我高估了自己</p></div><div class='poem'><div class='poem-title'></div><div class='poem-author'></div><p>我知道，我不算一个诗人<br>但若是未来某一天<br>我俩在街头遇见<br>你能克服被路人唤作神经病的杂念<br>以诗人唤我几遍<br>我也会像个神经病一样<br>高兴半天</p></div>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
